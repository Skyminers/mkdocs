{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4f60\u597d","text":"<p>\u6211\u662f Sky_miner \u4e00\u4e2a\u5373\u5c06\u6bd5\u4e1a\u7684 ZJUer\u3002\u5e0c\u671b\u4f60\u80fd\u5728\u8fd9\u91cc\u627e\u5230\u4f60\u9700\u8981\u7684\u4fe1\u606f\u3002</p> <ul> <li> \u9762\u8bd5\u76f8\u5173 \u2013 \u770b\u770b\u6211\u51c6\u5907\u9762\u8bd5\u65f6\u6240\u6574\u7406\u603b\u7ed3\u7684\u8d44\u6599\uff0c\u6216\u8bb8\u5bf9\u4f60\u4e5f\u6709\u4e00\u4e9b\u5e2e\u52a9\u3002</li> <li> \u673a\u5668\u5b66\u4e60 \u2013 \u4e3a\u4ec0\u4e48\u6211\u8fd8\u4f1a\u6709\u8fd9\u4e2a\u4e1c\u897f\uff1f\u8fd9\u597d\u50cf\u662f\u4e4b\u524d\u4e34\u65f6\u8bb2\u8bfe\u6574\u7406\u7684\u8d44\u6599\uff0c\u603b\u4e4b\u5148\u653e\u4e0a\u6765\u4e86\u3002</li> <li> \u65b9\u6cd5\u8bb0\u5f55 \u2013 \u8fd9\u91cc\u9762\u5305\u542b\u4e86\u5f88\u591a\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u4e00\u4e9b\u6211\u9047\u5230\u540e\u89e3\u51b3\u7684\u95ee\u9898\u3002\u4e3b\u8981\u5185\u5bb9\u662f\u4f7f\u7528\u7535\u8111\u7684\u65b9\u6cd5\u3002</li> <li> \u6742\u9879 \u2013 \u4e0d\u77e5\u9053\u5982\u4f55\u5f52\u7c7b\u7684\u4e1c\u897f\uff0c\u7edf\u7edf\u8fdb\u6765\u5427\u3002</li> </ul>"},{"location":"interview/","title":"\u9762\u8bd5\u76f8\u5173","text":"<p>\u6574\u7406\u4e86\u5728\u51c6\u5907\u9762\u8bd5\u8fc7\u7a0b\u4e2d\u7684\u76f8\u5173\u8d44\u6599\u548c\u8fdb\u884c\u8fc7\u7684\u7ec3\u4e60\u4e0e\u51c6\u5907\u3002</p>"},{"location":"interview/auc/","title":"AUC \u9762\u8bd5\u8d44\u6599\u6574\u7406","text":""},{"location":"interview/auc/#auc_1","title":"\u4ec0\u4e48\u662f AUC","text":"<p>AUC (Area under the curve), \u76f4\u8bd1\u4e3a\u66f2\u7ebf\u4e0b\u9762\u7684\u9762\u79ef\u3002\u8fd9\u91cc\u7684\u66f2\u7ebf\u901a\u5e38\u6307\u7684\u662f ROC (Receiver operating characteristic)\u3002ROC \u66f2\u7ebf\u662f\u4e00\u79cd\u7528\u4e8e\u8bc4\u4f30\u4e8c\u5206\u7c7b\u6a21\u578b\u7684\u6027\u80fd\u7684\u56fe\u5f62\u5de5\u5177\u3002</p> <p>\u5bf9\u4e8e\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u9884\u6d4b\u6a21\u578b\u901a\u5e38\u4f1a\u5bf9\u6837\u672c\u9884\u6d4b\u4e00\u4e2a\u5f97\u5206 \\(s\\) \u6216\u8005\u6982\u7387 \\(p\\)\uff0c\u7136\u540e\u9009\u53d6\u4e00\u4e2a\u9608\u503c\u5c06\u4e0d\u540c\u5f97\u5206\u6216\u8005\u6982\u7387\u7684\u6837\u672c\u5206\u522b\u5212\u5206\u4e3a\u6b63\u6837\u672c\u548c\u8d1f\u6837\u672c\u8fdb\u884c\u9884\u6d4b\u3002\u9884\u6d4b\u548c\u5b9e\u9645\u7ed3\u679c\u7684\u6bd4\u5bf9\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0b\u9762\u56db\u79cd\u60c5\u51b5\uff1a</p> \u6b63\u6837\u672c \u8d1f\u6837\u672c \u9884\u6d4b\u4e3a\u6b63 TP(\u771f\u6b63\u4f8b) FP(\u5047\u6b63\u4f8b) \u9884\u6d4b\u4e3a\u8d1f FN(\u5047\u8d1f\u4f8b) TN(\u771f\u8d1f\u4f8b) <p>\u968f\u7740\u9608\u503c \\(t\\) \u7684\u9009\u53d6\u4e0d\u540c\uff0c\u8fd9\u56db\u7c7b\u6837\u672c\u7684\u6bd4\u4f8b\u4e5f\u5404\u4e0d\u76f8\u540c\uff0c\u5b9a\u4e49\u771f\u6b63\u4f8b\u7387 TPR \u548c\u5047\u6b63\u4f8b\u7387 FPR \u4e3a\uff1a</p> \\[ TPR = \\frac{TP}{TP + FN}, \\quad FPR = \\frac{FP}{FP + TN} \\] <p>TPR \u53ef\u4ee5\u7406\u89e3\u4e3a\u505a\u51fa\u6b63\u9884\u6d4b\u7684\u53ef\u4fe1\u5ea6\uff0cFPR \u53ef\u4ee5\u7406\u89e3\u4e3a\u505a\u51fa\u8d1f\u9884\u6d4b\u7684\u9519\u8bef\u7387\u3002\u968f\u7740\u9608\u503c\u4ece \\(0\\) \u5230 \\(1\\) \u53d8\u5316\uff0cTPR \u548c FPR \u7684\u5750\u6807\u56fe\u4f1a\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u5f62\u6210\u4e00\u6761\u7ebf\uff0c\u8fd9\u5c31\u662f ROC \u66f2\u7ebf\u3002</p> <p>\u5982\u679c\u9884\u6d4b\u5668\u968f\u673a\u505a\u51fa\u9884\u6d4b\uff0c\u90a3\u4e48\u5e73\u5747\u60c5\u51b5\u4e0b\u7684 ROC \u66f2\u7ebf\u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u56e0\u4e3a\u968f\u673a\u60c5\u51b5\u4e0b\u6709 \\(TPR = FPR\\)\u3002\u5982\u679c\u9884\u6d4b\u5668\u80fd\u591f\u5b8c\u7f8e\u505a\u51fa\u9884\u6d4b\uff0c\u90a3\u4e48\u6709 \\(TPR = 1, FPR = 0\\)\uff0cROC \u66f2\u7ebf\u5e94\u8be5\u662f\u4e00\u6761\u5148\u4e0a\u5347\u518d\u4e0d\u53d8\u7684\u6298\u7ebf\u3002\u8bad\u7ec3\u51fa\u6765\u7684\u6a21\u578b\u7684\u6548\u679c\u4f1a\u4ecb\u4e8e\u968f\u673a\u60c5\u51b5\u4e0b\u548c\u7406\u60f3\u60c5\u51b5\u4e0b\u7684 ROC \u66f2\u7ebf\u4e4b\u95f4\uff0c\u4f1a\u5448\u73b0\u51fa\u4e00\u6761\u66f2\u7ebf\uff08\u6298\u7ebf\uff09\u3002</p> <p></p> <p>ROC \u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u5373\u4e3a AUC</p>"},{"location":"interview/auc/#auc_2","title":"AUC \u6709\u4ec0\u4e48\u610f\u4e49","text":"<p>AUC \u5c1d\u5c1d\u88ab\u7528\u6765\u4f5c\u4e3a\u6a21\u578b\u597d\u574f\u7684\u6307\u6807:</p> <ul> <li>\\(AUC = 0.5\\) \u8868\u793a\u6a21\u578b\u6ca1\u6709\u5206\u7c7b\u80fd\u529b\uff0c\u76f8\u5f53\u4e8e\u968f\u673a\u731c\u6d4b</li> <li>\\(0.5 &lt; AUC &lt; 0.7\\) \u8868\u793a\u6a21\u578b\u6709\u4e00\u5b9a\u5206\u7c7b\u80fd\u529b\uff0c\u4f46\u6548\u679c\u4e00\u822c</li> <li>\\(0.7 \\le AUC \\le 0.9\\) \u8868\u793a\u6a21\u578b\u6709\u8f83\u597d\u7684\u5206\u7c7b\u80fd\u529b</li> <li>\\(0.9 \\le AUC\\) \u8868\u793a\u6a21\u578b\u975e\u5e38\u597d\u7684\u5206\u7c7b\u80fd\u529b</li> </ul> <p>AUC \u662f\u9608\u503c\u65e0\u5173\u7684\uff0c\u8be5\u53c2\u6570\u8861\u91cf\u4e86\u6a21\u578b\u5728\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u9608\u503c\u4e0b\u7684\u8868\u73b0\uff0c\u56e0\u6b64\u4e0d\u53d7\u5355\u4e00\u9608\u503c\u7684\u5f71\u54cd\u3002\u5e76\u4e14 AUC \u7efc\u5408\u4e86 TPR \u548c FPR \u7684\u4fe1\u606f\uff0c\u80fd\u591f\u5168\u9762\u8bc4\u4f30\u6a21\u578b\u7684\u6027\u80fd\u3002</p> <p>\u4f46\u662f AUC \u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u6781\u5ea6\u4e0d\u5e73\u8861\u7684\u6570\u636e\uff0c\u5728\u6781\u5ea6\u4e0d\u5e73\u8861\u7684\u6570\u636e\u4e2d AUC \u53ef\u80fd\u65e0\u6cd5\u51c6\u786e\u53cd\u5e94\u6a21\u578b\u7684\u6027\u80fd\u3002</p>"},{"location":"interview/auc/#auc_3","title":"AUC \u7684\u6982\u7387\u89e3\u91ca","text":"<p>AUC \u53ef\u4ee5\u770b\u4f5c\u662f\u968f\u673a\u4ece\u6b63\u8d1f\u6837\u672c\u4e2d\u9009\u53d6\u4e00\u5bf9\u6b63\u8d1f\u6837\u672c\uff0c\u5176\u4e2d\u6b63\u6837\u672c\u5927\u4e8e\u8d1f\u6837\u672c\u7684\u6982\u7387\u3002\u5728\u53c2\u8003\u94fe\u63a51\u4e2d\u6709\u5bf9\u8fd9\u4e00\u6027\u8d28\u8fdb\u884c\u8bc1\u660e\u3002</p>"},{"location":"interview/auc/#auc_4","title":"AUC \u7684\u6392\u5e8f\u7279\u6027","text":"<p>\u57fa\u4e8e\u6982\u7387\u89e3\u91ca\uff0cAUC \u5b9e\u9645\u4e0a\u5728\u8bf4\u6a21\u578b\u628a\u4e00\u4e2a\u6b63\u6837\u672c\u6392\u5728\u8d1f\u6837\u672c\u4e4b\u524d\u7684\u6982\u7387\u3002\u6240\u4ee5\u8fd9\u4e2a\u6982\u7387\u5e38\u7528\u5728\u6392\u5e8f\u573a\u666f\u7684\u6a21\u578b\u8bc4\u4f30\uff0c\u4f8b\u5982\u641c\u7d22\u548c\u63a8\u8350\u7b49\u573a\u666f\u3002</p>"},{"location":"interview/auc/#_1","title":"\u4ee3\u7801\u6d4b\u8bd5","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, roc_auc_score, accuracy_score, confusion_matrix\n\n# \u751f\u6210\u4e00\u4e2a\u4e0d\u5e73\u8861\u7684\u6b66\u4fa0\u6570\u636e\u96c6\n# \u5047\u8bbe\u7279\u5f81\u8868\u793a\u6b66\u529f\u4fee\u70bc\u65f6\u95f4\u3001\u6218\u6597\u80dc\u7387\u7b49\uff0c\u6807\u7b7e\u8868\u793a\u662f\u5426\u4e3a\u9ad8\u624b\nX, y = make_classification(n_samples=1000, n_features=20, n_classes=2, weights=[0.9, 0.1], random_state=42)\n\n# \u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# \u8bad\u7ec3\u4e00\u4e2a\u903b\u8f91\u56de\u5f52\u6a21\u578b\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# \u9884\u6d4b\u6d4b\u8bd5\u96c6\ny_pred_prob = model.predict_proba(X_test)[:, 1]\n\n# \u8ba1\u7b97 ROC \u66f2\u7ebf\u548c AUC\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\nauc = roc_auc_score(y_test, y_pred_prob)\n\n# \u53ef\u89c6\u5316\u7ed3\u679c\nplt.figure(figsize=(10, 5))\n\nplt.subplot(1, 2, 1)\nplt.title(\"ROC \u66f2\u7ebf\")\nplt.plot(fpr, tpr, color='blue', lw=2, label=f\"AUC = {auc:.2f}\")\nplt.plot([0, 1], [0, 1], color='gray', lw=1, linestyle='--')\nplt.xlabel(\"\u5047\u9633\u6027\u7387\")\nplt.ylabel(\"\u771f\u9633\u6027\u7387\")\nplt.legend(loc=\"lower right\")\n\nplt.subplot(1, 2, 2)\nplt.title(\"AUC \u503c\u793a\u610f\")\nplt.fill_between(fpr, tpr, color='blue', alpha=0.3)\nplt.plot(fpr, tpr, color='blue', lw=2, label=f\"AUC = {auc:.2f}\")\nplt.xlabel(\"\u5047\u9633\u6027\u7387\")\nplt.ylabel(\"\u771f\u9633\u6027\u7387\")\nplt.legend(loc=\"lower right\")\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"AUC: {auc:.2f}\")\n</code></pre>"},{"location":"interview/auc/#_2","title":"\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>\u6df1\u5165\u7406\u89e3 AUC</li> <li>\u7b97\u6cd5\u91d1 | \u4e00\u6587\u5f7b\u5e95\u7406\u89e3\u673a\u5668\u5b66\u4e60 ROC-AUC</li> </ul>"},{"location":"interview/cheating_sheet/","title":"\u516b\u80a1\u6587/\u667a\u529b\u9898\u6574\u7406","text":"<p>\u8bb0\u5f55\u4e00\u4e9b\uff0c\u516b\u80a1\u6587\u548c\u667a\u529b\u9898\u3002</p>"},{"location":"interview/cheating_sheet/#c","title":"C++ \u76f8\u5173","text":""},{"location":"interview/cheating_sheet/#c_1","title":"C++ \u865a\u51fd\u6570","text":"<p>\u4e00\u822c\u5b9a\u4e49\u865a\u51fd\u6570\u65f6\u662f\u4e3a\u4e86\u591a\u6001\uff0c\u5141\u8bb8\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u6307\u9488\u8c03\u7528\u4e0d\u540c\u5b50\u7c7b\u5bf9\u8be5\u865a\u51fd\u6570\u5b9e\u73b0\u7684\u4e0d\u540c\u529f\u80fd\u3002\u865a\u51fd\u6570\u5206\u4e3a\u4e86\u865a\u51fd\u6570\u548c\u7eaf\u865a\u51fd\u6570\uff0c\u865a\u51fd\u6570\u662f\u6709\u9ed8\u8ba4\u7684\u529f\u80fd\u5b9e\u73b0\u7684\uff0c\u7eaf\u865a\u51fd\u6570\u662f\u6ca1\u6709\u5b9e\u73b0\u7684\uff0c\u8981\u6c42\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\u3002</p> <p>\u7eaf\u865a\u51fd\u6570\u7684\u5b9a\u4e49\u65b9\u5f0f\u662f\u5728\u5b9a\u4e49\u7684\u8bed\u53e5\u540e\u9762\u52a0<code>=0</code>\uff0c\u4f8b\u5982\uff1a<code>virtual void funtion1()=0</code></p>"},{"location":"interview/cheating_sheet/#vector-push_back-emplace_back","title":"vector \u4e2d push_back \u548c emplace_back \u7684\u533a\u522b","text":"<p>emplace_back \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u8981\u66f4\u5feb\u4e00\u4e9b\u3002</p> <p>push_back:</p> <ul> <li>\u5982\u679c\u4f20\u5165\u7684\u662f\u5de6\u503c: push_back \u4f1a\u9996\u5148\u8c03\u7528\u6784\u9020\u51fd\u6570\u6784\u9020\u51fa\u53f3\u503c\uff0c\u7136\u540e\u8c03\u7528 copy \u5c06\u8fd9\u4e2a\u53f3\u503c\u62f7\u8d1d\u5230 vector \u7a7a\u95f4\u5185\uff0c\u7136\u540e\u5728\u7ed3\u675f\u65f6\u8c03\u7528\u8fd9\u4e2a\u53f3\u503c\u7684\u6790\u6784\u51fd\u6570\u3002</li> <li>\u5982\u679c\u4f20\u5165\u7684\u662f\u53f3\u503c: push_back \u9996\u5148\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u6784\u9020\u51fa\u53f3\u503c\uff0c\u7136\u540e\u8c03\u7528 move \u5c06\u8fd9\u4e2a\u53f3\u503c\u79fb\u52a8\u5230 vector \u7a7a\u95f4\u5185\uff0c\u7136\u540e\u5728\u7ed3\u675f\u65f6\u8c03\u7528\u8fd9\u4e2a\u53f3\u503c\u7684\u6790\u6784\u51fd\u6570\u3002</li> </ul> <p>emplace_back:</p> <ul> <li>\u5982\u679c\u4f20\u5165\u7684\u662f\u53f3\u6307\uff0c\u90a3\u4e48 emplace_back \u4f1a\u76f4\u63a5\u5728 vector \u7684\u6307\u5b9a\u4f4d\u7f6e\u7684\u5185\u5b58\u521b\u5efa\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u5c11\u4e86\u4e00\u6b21 move\u3002\u5176\u4ed6\u60c5\u51b5\u4e0e push_back \u76f8\u540c\u3002</li> </ul>"},{"location":"interview/cheating_sheet/#move","title":"move \u5e95\u5c42\u662f\u600e\u4e48\u5b9e\u73b0\u7684","text":"<p>\u5047\u8bbe\u8981\u5c06 A \u4e2d\u7684\u6570\u636e\u79fb\u52a8\u5230 B \u4e2d\uff0cmove \u5e95\u5c42\u4f1a\u5c06 B \u6307\u5411 A \u7684\u6570\u636e\u5730\u5740\uff0c\u7136\u540e\u5c06 A \u7684\u6570\u636e\u5730\u5740\u7f6e\u4e3a nullptr\u3002\u4e5f\u5c31\u662f\u8bf4\u5c06\u6570\u636e\u7684\u6240\u6709\u6743\u8f6c\u79fb\u5230\u4e86 B \u4e2d\u3002</p> <p>std::move \u7684\u4f5c\u7528\u662f\u5c06\u5de6\u503c\u5f15\u7528\u8f6c\u6362\u4e3a\u53f3\u503c\u5f15\u7528\uff0c\u8fd9\u6837\u4f7f\u7528 <code>a = std::move(b)</code> \u65f6\u5c31\u53ef\u4ee5\u81ea\u52a8\u8c03\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\u6765\u8fdb\u884c\u79fb\u52a8\u3002</p>"},{"location":"interview/cheating_sheet/#_2","title":"\u5b8c\u7f8e\u8f6c\u53d1\u7684\u539f\u7406","text":"<p>\u5728 C++17 \u4e2d\uff0c\u5b8c\u7f8e\u8f6c\u53d1\u7684\u5b9e\u73b0\u539f\u7406\u662f\uff1a</p> <ol> <li>\u5982\u679c\u53c2\u6570\u662f\u5de6\u503c\u5f15\u7528\uff0c\u90a3\u4e48\u8f6c\u53d1\u65f6\u4e5f\u4f7f\u7528\u5de6\u503c\u5f15\u7528\uff0c\u5373std::forward(t)\u8fd4\u56de\u7684\u662f\u5de6\u503c\u5f15\u7528\uff1b</li> <li>\u5982\u679c\u53c2\u6570\u662f\u53f3\u503c\u5f15\u7528\u6216\u8005\u6298\u53e0\u8868\u8fbe\u5f0f\u53f3\u503c\u5f15\u7528\uff0c\u90a3\u4e48\u8f6c\u53d1\u65f6\u4e5f\u4f7f\u7528\u53f3\u503c\u5f15\u7528\uff0c\u5373std::forward(t)\u8fd4\u56de\u7684\u662f\u53f3\u503c\u5f15\u7528\u3002</li> </ol> <p>\u5173\u952e\u51fd\u6570 <code>std::forward</code>\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f\u5de6\u503c\u5f15\u7528\u5c31\u4f1a\u8fd4\u56de\u5de6\u503c\u5f15\u7528\uff0c\u4f20\u5165\u7684\u662f\u53f3\u503c\u5f15\u7528\u7684\u8bdd\u5c31\u4f1a\u8fd4\u56de\u53f3\u503c\u5f15\u7528\u3002\u4f8b\u5982</p> <pre><code>template &lt;typename T&gt;\nvoid foo(T&amp;&amp; arg) {\n    // \u4f7f\u7528 std::forward \u5b8c\u7f8e\u8f6c\u53d1 arg \u53c2\u6570\u7ed9 bar \u51fd\u6570\n    bar(std::forward&lt;T&gt;(arg));\n}\n</code></pre>"},{"location":"interview/cheating_sheet/#python","title":"Python \u76f8\u5173","text":""},{"location":"interview/cheating_sheet/#python_1","title":"Python \u53ef\u53d8\u5bf9\u8c61\u4e0e\u4e0d\u53ef\u53d8\u5bf9\u8c61","text":"<p>\u4e0d\u53ef\u53d8\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5f53\u4fee\u6539\u8fd9\u7c7b\u5bf9\u8c61\u65f6\u5b9e\u9645\u4e0a\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u5e76\u4fee\u6539\u5f15\u7528\uff0c\u5e76\u4e14\u5bf9\u539f\u6765\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61\u8fdb\u884c\u56de\u6536\u3002\u53ef\u53d8\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\uff0c\u4fee\u6539\u7684\u8bdd\u5c31\u662f\u76f4\u63a5\u4fee\u6539\u8fd9\u4e2a\u5bf9\u8c61\u3002</p> <ul> <li>\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff1aint, float, str, tuple</li> <li>\u53ef\u53d8\u5bf9\u8c61\uff1alist, dict, set</li> </ul>"},{"location":"interview/cheating_sheet/#_3","title":"\u667a\u529b/\u7b97\u6cd5\u9898","text":""},{"location":"interview/cheating_sheet/#1t","title":"\u5982\u4f55\u5728 1T \u7684\u6570\u636e\u4e2d\u5bfb\u627e\u4e2d\u4f4d\u6570","text":"<p>\u5feb\u901f\u9009\u62e9\uff1a\u6bcf\u6b21\u627e\u4e2d\u95f4\u70b9\uff0c\u7136\u540e\u904d\u5386\u4e00\u904d\uff0c\u5c06\u5c0f\u4e8e\u4e2d\u95f4\u70b9\u7684\u653e\u5de6\u8fb9\uff0c\u5927\u4e8e\u4e2d\u95f4\u70b9\u7684\u653e\u53f3\u8fb9\uff0c\u7136\u540e\u9012\u5f52\u3002</p>"},{"location":"interview/cheating_sheet/#_4","title":"\u5982\u4f55\u5728\u5927\u6279\u91cf\u6570\u636e\u4e2d\u5bfb\u627e\u91cd\u590d\u6570\u636e","text":"<p>\u7ed9\u5b9a <code>a,b</code> \u4e24\u4e2a\u6587\u4ef6\uff0c\u5404\u5b58\u653e \\(50\\) \u4ebf\u7684\u6570\u636e\uff0c\u6bcf\u4e2a\u6570\u636e\u5927\u5c0f <code>64B</code>, \u5185\u5b58\u9650\u5236 <code>4GB</code>\uff0c\u5982\u4f55\u627e\u51fa <code>a,b</code> \u4e24\u4e2a\u6587\u4ef6\u7684\u91cd\u590d\u6570\u636e\uff1f</p> <p>\u5206\u6cbb + \u54c8\u5e0c\u6765\u505a\u3002\u9996\u5148\u901a\u8fc7\u8ba1\u7b97\u7b97\u51fa\u6570\u636e\u7684\u5927\u81f4\u5927\u5c0f \\(50 \\times 10^8 \\times 64\\text{B} \\approx 320\\text{GB}\\)\u3002\u8003\u8651\u5c06\u4e24\u4e2a\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u5404\u5212\u5206\u4e3a \\(1000\\) \u4efd\uff0c\u8fd9\u6837\u6bcf\u4e00\u4efd\u6587\u4ef6\u5927\u5c0f\u5927\u6982\u662f \\(320\\text{MB}\\)\uff0c\u5185\u5b58\u53ef\u4ee5\u5b8c\u6574\u88c5\u8f7d\u6bcf\u4e00\u4efd\u6587\u4ef6\u3002\u5bf9\u6bcf\u4e00\u4e2a\u6570\u636e\u8fdb\u884c Hash\uff0c\u5c06 <code>hashValue % 1000</code> \u7684\u7ed3\u679c\u4f5c\u4e3a\u6807\u53f7\uff0c\u5c06\u6570\u636e\u5206\u522b\u5b58\u50a8\u5230 \\(1000\\) \u4e2a\u6587\u4ef6\u4e2d\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u6587\u4ef6\u4e00\u5bf9\u5e94\u7684 \\(1000\\) \u4efd\u6587\u4ef6\u548c\u6587\u4ef6\u4e8c\u5bf9\u5e94\u7684 \\(1000\\) \u4efd\u6587\u4ef6\u3002\u6211\u4eec\u5c06\u8fd9 \\(2000\\) \u4efd\u6587\u4ef6\u5206\u4e3a\u6807\u53f7\u76f8\u540c\u7684 \\(1000\\) \u5bf9\u6587\u4ef6\uff0c\u6240\u6709\u53ef\u80fd\u7684\u91cd\u590d\u6570\u636e\u53ea\u53ef\u80fd\u51fa\u73b0\u5728\u540c\u4e00\u5bf9\u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u95ee\u9898\u89c4\u6a21\u7f29\u5c0f\u5230\u4e86 \\(320\\text{MB}\\)\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6bcf\u4e00\u5bf9\u6587\u4ef6\u7684\u7b2c\u4e00\u4efd\u5168\u90e8\u52a0\u5165\u5230 <code>HashSet</code> \u4e2d\uff0c\u7136\u540e\u679a\u4e3e\u7b2c\u4e8c\u4efd\u6587\u4ef6\u7684\u6570\u636e\uff0c\u5982\u679c\u5728 <code>HashSet</code> \u4e2d\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u5c31\u662f\u91cd\u590d\u6570\u636e\u3002</p>"},{"location":"interview/cheating_sheet/#k","title":"\u5982\u4f55\u5728\u5927\u6279\u91cf\u6570\u636e\u4e2d\u5bfb\u627e\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 K \u4e2a\u6570\u636e","text":"<p>\u6709\u4e00\u4e2a \\(1\\text{GB}\\) \u5927\u5c0f\u7684\u6587\u4ef6\uff0c\u6587\u4ef6\u91cc\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u8bcd\uff0c\u6bcf\u4e2a\u8bcd\u7684\u5927\u5c0f\u4e0d\u8d85\u8fc7 \\(16\\text{B}\\)\uff0c\u5185\u5b58\u5927\u5c0f\u9650\u5236\u662f \\(1\\text{1MB}\\)\uff0c\u8981\u6c42\u8303\u56f4\u9891\u6570\u6700\u9ad8\u7684 \\(100\\) \u4e2a\u8bcd\u3002</p> <p>\u4e3a\u4e86\u6ee1\u8db3\u5185\u5b58\u9650\u5236\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5148\u91c7\u53d6\u5212\u5206\u7684\u65b9\u5f0f\u6765\u5c06\u5927\u6587\u4ef6\u5206\u5272\u6210\u5c0f\u6587\u4ef6\u3002\u53ef\u4ee5\u6309\u7167 <code>hash(x) % 5000</code> \u6765\u8fdb\u884c\u5212\u5206\uff0c\u5982\u679c\u5212\u5206\u540e\u4ecd\u4e0d\u6ee1\u8db3\u5c31\u7ee7\u7eed\u5212\u5206\u3002\u5212\u5206\u4e4b\u540e\u7528 <code>Hashmap</code> \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\u5373\u53ef\uff0c\u7edf\u8ba1\u5b8c\u6240\u6709\u6587\u4ef6\u7684\u6240\u6709\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u4e4b\u540e\u518d\u5f00\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u5806\u9876\u5143\u7d20\u5c31\u5c06\u5176\u52a0\u5165\u5230\u5806\u4e2d\u3002\u7ef4\u62a4\u5806\u7684\u5927\u5c0f\u4e0d\u8d85\u8fc7 K \u5373\u53ef\u3002</p>"},{"location":"interview/cheating_sheet/#_5","title":"\u5982\u4f55\u5728\u4e00\u4e2a\u8d85\u5927\u6587\u4ef6\u4e2d\u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u636e","text":"<p>\u4e0e\u4e0a\u4e00\u9898\u540c\u7406\uff0c\u8d85\u5927\u6587\u4ef6\u65e0\u6cd5\u76f4\u63a5\u8bfb\u5165\u5185\u5b58\uff0c\u90a3\u5c31\u9700\u8981\u4e00\u8fb9\u8bfb\u5165\u4e00\u8fb9\u5c06\u4fe1\u606f\u5199\u51fa\u5230\u6587\u4ef6\u4e2d\uff0c\u5148\u5212\u5206\uff0c\u518d\u7edf\u8ba1\u6bcf\u4e2a\u6587\u4ef6\u5185\u6570\u636e\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6700\u540e\u6c42 <code>max</code>\u3002</p>"},{"location":"interview/cheating_sheet/#25","title":"\u5982\u4f55\u5728 2.5 \u4ebf\u4e2a\u6574\u6570\u4e2d\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6574\u6570\uff08\u5185\u5b58\u65e0\u6cd5\u5bb9\u7eb3\u5b8c\u6574\u7684\u8fd9\u4e9b\u6570\u5b57\uff09","text":"<p>\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a</p> <ol> <li>\u6309\u7167\u8ddf\u4e4b\u524d\u4e00\u6837\u7684\u65b9\u6cd5\uff0c\u6309\u7167\u54c8\u5e0c\u4f59\u6570\u8fdb\u884c\u5212\u5206\uff0c\u7136\u540e\u5206\u522b\u7edf\u8ba1\u518d\u6574\u5408\u3002</li> <li>\u4f4d\u56fe\u6cd5\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u64cd\u4f5c\u4e8c\u8fdb\u5236\u4f4d\u6765\u8fdb\u884c\u5224\u65ad\u3002\u7a7a\u95f4\u5360\u7528\u4e0e\u6574\u6570\u7684\u5927\u5c0f\u6709\u5173\uff0c\u5982\u679c\u6570\u5b57\u8fc7\u4e8e\u7a00\u758f\u53ef\u80fd\u53cd\u800c\u4f1a\u5bfc\u81f4\u66f4\u5927\u7684\u5360\u7528\u3002\u4e5f\u6709\u4e00\u79cd\u4f4d\u56fe\u7d22\u5f15\u7684\u65b9\u6cd5\u4f8b\u5982 <code>RoaringBitmap</code> \u53ef\u4ee5\u8fdb\u884c\u538b\u7f29\u3002\u4ece\u6700\u6734\u7d20\u7684\u4f4d\u56fe\u6765\u8bf4\uff0c\u53ef\u4ee5\u5c06\u5927\u5c0f\u4e3a \\(x\\) \u7684\u6570\u5b57\u6620\u5c04\u5230\u7b2c \\(2x\\) \u548c\u7b2c \\(2x+1\\) \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e2d\uff0c\u5229\u7528\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\u72b6\u6001\uff1a<code>00</code> \u8868\u793a\u672a\u51fa\u73b0\u8fc7, <code>01</code> \u8868\u793a\u51fa\u73b0\u8fc7\u4e00\u6b21, <code>10</code> \u8868\u793a\u51fa\u73b0\u8fc7\u591a\u6b21\u3002\u8fd9\u6837\u7684\u8bdd\u5047\u8bbe\u6240\u6709\u6574\u6570\u90fd\u5728 <code>int</code> \u8303\u56f4\u5185\uff0c\u90a3\u4e48\u53ea\u9700\u8981 \\(2*2^{32}\\) \u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u4e5f\u5c31\u662f \\(1\\text{GB}\\) \u7684\u7a7a\u95f4\u3002</li> </ol>"},{"location":"interview/cheating_sheet/#40","title":"\u5982\u4f55\u5728 40 \u4ebf\u4e2a\u6574\u6570\u4e2d\u5224\u65ad\u67d0\u4e2a\u6570\u5b57\u662f\u5426\u51fa\u73b0\u8fc7","text":"<ol> <li>\u53ef\u4ee5\u6309\u7167\u54c8\u5e0c\u4f59\u6570\u8fdb\u884c\u5212\u5206\uff0c\u7136\u540e\u518d\u5206\u522b\u5224\u65ad\u3002</li> <li>\u901a\u8fc7\u4f4d\u56fe\u6cd5\uff0c\u5c06\u6570\u5b57\u6620\u5c04\u5230\u4f4d\u56fe\u4e2d\uff0c\u7136\u540e\u5224\u65ad\u3002</li> </ol>"},{"location":"interview/cheating_sheet/#1000","title":"\u5982\u4f55\u5728 1000 \u4e07\u4e2a\u8bb0\u5f55\u4e2d\u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u8bb0\u5f55","text":"<p>\u641c\u7d22\u5f15\u64ce\u4f1a\u901a\u8fc7\u65e5\u5fd7\u6587\u4ef6\u628a\u7528\u6237\u6bcf\u6b21\u68c0\u7d22\u4f7f\u7528\u7684\u6240\u6709\u67e5\u8be2\u4e32\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u6bcf\u4e2a\u67e5\u8be2\u5e8a\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 255 \u5b57\u8282\u3002 \u5047\u8bbe\u76ee\u524d\u6709 1000w \u4e2a\u8bb0\u5f55\uff08\u8fd9\u4e9b\u67e5\u8be2\u4e32\u7684\u91cd\u590d\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u867d\u7136\u603b\u6570\u662f 1000w\uff0c\u4f46\u5982\u679c\u9664\u53bb\u91cd\u590d\u540e\uff0c\u5219\u4e0d\u8d85\u8fc7 300w \u4e2a\uff09\u3002\u8bf7\u7edf\u8ba1\u6700\u70ed\u95e8\u7684 10 \u4e2a\u67e5\u8be2\u4e32\uff0c\u8981\u6c42\u4f7f\u7528\u7684\u5185\u5b58\u4e0d\u80fd\u8d85\u8fc7 1G\u3002\uff08\u4e00\u4e2a\u67e5\u8be2\u4e32\u7684\u91cd\u590d\u5ea6\u8d8a\u9ad8\uff0c\u8bf4\u660e\u67e5\u8be2\u5b83\u7684\u7528\u6237\u8d8a\u591a\uff0c\u4e5f\u5c31\u8d8a\u70ed\u95e8\u3002\uff09</p> <p>\u9996\u5148\u8ba1\u7b97\u5185\u5b58\uff0c\u6bcf\u4e2a\u4e32 \\(255\\text{B}\\)\uff0c\u90a3\u4e48 \\(10 \\times 10^7\\) \u5927\u6982\u5c31\u662f \\(2.55\\text{GB}\\) \u7684\u7a7a\u95f4\u5360\u7528\u3002\u80af\u5b9a\u662f\u65e0\u6cd5\u76f4\u63a5\u8bfb\u5165\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\uff1a</p> <ol> <li>\u6309\u7167 Hash \u7ed3\u679c\u5212\u5206\u4e3a\u5b50\u95ee\u9898\uff0c\u7136\u540e\u518d\u7edf\u8ba1</li> <li>\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u5230\u4e86\u91cd\u590d\u7684\u4e32\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u901a\u8fc7 HashMap \u50a8\u5b58\uff0c\u5360\u7528\u7a7a\u95f4 \\(300w*(255+4)\\approx 777\\text{MB}\\)</li> <li>Trie \u6811\u3002</li> </ol>"},{"location":"interview/cheating_sheet/#8","title":"\u5982\u4f55\u5728\u5927\u91cf\u7535\u8bdd\u53f7\u7801\u4e2d\u7edf\u8ba1\u4e0d\u540c\u53f7\u7801\u7684\u4e2a\u6570\uff0c\u6bcf\u4e2a\u53f7\u7801\u4e3a 8 \u4f4d\u6570\u5b57","text":"<p>\u4f4d\u56fe\u6cd5 \\(10^9 / 8 / 1024 / 1024 \\approx 100\\text{MB}\\)</p>"},{"location":"interview/cheating_sheet/#5","title":"\u5982\u4f55\u4ece\u5927\u91cf\u6570\u5b57\u4e2d\u627e\u5230\u4e2d\u4f4d\u6570\uff085\u4ebf\u4e2a\u6570\uff09","text":"<ol> <li>\u53cc\u5806\u6cd5</li> <li>\u4e8c\u5206\u4e2d\u4f4d\u6570\u7684\u503c\uff0c\u4e8c\u5206\u4e4b\u540e\u5c06\u6570\u636e\u5206\u4e3a\u5927\u4e8e mid \u548c\u5c0f\u4e8e mid \u7684\u4e24\u4e2a\u90e8\u5206\uff0c\u7136\u540e\u9012\u5f52\u64cd\u4f5c\u3002</li> </ol>"},{"location":"interview/cheating_sheet/#_6","title":"\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>10 \u9053 BAT \u5927\u5382\u6d77\u91cf\u6570\u636e\u9762\u8bd5\u9898</li> <li>C++ \u5b8c\u7f8e\u8f6c\u53d1\u6df1\u5ea6\u89e3\u6790:\u4ece\u5165\u95e8\u5230\u7cbe\u901a</li> </ul>"},{"location":"interview/interview_2024/","title":"2024 \u5e74\u79cb\u62db\u7ecf\u5386\u56de\u5fc6 \u9762\u7ecf","text":"\u516c\u53f8 \u72b6\u6001 \u534e\u4e3a\u89c6\u89c9\u7b97\u6cd5 \u901a\u8fc7 \u7c73\u54c8\u6e38\u5f00\u53d1 \u901a\u8fc7 \u5b57\u8282\u63a8\u8350\u7b97\u6cd5 \u901a\u8fc7 \u817e\u8baf\u5f3a\u5316\u5b66\u4e60 \u901a\u8fc7 B\u7ad9\u5927\u6a21\u578b \u901a\u8fc7\uff0c\u7406\u8bba\u4e0a\u901a\u8fc7\u4e86\uff0c\u4f46\u662f HR \u6253\u7535\u8bdd\u95ee\u5b8c\u9884\u671f\u85aa\u8d44\u540e\u5c31\u518d\u4e5f\u6ca1\u8054\u7cfb\u8fc7 \u7f51\u6613\u96f7\u706b \u4e8c\u9762\u4e2d\u6b62 \u5c0f\u7ea2\u4e66\u5927\u6a21\u578b \u7b14\u8bd5\u540e\u65e0\u9762\u8bd5 \u963f\u91cc\u6dd8\u5929 \u4e2d\u6b62"},{"location":"interview/interview_2024/#_1","title":"\u7c73\u54c8\u6e38\u5f00\u53d1","text":""},{"location":"interview/interview_2024/#_2","title":"\u4e00\u9762\uff1a","text":"<ul> <li>\u4e3b\u8981\u8003\u5bdf\u4e86\u5f88\u591a C++ \u516b\u80a1\uff0c\u5305\u62ec\u865a\u51fd\u6570\uff0cSTL\uff0c\u667a\u80fd\u6307\u9488\uff0c\u9501\u673a\u5236\uff0c\u7c7b\u76f8\u5173\u5185\u5bb9\uff0c\u8003\u4e86\u4e00\u4e2a\u7b80\u5355\u7b97\u6cd5\uff08\u627e\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\u6700\u5c0f\u7684\u56db\u4e2a\u5143\u7d20\uff09</li> <li>\u9762\u8bd5\u5b98\u95ee\u662f\u5426\u4e86\u89e3 Unity \u6e32\u67d3\u5c42\u9762\u7684\u5185\u5bb9\uff0c\u6211\u8bf4\u6ca1\u63a5\u89e6\u8fc7</li> <li>\u95ee\u6211\u662f\u5426\u4e86\u89e3 Python\uff0c\u8bf4\u7b80\u5355\u4f1a\u4e00\u4e9b\uff0c\u95ee\u4e86\u4e00\u4e2a\u5173\u4e8e\u5355\u4f8b\u7684\u95ee\u9898\uff0c\u5305\u62ec\u61d2\u6c49\u52a0\u8f7d\u548c\u997f\u6c49\u52a0\u8f7d\u7684\u533a\u522b\uff0c\u5f53\u65f6\u4e0d\u77e5\u9053\u3002</li> </ul>"},{"location":"interview/interview_2024/#_3","title":"\u4e8c\u9762\uff1a","text":"<p>\u9762\u8bd5\u4e00\u5f00\u59cb\uff0c\u9762\u8bd5\u5b98\u8bf4\u8fd9\u6b21\u9762\u8bd5\u8003\u5bdf\u4ee3\u7801\u80fd\u529b\u3002\u4e24\u9053\u9898\uff0c\u6bcf\u9053\u9898 \\(30\\) \u5206\u949f\u3002</p> <ul> <li>\u7b2c\u4e00\u9053\u9898\u662f\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\u4e00\u4e2a\u5e26\u6269\u5bb9\u673a\u5236\u7684\u961f\u5217\u3002\uff08\u5199\u4e86\u4e00\u4e2a\u5faa\u73af\u6570\u7ec4+\u6269\u5bb9\uff09\u3002\u5fd8\u8bb0\u5728\u6790\u6784\u51fd\u6570\u91cc\u9762\u5199\u5783\u573e\u56de\u6536\u4e86\uff0c\u88ab\u63d0\u9192\u624d\u6539\u6b63\u3002\u5e94\u8be5\u662f\u5206\u6570--</li> <li>\u7b2c\u4e8c\u9053\u9898\u662f\u5199\u4e00\u4e2a\u5bf9\u8c61\u6c60\uff08\u5185\u5b58\u6c60\uff09\uff0c\u8981\u6c42\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\uff08\u5f53\u573a\u8ddf\u9762\u8bd5\u5b98\u8bf4\u6ca1\u7528 C++ \u5199\u8fc7\u9501\uff0c\u7136\u540e\u628a\u8fd9\u4e00\u6761\u514d\u4e86\uff0c\u5e94\u8be5\u662f\u5206\u6570\u518d\u6b21--\uff09\u3002\u540e\u9762\u56e0\u4e3a reset \u51fd\u6570\u7684\u4f4d\u7f6e\u88ab\u62f7\u6253\u4e86\u4e00\u756a\u3002\u5e94\u8be5\u5728\u6bcf\u4e00\u4e2a\u5143\u7d20\u88ab\u52a0\u5165\u5230\u5bf9\u8c61\u6c60\u7684\u65f6\u5019\u5c31 reset\uff0c\u56e0\u4e3a\u9700\u8981\u91ca\u653e\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u3002</li> </ul> <p>\u540e\u9762\u95ee\u6211\u5bf9\u8fd9\u4e2a\u5c97\u4f4d\u7684\u4e86\u89e3\uff0c\u7ed9\u6211\u4ecb\u7ecd\u4e86\u4e00\u4e0b\u5c97\u4f4d\u7684\u804c\u8d23\u548c\u91cd\u8981\u5730\u4f4d\u3002</p>"},{"location":"interview/interview_2024/#_4","title":"\u4e09\u9762\uff1a","text":"<p>\u81ea\u6211\u4ecb\u7ecd</p> <ul> <li>\u505a\u9898\uff1a\u7ef4\u62a4\u52a8\u6001\u533a\u95f4\uff0c\u53ef\u4ee5\u52a8\u6001\u5730\u63d2\u5165\u533a\u95f4\u548c\u5220\u9664\u533a\u95f4\u3002\u533a\u95f4\u4e4b\u95f4\u4e92\u4e0d\u76f8\u4ea4\u3002</li> <li>\u5982\u679c\u533a\u95f4\u6570\u91cf\u975e\u5e38\u5927\uff0c\u53ef\u80fd\u4e0a\u4ebf\u7ea7\u522b\u7684\uff0c\u4f60\u6253\u7b97\u5982\u4f55\u5904\u7406\uff1f\uff08\u5206\u5757\uff0c\u5206\u6587\u4ef6\uff09</li> <li>\u662f\u5426\u53ef\u4ee5\u8003\u8651\u533a\u95f4\u7684\u5408\u5e76\uff1f\uff08\u53ef\u4ee5\u8003\u8651\u5c06\u4e00\u4e9b\u8fde\u7eed\u7684\u533a\u95f4\u5408\u5e76\u4e3a\u4e00\u4e2a\u533a\u95f4\uff0c\u5efa\u7acb\u5206\u5c42\u7684\u6811\u7ed3\u6784\uff09</li> <li>\u521a\u624d\u4f60\u63d0\u5230\u4e86\u901a\u8fc7\u5206\u5757\u7684\u65b9\u5f0f\u6765\u505a\uff0c\u4f60\u89c9\u7684\u5757\u5927\u5c0f\u548c\u4e2a\u6570\u7684\u786e\u5b9a\u65f6\u8981\u53c2\u8003\u4ec0\u4e48\u3002\uff08\u5c3d\u91cf\u8ba9\u7d22\u5f15\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5757\u5185\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4fdd\u6301\u4e00\u81f4\uff09</li> <li>\u4f60\u5bf9\u81ea\u5df1\u7684\u804c\u4e1a\u6709\u4ec0\u4e48\u89c4\u5212\uff1f\uff08\u5bf9\u5de5\u4f5c\u7a33\u5b9a\u6027\u6709\u8981\u6c42\uff0c\u5e0c\u671b\u5728\u4e00\u4e2a\u9886\u57df\u4e0d\u65ad\u63d0\u5347\u81ea\u5df1\u7684\u6280\u672f\uff0c\u8d70\u6280\u672f\u4e13\u5bb6\u7684\u8def\u7ebf\uff09</li> </ul>"},{"location":"interview/interview_2024/#hr","title":"HR \u9762\uff1a","text":"<ul> <li>\u4e3a\u4ec0\u4e48\u6295\u4e86\u6e38\u620f\u884c\u4e1a\uff0c\u6211\u770b\u4f60\u7b80\u5386\u662f\u4e92\u8054\u7f51\u76f8\u5173\u7684\u5f88\u591a\uff1f\uff08\u559c\u6b22\u73a9\u6e38\u620f\uff0c\u60f3\u8981\u53c2\u4e0e\u5230\u6e38\u620f\u7684\u5236\u4f5c\u4e2d\uff09</li> <li>\u770b\u4f60\u4e4b\u524d\u6709\u5b9e\u4e60\uff0c\u4f60\u4e3a\u4ec0\u4e48\u8981\u53c2\u52a0\u8fd9\u4efd\u5b9e\u4e60\uff1f\uff08\u65f6\u95f4\u521a\u597d\u7a7a\u95f2\uff0c\u53c2\u52a0\u5b9e\u4e60\u63d0\u5347\u4ee3\u7801\u7684\u5de5\u7a0b\u6027\uff09</li> <li>\u6784\u5efa\u5f00\u53d1\u548c\u6e38\u620f\u5236\u4f5c\u5e76\u4e0d\u4e00\u6837\uff0c\u4f60\u80fd\u63a5\u53d7\u5417\uff1f\uff08\u53ea\u8981\u662f\u5728\u6e38\u620f\u4e2d\u505a\u51fa\u8d21\u732e\u5176\u5b9e\u6211\u90fd\u53ef\u4ee5\u63a5\u53d7\uff09</li> <li>\u4e3a\u4ec0\u4e48\u6295\u4e86\u8fd9\u4e2a\u5c97\u4f4d\uff1f\uff08\u88ab\u8c03\u5242\uff09</li> <li>\u539f\u6765\u6295\u7684\u662f\u4ec0\u4e48\uff1f</li> <li>\u4f60\u5bf9\u8fd9\u4e2a\u5c97\u4f4d\u6709\u4ec0\u4e48\u4e86\u89e3\uff1f</li> <li>\u8fd8\u6295\u4e86\u54ea\u4e9b\uff1f</li> <li>\u5b9e\u4e60\u7684\u8fc7\u7a0b\u4e2d\u6709\u6ca1\u6709\u9047\u5230\u8bf4\u4e0d\u597d\u7684\u70b9\uff0c\u4e0d\u592a\u60f3\u8981\u63a5\u53d7\u7684\u70b9\uff1f\uff08\u4e0d\u63a5\u53d7\u5468\u672b\u52a0\u73ed\uff09</li> <li>\u4f60\u5728\u9009\u62e9 offer \u7684\u65f6\u5019\u770b\u91cd\u4ec0\u4e48\u70b9\uff1f\uff08\u94b1\u591a\u4e8b\u5c11\u79bb\u5bb6\u8fd1 \u524d\u4e24\u8005\u6ee1\u8db3\u5176\u4e00\uff09</li> </ul>"},{"location":"interview/interview_2024/#_5","title":"\u610f\u5411\u4e66","text":"<p>\u610f\u5411\u4e66\u6ca1\u6709\u85aa\u8d44\uff0c\u5728\u5341\u6708\u3001\u5341\u4e00\u6708\u4efd\u51fa\u85aa\u8d44\uff0c\u518d\u6c9f\u901a\u85aa\u8d44\u3002\u5728\u6b64\u4e4b\u524d\u90fd\u662f\u610f\u5411\u4e66\u3002</p>"},{"location":"interview/interview_2024/#_6","title":"\u817e\u8baf\u5f3a\u5316\u5b66\u4e60","text":""},{"location":"interview/interview_2024/#_7","title":"\u4e00\u9762\uff1a","text":"<ul> <li>\u81ea\u6211\u4ecb\u7ecd</li> <li>\u4e3e\u4e00\u4e2a\u9879\u76ee\u7684\u4f8b\u5b50\u5e76\u8bf4\u660e\u8d21\u732e\uff08\u8bf4\u4e86 ViT \u7684\u4e09\u4e2a\u65b9\u5411\uff1a\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u3001\u81ea\u9002\u5e94\u84b8\u998f\u8fd8\u6709\u7279\u5f81\u84b8\u998f\u65b9\u6cd5\uff09\u3002</li> <li>\u95ee\u4e86\u963f\u91cc\u5b9e\u4e60\u7684\u9879\u76ee\uff0c\u662f\u5426\u4e86\u89e3 tensorflow\uff08\u8bf4\u4e0d\u4e86\u89e3\u6ca1\u7528\u8fc7\uff0c\u5f00\u53d1\u7684 TF \u7b97\u5b50\u4e3b\u8981\u662f\u8fdb\u884c\u4e00\u4e9b\u6570\u636e\u8f6c\u6362\u4e4b\u7c7b\u7684\uff0c\u6bd4\u8f83\u642c\u7816\uff09</li> <li>\u624b\u6495 LRU</li> <li>unordered_map \u548c map \u7684\u533a\u522b\uff08hash\u8868\u548c\u7ea2\u9ed1\u6811\uff09</li> </ul>"},{"location":"interview/interview_2024/#_8","title":"\u4e8c\u9762\uff1a","text":"<ul> <li>\u81ea\u6211\u4ecb\u7ecd</li> <li>\u62f7\u6253\u4e86\u4e00\u4e0b\u6c42\u804c\u610f\u5411\u3001\u4e3a\u4ec0\u4e48\u9009\u62e9\u8fd9\u4e2a\u5730\u70b9\u3001\u4e3a\u4ec0\u4e48\u9009\u62e9\u8fd9\u4e2a\u5c97\u4f4d\uff0c\u5de5\u4f5c\u65f6\u770b\u4e2d\u7684\u662f\u4ec0\u4e48\uff0c\u5bf9\u5c97\u4f4d\u7684\u9884\u671f\u662f\u4ec0\u4e48\u3002</li> <li>\u4e3a\u4ec0\u4e48\u8981\u6295\u9752\u4e91\u8ba1\u5212\uff0c\u9752\u4e91\u8ba1\u5212\u9762\u5411\u535a\u58eb\u751f\uff0c\u5927\u6982\u7387\u4e0d\u8fc7\u3002\u540e\u9762\u8bf4\u7855\u58eb\u7684\u6295\u9012\u8fd8\u662f\u5f53\u4f5c\u6b63\u5f0f\u7684\u4e00\u6279\u6295\u9012\u6765\u770b\u5f85\u3002</li> <li>\u95ee\u4e86\u4e00\u4e0b\u9879\u76ee\uff0c\u8bf4\u4e86\u4e00\u4e0b ViT \u7684\u4e09\u4e2a\u65b9\u5411\u3002</li> <li>ViT \u7684\u7ed3\u6784\u662f\u4ec0\u4e48\uff08\u53ea\u80fd\u7b80\u5355\u753b\u4e86\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5fd8\u8bb0\u4e86\uff0c\u590d\u76d8\u6765\u770b\u5176\u5b9e\u753b\u7684\u5dee\u4e0d\u591a\uff09</li> <li>\u4f60\u7684\u65b9\u6cd5\u6709\u4ec0\u4e48\u4f18\u52bf\uff0c\u662f\u5728\u540c\u7b49\u6761\u4ef6\u4e0b\u5b9e\u9a8c\u7684\u5417\uff1f\uff08\u540c\u7b49\u6761\u4ef6\uff0c\u662f\u4e00\u4e2a\u8bad\u7ec3\u65f6\u95f4\u548c\u51c6\u786e\u7387\u7684 trade-off\uff09</li> <li>Batchnorm \u6709\u4e86\u89e3\u8fc7\u5417</li> <li>Softmax \u548c Batchnorm \u9009\u4e00\u4e2a\u5199\u51fa\u8ba1\u7b97\u516c\u5f0f\uff08\u9009\u4e86 Softmax\uff09\uff0c\u7528\u4ee3\u7801\u5b9e\u73b0\u4e00\u4e0b\u3002\uff08\u7528C++\u5199\u4e86\u4e00\u4e2a\uff09</li> <li>\u5982\u4f55\u89e3\u51b3 Softmax \u4e2d\u6700\u5927\u6570\u5b57\u8fc7\u5927\u5bfc\u81f4\u6570\u503c\u4e0d\u7a33\u5b9a\u7684\u95ee\u9898\uff08\u5c06\u6240\u6709\u7684\u6570\u5b57\u51cf\u53bb\u6700\u5927\u503c\uff0c\u7ed3\u679c\u4e0d\u4f1a\u6539\u53d8\uff09</li> <li>\u7b97\u6cd5\u9898\uff0c\u627e\u51fa 100w \u4e2a\u6570\u5b57\u4e2d\u51fa\u73b0\u9891\u6b21\u6700\u591a\u7684 K \u4e2a\u6570\u5b57\uff0c\u8981\u6c42\u590d\u6742\u5ea6\u5e73\u5747 \\(O(n)\\)\u3002\uff08unordered_map + \u5feb\u901f\u9009\u62e9\u524d \\(k\\) \u5927\uff09</li> </ul>"},{"location":"interview/interview_2024/#_9","title":"\u4e09\u9762\uff1a","text":"<ul> <li>\u5168\u7a0b\u4ecb\u7ecd\u7b80\u5386</li> </ul>"},{"location":"interview/interview_2024/#hr_1","title":"HR \u9762\uff1a","text":"<ul> <li>\u4ecb\u7ecd\u4e00\u4e0b\u81ea\u5df1</li> <li>\u5bf9\u8fd9\u4e2a\u5c97\u4f4d\u4e86\u4e86\u89e3\u662f\u4ec0\u4e48</li> <li>\u770b\u91cd\u5de5\u4f5c\u7684\u4ec0\u4e48\u65b9\u9762</li> </ul>"},{"location":"interview/interview_2024/#_10","title":"\u5b57\u8282\u63a8\u8350\u7b97\u6cd5","text":""},{"location":"interview/interview_2024/#_11","title":"\u4e00\u9762\uff1a","text":"<ul> <li>\u5148\u505a\u4e00\u4e2a\u9898\uff0c\u624b\u6495\u8868\u8fbe\u5f0f\u8ba1\u7b97</li> <li>ViT \u9879\u76ee\u91cc\uff0cCNN \u4e3b\u8981\u7528\u7684\u4ec0\u4e48\u6a21\u578b\uff0c\u4f60\u5bf9 SOTA \u6709\u4e86\u89e3\u5417</li> <li>ViT \u548c Transformer \u7684\u533a\u522b\uff08\u539f\u59cb\u6570\u636e\u4e0d\u540c\uff09</li> <li>\u4ecb\u7ecd\u4e00\u4e0b Transformer \u7684 encoder \u548c decoder \u76f8\u5173\u7684\u7ed3\u6784\u5417\uff08\u4e4b\u540e\u5f97\u590d\u4e60\u4e00\u4e0b\uff09</li> <li>Transformer \u7684\u4f4d\u7f6e\u4fe1\u606f\u662f\u76f8\u5bf9\u4fe1\u606f\u8fd8\u662f\u7edd\u5bf9\u4fe1\u606f\uff1f\u4e3a\u4ec0\u4e48\u53c8\u6709 sin \u53c8\u6709 cos\u3002\uff08\u6ca1\u7b54\u4e0a\u6765\uff09</li> <li>Batchnorm \u662f\u4ec0\u4e48\uff0c\u91cc\u9762\u662f\u600e\u4e48\u8fd0\u4f5c\u7684\uff1f\u53ef\u5b66\u4e60\u53c2\u6570\u5206\u522b\u662f\u4ec0\u4e48\uff1f\u6709\u4ec0\u4e48\u4f5c\u7528\uff1f\uff08\u4e00\u4e2a\u504f\u79fb\u91cf\u4e00\u4e2a scale\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u5e73\u79fb\uff0c\u9632\u6b62\u8d1f\u6570\u90e8\u5206\u88ab relu \u5220\u6389\uff0c\u9762\u8bd5\u5b98\u8bf4\u8fd9\u6837\u7406\u89e3\u4e5f\u53ef\u4ee5\uff09</li> <li>Batchnorm \u5728\u9884\u6d4b\u9636\u6bb5\u505a\u4ec0\u4e48\uff1f\u5f52\u4e00\u5316\u4f7f\u7528\u7684\u5747\u503c\u548c\u65b9\u5dee\u662f\u4ec0\u4e48\u6570\u636e\u7684\uff1f\u600e\u4e48\u8ba1\u7b97\u51fa\u6765\uff1f\uff08\u56de\u7b54\u8bad\u7ec3\u96c6\u5168\u96c6\uff0c\u8ba1\u7b97\u65b9\u5f0f\u662f\u79fb\u52a8\u5e73\u5747\uff09</li> <li>\u4e86\u89e3 Dropout \u5417\uff1f\u9884\u6d4b\u7684\u65f6\u5019 Dropout \u8d77\u4e0d\u8d77\u4f5c\u7528\uff1f\u8bad\u7ec3\u7684\u65f6\u5019\u5982\u679c\u6709 1/3 \u90fd drop \u6389\u4e86\uff0c\u90a3\u4e48\u6570\u5b57\u4e0d\u662f\u4f1a\u53d8\u5f97\u66f4\u5c0f\uff0c\u8fd9\u4e2a\u8981\u600e\u4e48\u89e3\u51b3\uff1f\uff08\u56de\u7b54\u662f\u52a0\u4e0a\u4e00\u4e2a\u6570\u5b57\uff0c\u9762\u8bd5\u5b98\u8bf4\u6b63\u786e\u505a\u6cd5\u662f\u4e58\u4e00\u4e2a scale\uff09</li> <li>\u62f7\u6253\u8bba\u6587\u539f\u7406.</li> <li>\uff08\u6211\u8bf4\u7b2c\u4e8c\u7bc7\u8bba\u6587\u8003\u8651\u5c06\u8fd9\u4e2a\u6a21\u5757\u642c\u5230\u63a8\u8350\u7cfb\u7edf\u4e2d\u65f6\uff09\u9762\u8bd5\u5b98\u8bf4\u6211\u7684\u7b2c\u4e8c\u7bc7\u5de5\u4f5c\u53ef\u80fd\u6709\u4e9b\u56f0\u96be\uff0c\u56e0\u4e3a\u63a8\u8350\u7cfb\u7edf\u9886\u57df\u7684 embedding \u539f\u7406\u53ef\u80fd\u4e0d\u4e00\u6837\u3002</li> <li>\u4f60\u600e\u4e48\u7406\u89e3\u63a8\u8350\u7cfb\u7edf\uff1f\u4f60\u6709\u63a5\u89e6\u8fc7\u5de5\u4e1a\u754c\u6b63\u5728\u8fd0\u8f6c\u7684\u63a8\u8350\u7cfb\u7edf\u5417\uff1f\uff08\u6ca1\u63a5\u89e6\u8fc7\uff0c\u4e4b\u540e\u5f97\u591a\u8865\u8865\u63a8\u8350\u7cfb\u7edf\u76f8\u5173\u8bba\u6587\uff09</li> <li>\u4e86\u89e3\u5927\u6570\u636e\u5417\uff1f\uff08\u4e0d\u4e86\u89e3\uff09</li> <li>\u4f60\u4e86\u89e3 Git \u5417\uff1fGit \u548c Github \u7684\u533a\u522b\u662f\u600e\u4e48\u7406\u89e3\u7684\uff1f</li> <li>\u600e\u4e48\u7406\u89e3 C++ \u7684\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001\uff1f</li> </ul>"},{"location":"interview/interview_2024/#_12","title":"\u4e8c\u9762\uff1a","text":"<ul> <li>\u4ecb\u7ecd\u8bba\u6587</li> <li>\u8bba\u6587\u62f7\u6253</li> <li>\u4f60\u77e5\u9053 AUC \u5417\uff08\u4e0d\u77e5\u9053\uff09</li> <li>\u6211\u770b\u4f60\u7684\u7b80\u5386\u91cc\u9762\u63d0\u5230\u4e86 GBDT\uff0c\u4f60\u80fd\u4ecb\u7ecd\u4e00\u4e0b GBDT \u5417\uff1fGBDT \u5982\u4f55\u5904\u7406\u5206\u7c7b\u95ee\u9898\uff08\u6ca1\u7b54\u4e0a\u6765\uff09</li> <li>\u5982\u679c\u5728 train \u4e00\u4e2a\u7f51\u7edc\u7684\u65f6\u5019\uff0closs \u4e0d\u4e0b\u964d\uff0c\u4f60\u4f1a\u6392\u67e5\u54ea\u91cc\u7684\u539f\u56e0\uff1f\uff08\u5b66\u4e60\u7387\u53ef\u80fd\u592a\u5927\u4e86\uff09</li> <li>\u4f60\u4e86\u89e3\u8fc7\u4ec0\u4e48\u63a8\u8350\u7cfb\u7edf\u7684\u7b97\u6cd5\u5417\uff1f\uff08\u6ca1\u4e86\u89e3\u8fc7\uff09</li> <li>\u4ecb\u7ecd\u4e00\u4e0b\u4f60\u7684\u9879\u76ee\uff08ViT \u9879\u76ee\uff09</li> <li>\u5199\u4e00\u4e0b multi-head attention \u7684\u4ee3\u7801\u5b9e\u73b0</li> <li>\u505a\u9898\uff1a\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5185\u53ea\u5305\u542b\u6570\u5b57\uff0c\u6c42\u95ee\u662f\u5426\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5212\u5206\u4e3a\u4e00\u4e2a\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a\u6570\u5b57\u7b49\u4e8e\u524d\u4e24\u4e2a\u6570\u5b57\u7684\u548c\uff0c\u9664\u4e86\u7b2c\u4e00\u4e2a\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5ffd\u7565\u3002\uff08\u5199\u4e86\u4e00\u4e2a n3 \u7684\u66b4\u529b\u5224\u65ad\uff09</li> <li>\u53cd\u95ee\uff1a\u60a8\u89c9\u5f97\u6211\u9700\u8981\u63d0\u5347\u54ea\u4e9b\u65b9\u9762\u7684\u80fd\u529b\u3002\uff08\u7b80\u5386\u91cc\u9762\u5199\u7684\u4e1c\u897f\u4e00\u5b9a\u8981\u77e5\u6839\u77e5\u5e95\uff0c\u4e0d\u7136\u5c31\u662f\u6263\u5206\u9879[\u6307 GBDT]\u3002\u9700\u8981\u5b66\u4e60\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u57fa\u7840\uff0c\u4f8b\u5982 AUC \u8fd9\u7c7b\u5f88\u5e38\u7528\u7684\u8bc4\u5206\u6307\u6807\uff09</li> </ul>"},{"location":"interview/interview_2024/#_13","title":"\u4e09\u9762\uff1a","text":"<ul> <li>\u81ea\u6211\u4ecb\u7ecd</li> <li>\u4ecb\u7ecd\u9879\u76ee</li> <li>\u4f60\u77e5\u9053 AUC \u4e86\u5417\uff1f\uff08\u53c8\u95ee\u4e86\u4e00\u904d\uff09</li> <li>\u5728\u91c7\u6837\u540e\u7684\u6837\u672c\u4e0a\u505a AUC \u548c\u539f\u6837\u672c\u4e2d\u505a AUC \u6709\u53ef\u6bd4\u6027\u5417\uff1f\uff08\u6709\u53ef\u6bd4\u6027\uff09</li> <li>\u4f60\u77e5\u9053 AUC \u7684\u8ba1\u7b97\u662f\u600e\u4e48\u7b97\u7684\u5417\uff1f\uff08\u56de\u7b54\u662f\u79ef\u5206\uff0c\u4e0b\u9762\u79ef\uff09</li> <li>\u5982\u4f55\u7406\u89e3 AUC\uff1f\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u968f\u673a\u62bd\u4e24\u4e2a\u6837\u672c\uff0c\u6b63\u6837\u672c\u6392\u5728\u8d1f\u6837\u672c\u524d\u7684\u6982\u7387\uff09</li> <li>\u5982\u679c\u5728 train \u4e00\u4e2a\u7f51\u7edc\u7684\u65f6\u5019\uff0closs \u4e0d\u4e0b\u964d\uff0c\u4f60\u4f1a\u6392\u67e5\u54ea\u91cc\u7684\u539f\u56e0\uff1f\uff08\u53c8\u95ee\u4e86\u4e00\u904dx2\uff09\uff08\u53ef\u80fd\u662f\u68af\u5ea6\u95ee\u9898\uff0c\u5b66\u4e60\u7387\u95ee\u9898\uff0c\u7f51\u7edc\u95ee\u9898\uff0c\u5982\u679c\u6392\u67e5\u540e\u4ecd\u7136\u6709\u95ee\u9898\uff0c\u4f1a\u8003\u8651\u987a\u7740\u68af\u5ea6\u67e5\u627e\uff09</li> <li>Transformer \u4e3a\u4ec0\u4e48\u8981\u9664\u4ee5\u6839\u53f7 dk\uff1f\uff08\u9632\u6b62\u503c\u8fc7\u5927\u5bfc\u81f4\u7684 softmax \u4e4b\u540e\u5176\u4f59\u503c\u53d8\u5f97\u5f88\u5c0f\uff09</li> <li>\u505a\u4e00\u4e2a\u9898\uff08\u5fd8\u4e86\u662f\u4ec0\u4e48\u9898\u4e86\uff0c\u5f88\u7b80\u5355\uff09</li> <li>\u4f60\u7684\u804c\u4e1a\u89c4\u5212\u662f\u4ec0\u4e48\uff1f</li> <li>\u4f60\u6709\u4ec0\u4e48\u4f18\u70b9\u548c\u7f3a\u70b9\uff1f\uff08\u5b66\u4e60\u80fd\u529b\u5f3a\uff0c\u6297\u538b\u80fd\u529b\u5f3a\u3002 \u7f3a\u70b9\u662f\u7f3a\u5c11\u6b63\u53cd\u9988\u4f1a\u6548\u7387--\uff0c\u7528\u535a\u5ba2 argue \u4e86\u4e24\u8005\u4e4b\u95f4\u7684\u51b2\u7a81\uff09</li> </ul>"},{"location":"interview/interview_2024/#hr_2","title":"HR \u9762\uff1a","text":"<ul> <li>\u5f88\u6025\uff0c\u9762\u8bd5\u5b98\u7b80\u5355\u4ecb\u7ecd\u4e86\u4e00\u4e0b\u6d41\u7a0b\uff0c\u5305\u62ec\u4ec0\u4e48\u65f6\u5019\u5f00\u5956\uff0c\u4ee5\u53ca\u8fdb\u516c\u53f8\u540e\u4f1a\u63a5\u53d7\u57f9\u8bad\u7b49\u6d41\u7a0b\u518d\u51b3\u5b9a\u5177\u4f53\u5de5\u4f5c\u3002</li> <li>\u53cd\u95ee\u52a0\u73ed\u60c5\u51b5\uff08\u9762\u8bd5\u5b98\u8868\u793a\u52a0\u73ed\u6bd4\u8f83\u4e25\u91cd\uff0c\u611f\u89c9\u4e0a\u5982\u679c\u6211\u4e0d\u63a5\u53d7\u52a0\u73ed\u7684\u8bdd\u5c31\u4e0d\u8981\u4e86\uff09</li> </ul>"},{"location":"interview/interview_2024/#b","title":"B \u7ad9\u5927\u6a21\u578b","text":""},{"location":"interview/interview_2024/#_14","title":"\u4e00\u9762\uff1a","text":"<ul> <li>\u81ea\u6211\u4ecb\u7ecd</li> <li>\u662f\u5426\u63a5\u89e6\u8fc7\u5927\u6a21\u578b\u76f8\u5173\u7684\u5b9e\u9645\u5de5\u7a0b\uff08\u6ca1\u6709\uff09</li> <li>\u4f60\u5bf9\u5927\u6a21\u578b\u6709\u54ea\u4e9b\u4e86\u89e3\uff08\u4e86\u89e3 Transformer\uff0c\u5927\u6a21\u578b\u7684\u57fa\u7840\uff09</li> <li>\u4e3a\u4ec0\u4e48 self-attention \u8981\u9664\u4ee5\u6839\u53f7 dk\uff08\u9632\u6b62\u67d0\u4e9b\u503c\u8fc7\u5927\u5bfc\u81f4\u5176\u4ed6\u7684 softmax \u5f88\u5c0f\uff09</li> <li>\u7b80\u5355\u8bb2\u4e00\u4e0b\u4f60\u7684\u8bba\u6587</li> <li>\u4f60\u7684\u8bba\u6587\u5728\u5b66\u4e60\u8ddd\u79bb\u8fd9\u91cc\uff0c\u76f8\u5f53\u4e8e\u8ba1\u7b97 embedding \u7684\u76f8\u4f3c\u5ea6\uff0c\u662f\u5426\u53ef\u4ee5\u7406\u89e3\u4e3a\u4f60\u518d\u7b97...(\u6ca1\u8bb0\u4f4f\uff0c\u4e0d\u662f\u95ee\u9898\uff0c\u662f\u9762\u8bd5\u5b98\u7684\u7406\u89e3)</li> <li>\u5199\u4e00\u4e0b self-attention \u7684\u4ee3\u7801</li> <li>\u53cd\u95ee\uff1a\u5728\u505a\u4ec0\u4e48\uff08\u5bf9\u6807\u5f00\u6e90\u7684\u5927\u6a21\u578b\uff09</li> </ul>"},{"location":"interview/interview_2024/#_15","title":"\u4e8c\u9762\uff1b","text":"<p>10 \u5206\u949f\u7ed3\u675f</p> <ul> <li>\u81ea\u6211\u4ecb\u7ecd</li> <li>\u662f\u5426\u6709\u505a\u8fc7\u5927\u6a21\u578b\uff0c\u5b66\u4e60\u5927\u6a21\u578b\u76f8\u5173\u77e5\u8bc6\uff08\u6ca1\u6709\uff09</li> <li>\u4ecb\u7ecd\u4e00\u4e0b\u5b9e\u4e60\u7ecf\u5386</li> <li>\u505a\u4e2a\u9898</li> </ul>"},{"location":"interview/interview_2024/#_16","title":"\u4e09\u9762\uff1a","text":"<ul> <li>\u81ea\u6211\u4ecb\u7ecd</li> <li>\u73b0\u5728\u5bf9\u5927\u6a21\u578b\u6709\u4ec0\u4e48\u4e86\u89e3\u4e86\uff08\u4e0b\u8f7d\u4e86 Ollama\uff0c \u73a9\u4e86\u4e00\u4e0b\uff0c\u770b\u4e86\u770b\u8bba\u6587\uff0c\u770b\u5230\u4e86\u6570\u636e\u6e05\u6d17\uff09</li> <li>\u4f60\u7684\u8bba\u6587\u662f\u600e\u4e48\u505a\u7684\uff08\u7b80\u5355\u8bb2\u4e86\u4e00\u4e0b\uff09</li> <li>\u8bb2\u9879\u76ee</li> </ul>"},{"location":"interview/interview_2024/#_17","title":"\u7f51\u6613\u96f7\u706b","text":"<p>\u4ea4\u53c9\u9762\uff0c\u4e00\u9762\u4e8c\u9762</p>"},{"location":"interview/interview_2024/#_18","title":"\u4e00\u9762\uff1a","text":"<ul> <li>\u81ea\u6211\u4ecb\u7ecd</li> <li>\u4ecb\u7ecd\u8bba\u6587</li> <li>\u4f60\u7684\u9879\u76ee\u662f\u600e\u4e48\u6837\u7684\uff1f\u5b9e\u9645\u5e94\u7528\u5230\u5de5\u4e1a\u754c\u4e86\u5417\uff1f\uff08\u4e0d\u77e5\u9053\uff09</li> <li>\u505a\u9009\u62e9\u586b\u7a7a\uff1a\u4e00\u4e2a\u7531 4000 \u4e2a\u8fb9\u7684\u56fe\u81f3\u5c11\u6709\u591a\u5c11\u70b9\uff0c\u8bbf\u95ee\u5185\u7f51\u57df\u540d\u7528\u5230\u4e86\u54ea\u4e9b\u7f51\u7edc\u670d\u52a1\uff0c\u54ea\u4e9b\u6392\u5e8f\u7b97\u6cd5\u662f\u7a33\u5b9a\u7684\uff0c\u770b\u7a0b\u5e8f\u8bf4\u8bdd\uff08\u4e3b\u8981\u662fC++ \u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u5728 char \u6570\u7ec4\u4e2d\u79fb\u52a8\u7684\u8ddd\u79bb\uff09</li> <li>C++ \u7a7a class \u7684 size \u662f\u591a\u5c11</li> <li>C++ \u5982\u679c\u7ee7\u627f\u4e86\u4e00\u4e2a\u7c7b\uff0c\u7136\u540e\u4e3a\u7a7a\uff0csize \u662f\u591a\u5c11</li> <li>\u8bf4\u4e00\u4e0b vector, map, unordered_map \u7684\u539f\u7406\u548c\u4e0d\u540c</li> <li>\u5982\u679c\u6211\u83b7\u53d6\u4e86 vector \u7684 begin\uff0c\u7136\u540e\u7ed9 vector \u63d2\u5165\u5143\u7d20\uff0c\u8fd9\u4e2a begin \u662f\u5426\u662f\u5371\u9669\u7684\uff1f\uff08\u5371\u9669\u7684\uff09</li> <li>\u90a3\u4e48 map \u548c unordered_map \u5462\uff1f\uff08\u56de\u7b54\u4e0d\u5371\u9669\uff0c\u4f46\u5728 unordered_map \u4e2d\u5e94\u8be5\u662f\u5371\u9669\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u5185\u90e8\u4f7f\u7528\u4e86 vector \u548c\u94fe\u8868\u6765\u50a8\u5b58\u5143\u7d20\u548c\u5904\u7406\u51b2\u7a81\uff09</li> <li>\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u987a\u5e8f\u8bbf\u95ee\u7b2c\u4e00\u7ef4\u548c\u7b2c\u4e8c\u7ef4\u7684\u6548\u7387\u662f\u5426\u4e00\u81f4\uff1f\uff08\u4e0d\u4e00\u81f4\uff0c\u8bbf\u95ee\u7b2c\u4e8c\u7ef4\u7684\u65f6\u5019\u66f4\u5bb9\u6613\u547d\u4e2d Cache\uff09</li> <li>\u5982\u679c\u8bf4\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5728\u67d0\u4e2a\u5927\u5c0f\u4e0b\u7684\u65f6\u5019\u8bbf\u95ee\u987a\u5e8f\u8bbf\u95ee\u7b2c\u4e00\u7ef4\u548c\u7b2c\u4e8c\u7ef4\u4e00\u6837\u5feb\uff0c\u5728 13700K CPU \u4e0a\u8fd9\u4e2a\u5927\u5c0f\u662f\u591a\u5c11\uff1f\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u4e8b\u60c5\uff1f\uff08\u7b2c\u4e00\u4e2a\u6ca1\u6709\u56de\u7b54\u4e0a\u6765\uff0c\u56e0\u4e3a\u5bf9\u73b0\u6709\u7684 CPU \u7f13\u5b58\u5927\u5c0f\u6ca1\u6709\u6982\u5ff5\u3002\u7b2c\u4e8c\u4e2a\u95ee\u9898\u56de\u7b54\u662f\uff1a\u56e0\u4e3a\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u53ef\u4ee5\u88ab\u5b8c\u5168\u88c5\u5165 Cache \u4e2d\uff0c\u6240\u4ee5\u65e0\u8bba\u600e\u4e48\u8bbf\u95ee\u90fd\u53ef\u4ee5\u547d\u4e2d\uff09</li> <li>\u60c5\u666f\u9898\uff1a\u73b0\u5728\u5f00\u53d1\u4e00\u4e2a\u8d5b\u8f66\u6e38\u620f\uff0c\u8d5b\u8f66\u7684\u8f66\u9053\u662f\u4e0d\u89c4\u5219\u7684\uff0c\u7ec8\u70b9\u4e00\u5b9a\u5728\u8f66\u9053\u4e0a\uff0c\u90a3\u4e48\u4f60\u8981\u600e\u4e48\u5728\u8d5b\u8f66\u53ef\u80fd\u51b2\u51fa\u8d5b\u9053\u7684\u60c5\u51b5\u4e0b\u4f9d\u7136\u7ed9\u51fa\u4ed6\u4eec\u7684\u6392\u540d\uff1f</li> <li>\u60c5\u666f\u9898\uff1a\u73b0\u5728\u5728\u4e00\u4e2a\u6e38\u620f\u4e2d\uff0c\u4e00\u4e2a\u6280\u80fd\u7684\u8303\u56f4\u662f\u81ea\u8eab\u5468\u56f4\u7684\u90a3\u4e9b\u4eba\uff0c\u4f60\u8981\u600e\u4e48\u627e\u5230\u9644\u8fd1\u7684\u4eba\uff1f\uff08\u56de\u7b54\u662f\u5c06\u533a\u57df\u5206\u5757\uff0c\u6bcf\u6b21\u67e5\u627e\u5468\u56f4\u5757\u5185\u6709\u54ea\u4e9b\u4eba\uff0c\u7136\u540e\u518d\u8fdb\u884c\u5224\u65ad\uff09</li> <li>\u60c5\u666f\u9898\uff1a\u5047\u8bbe\u4f60\u6b63\u5728\u5b9e\u73b0\u4e00\u4e2a AI \u7b97\u6cd5\uff0c\u9700\u8981\u4f60\u5728\u4e00\u4e2a\u70b9\u5468\u56f4\u4e00\u5b9a\u8303\u56f4\u5185\u753b\u4e00\u4e2a\u5706\uff0c\u4f7f\u8fd9\u4e2a\u5706\u5305\u542b\u5c3d\u53ef\u80fd\u591a\u7684\u70b9\u3002</li> </ul> <p>\u6700\u540e\u4e00\u4e2a\u60c5\u666f\u9898\u6ca1\u6709\u7ed9\u51fa\u6ee1\u610f\u7684\u56de\u7b54\uff0c\u641c\u7d22\u4e86\u4e00\u4e0b\uff0c\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u662f\u201c Welzl's algorithm\u201d\uff0c\u8fd9\u662f\u4e00\u79cd\u968f\u673a\u5316\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5728\u671f\u671b\u7684\u5e38\u6570\u65f6\u95f4\u5185\u627e\u5230\u8fd9\u6837\u7684\u5706\u3002</p>"},{"location":"interview/interview_2024/#_19","title":"\u4e8c\u9762\uff1a","text":"<p>\u9762\u8bd5\u5b98\u4e0d\u53cb\u597d</p> <ul> <li>\u81ea\u6211\u4ecb\u7ecd</li> <li>\u6709\u53c2\u4e0e\u8fc7\u5f00\u6e90\u9879\u76ee\u5417\uff08\u6ca1\u6709\uff09</li> <li>\u667a\u5546\u9898\uff0c\u6709 11 \u74f6\u6c34\uff0c\u6709\u4e00\u74f6\u6709\u6bd2\uff0c\u5c0f\u767d\u9f20\u559d\u6709\u6bd2\u7684\u6c34\u4e00\u4e2a\u5c0f\u65f6\u540e\u4f1a\u6b7b\uff0c\u95ee\u51e0\u53ea\u5c0f\u767d\u9f20\u53ef\u4ee5\u6d4b\u51fa\u6765\u6709\u6bd2\u7684\u6c34\u3002\uff08\u56db\u53ea\uff09</li> </ul> <p>\u540e\u9762\u4e0d\u60f3\u5199\u4e86\uff0c\u9762\u8bd5\u5b98\u5f88\u4e0d\u53cb\u597d\uff0c\u8bf4\u5230\u540e\u9762\u76f4\u63a5\u8ddf\u9762\u8bd5\u5b98\u8bf4\u4e0d\u9762\u4e86\u3002\u7ec8\u6b62</p>"},{"location":"interview/leetcode100/","title":"Leetcode 100 \u70ed\u9898\u9898\u89e3\u4e0e\u4ee3\u7801","text":"<p>\u4e00\u53e5\u8bdd\u9898\u89e3\uff0c\u7b80\u8981\u6982\u62ec\u9898\u76ee\u601d\u8def\u89e3\u6cd5\uff0c\u4e5f\u4f1a\u63d0\u4f9b\u5bf9\u5e94\u4ee3\u7801\u3002</p>"},{"location":"interview/leetcode100/#1","title":"1. \u4e24\u6570\u4e4b\u548c","text":"<p>\u4e00\u4e2a\u6570\u5b57\u786e\u5b9a\u65f6\u53e6\u4e00\u4e2a\u6570\u5b57\u7684\u503c\u4e5f\u5c31\u786e\u5b9a\u4e86\uff0c\u53ef\u4ee5\u7528 hashmap \u5224\u65ad\u53e6\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u5b58\u5728\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n)\u3002C++ \u4e2d\u53ef\u4ee5\u7528 <code>unordered_map</code> \u5b9e\u73b0\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; mp;\n        for (int i  = 0; i &lt; nums.size(); ++ i) {\n            auto it = mp.find(target - nums[i]);\n            if (it != mp.end()) {\n                return {it-&gt;second, i};\n            }\n            mp[nums[i]] = i;\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#2","title":"2. \u4e24\u6570\u76f8\u52a0","text":"<p>\u6a21\u62df\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a\u4e0d\u542b\u6570\u503c\u7684\u5934\u8282\u70b9\u6765\u907f\u514d\u5224\u65ad\u3002</p> <pre><code>class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        int x = 0;\n        ListNode head = ListNode();\n        ListNode *num = &amp;head;\n        while(l1 != nullptr || l2 != nullptr || x) {\n            num-&gt;next = new ListNode();\n            num = num-&gt;next;\n\n            num-&gt;val = x;\n            if (l1 != nullptr) {\n                num-&gt;val += l1-&gt;val;\n                l1 = l1-&gt;next;\n            }\n            if (l2 != nullptr) {\n                num-&gt;val += l2-&gt;val;\n                l2 = l2-&gt;next;\n            }\n\n            if (num-&gt;val &gt;= 10) {\n                x = 1;\n                num-&gt;val -= 10;\n            } else x = 0;\n        }\n        num = head.next;\n        return num;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":"<p>\u6ed1\u52a8\u7a97\u53e3\uff0c\u7528\u4e00\u4e2a HashSet \u8bb0\u5f55\u5df2\u7ecf\u51fa\u73b0\u7684\u5b57\u7b26\uff0c\u6bcf\u6b21\u53f3\u7aef\u70b9\u5411\u53f3\u79fb\u52a8\u65f6\u5224\u65ad\u662f\u5426\u91cd\u590d\uff0c\u5982\u679c\u91cd\u590d\u5219\u5de6\u7aef\u70b9\u5411\u53f3\u79fb\u52a8\u3002</p> <pre><code>class Solution {\npublic:\n    unordered_set&lt;int&gt; hash;\n    int lengthOfLongestSubstring(string s) {\n        hash.clear();\n        int ans = 0;\n        for (int r = 0, l = 0; r &lt; s.size(); ++ r) {\n            while(hash.contains(s[r])) {\n                hash.erase(s[l++]);\n            }\n            hash.insert(s[r]);\n            ans = max(ans, (int)hash.size());\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#4","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","text":"<p>\u5982\u679c\u53ef\u4ee5\u540c\u65f6\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u5e94\u7528\u5408\u7406\u7684\u5212\u5206\uff0c\u5c06\u4e24\u4e2a\u6570\u7ec4\u5404\u5206\u4e3a\u4e24\u90e8\u5206\u518d\u5408\u5e76\u8d77\u6765\u3002\u5408\u5e76\u8d77\u6765\u7684\u6570\u7ec4\u4e2d\uff0c\u5de6\u534a\u90e8\u5206\u6570\u5b57\u4e2a\u6570\u4e3a \\(\\frac{(n + m + 1)}{2}\\) \u65f6\uff0c\u4e2d\u4f4d\u6570\u662f\u5de6\u534a\u90e8\u5206\u7684\u6700\u5927\u503c\u548c\u53f3\u534a\u90e8\u5206\u7684\u6700\u5c0f\u503c\u7684\u5e73\u5747\u503c\uff08\u5982\u679c\u662f\u5947\u6570\u7684\u8bdd\u5c31\u76f4\u63a5\u662f\u5de6\u534a\u90e8\u5206\u7684\u6700\u5927\u503c\uff09\u3002\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u7684\u65b9\u5f0f\u679a\u4e3e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u7684\u5206\u5272\u70b9\uff0c\u8fd9\u6837\u7684\u8bdd\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u7684\u5206\u5272\u70b9\u5c31\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u786e\u5b9a\u3002</p> <pre><code>#define inf 0x3fffffff\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        if (nums1.size() &gt; nums2.size()) swap(nums1, nums2);\n        int n = nums1.size(), m = nums2.size();\n        int l = 0, r = n;\n        int split1 = 0, split2 = 0;\n        int lmax = -1, rmin = -1;\n        while (l &lt;= r) {\n            split1 = l+r &gt;&gt; 1;\n            split2 = (n + m + 1) / 2 - split1;\n            int a = split1-1 &lt; 0 ? -inf : nums1[split1-1];\n            int b = split1 &gt;= n ? inf : nums1[split1];\n            int x = split2-1 &lt; 0 ? -inf : nums2[split2-1];\n            int y = split2 &gt;= m ? inf : nums2[split2];\n\n            if (a &lt;= y &amp;&amp; x &lt;= b) {\n                lmax = max(a, x);\n                rmin = min(b, y);\n                break;\n            }\n            if (a &gt; y) {\n                r = split1 - 1;\n            } else {\n                l = split1 + 1;\n            }\n        }\n        if ((n + m) % 2 == 0) return (double)(lmax + rmin) / 2;\n        else return lmax;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#5","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p>manacher \u7b97\u6cd5</p> <pre><code>class Solution {\n    string prework(string s) {\n        string ret = \"\";\n        for (int i = 0; i &lt; s.size(); ++ i) {\n            ret += '#';\n            ret += s[i];\n        }\n        ret += \"#\";\n        return ret;\n    }\n    vector&lt;int&gt;p;\npublic:\n    string longestPalindrome(string s) {\n        string manaStr = prework(s);\n        p.clear();\n        p.resize(manaStr.size());\n        int R = -1, C = -1;\n        int ans = 0;\n        for (int i = 0; i &lt; manaStr.size() - 1; ++ i) {\n            p[i] = R &gt; i ? min(R - i ,p[2*C-i]) : 1;\n            while(i + p[i] &lt; manaStr.size() &amp;&amp; i - p[i] &gt;= 0) {\n                if (manaStr[i+p[i]] == manaStr[i-p[i]]) ++ p[i];\n                else break;\n            }\n            if (i+p[i] &gt; R) {\n                R = i+p[i];\n                C = i;\n            }\n            ans = max(ans, p[i]-1);\n        }\n        for (int i = 0;i &lt; manaStr.size(); ++ i) {\n            if (ans == p[i]-1) {\n                int idx = i / 2 - ans / 2;\n                return s.substr(idx, ans);\n            }\n        }\n        printf(\"ans = %d\\n\" ,ans);\n        return \"\";\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#11","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<p>\u8d2a\u5fc3\uff0c\u4ece\u4e24\u4fa7\u7528\u53cc\u6307\u9488\u5411\u4e2d\u95f4\u9760\u62e2\uff0c\u6bcf\u6b21\u79fb\u52a8\u66f4\u4f4e\u7684\u4e00\u8fb9\uff0c\u8fd9\u6837\u624d\u66f4\u53ef\u80fd\u5411\u66f4\u597d\u7684\u65b9\u5411\u53d1\u5c55\u3002</p> <pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        int i = 0, j = height.size()-1;\n        int ans = 0;\n        while (i &lt; j) {\n            ans = max(ans, min(height[i], height[j]) * (j-i));\n            if (height[i] &lt; height[j]) ++ i;\n            else --j;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u9996\u5148\u6392\u5e8f\uff0c\u7136\u540e\u679a\u4e3e\u4e09\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u518d\u679a\u4e3e\u7b2c\u4e8c\u4e2a\u6570\u5b57\uff0c\u7b2c\u4e09\u4e2a\u6570\u5b57\u4f1a\u5728\u7b2c\u4e8c\u4e2a\u6570\u5b57\u4ece\u524d\u5f80\u540e\u679a\u4e3e\u7684\u8fc7\u7a0b\u4e2d\u9010\u6e10\u4ece\u540e\u5f80\u524d\u79fb\u52a8\uff0c\u7ef4\u62a4\u6307\u9488\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        sort(nums.begin(), nums.end());\n\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        ans.clear();\n\n        for (int i = 0;i &lt; nums.size(); ++ i) {\n            if (i != 0 &amp;&amp; nums[i] == nums[i-1]) continue;\n\n            int k = nums.size()-1;\n\n            for (int j = i+1; j &lt; nums.size(); ++ j) {\n\n                if (j &gt; i+1 &amp;&amp; nums[j] == nums[j-1]) continue;\n                while(k &gt; j &amp;&amp; nums[i] + nums[j] + nums[k] &gt; 0) -- k;\n                if (k &lt;= j) break;\n\n                if (nums[i] + nums[j] + nums[k] == 0) {\n                    vector&lt;int&gt; tmp; tmp.clear();\n                    tmp.push_back(nums[i]);\n                    tmp.push_back(nums[j]);\n                    tmp.push_back(nums[k]);\n                    ans.push_back(tmp);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":"<p>\u641c\u7d22\u679a\u4e3e</p> <pre><code>class Solution {\n    vector&lt;string&gt; ans;\n    string res;\npublic:\n    void dfs(string &amp;str, int idx) {\n        static string mapping[] = {\"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n        if (idx == str.size()) {\n            ans.push_back(res);\n            return ;\n        }\n        string mapString = mapping[str[idx] - '1'];\n        for (int i = 0; i &lt; mapString.size(); ++ i) {\n            res += mapString[i];\n            dfs(str, idx+1);\n            res.pop_back();\n        }\n\n    }\n    vector&lt;string&gt; letterCombinations(string digits) {\n        ans.clear();\n        if (digits.empty()) return ans;\n        res = \"\";\n        dfs(digits, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<p>\u7528\u4e00\u4e2a\u6570\u7ec4\u628a\u6574\u4e2a\u94fe\u8868\u5b58\u4e86\u4e0b\u6765\uff0c\u8bf4\u5b9e\u8bdd\u53ef\u4ee5\u538b\u7f29\u5230\u53ea\u5b58\u6700\u540e n+1 \u4e2a\u7ed3\u70b9\uff0c\u4f46\u662f\u8fd9\u5c31\u9700\u8981\u518d\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u6709\u70b9\u61d2\u3002</p> <pre><code>class Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        vector&lt;ListNode*&gt; listnode;\n        while(head != nullptr) {\n            listnode.push_back(head);\n            head = head-&gt;next;\n        }\n        int idx = listnode.size() - n;\n        if (listnode.size() == 1) {\n            assert(idx == 0);\n            return nullptr;\n        }\n        if (idx == 0) {\n            delete listnode[idx];\n            return listnode[idx+1];\n        }\n        ListNode *before = listnode[idx-1];\n        before-&gt;next = listnode[idx]-&gt;next;\n        delete listnode[idx];\n        return listnode[0];\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u7528\u6808\u6765\u5224\u65ad\u3002</p> <pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        vector&lt;int&gt; sta; sta.reserve(s.size());\n        for (int i = 0; i &lt; s.size(); ++ i) {\n            if (s[i] == ')' || s[i] == '}' || s[i] == ']') {\n                if (s[i] == ')') {\n                    if (sta.empty() || sta.back() != '(') return false;\n                    else sta.pop_back();\n                } else if (s[i] == '}') {\n                    if (sta.empty() || sta.back() != '{') return false;\n                    else sta.pop_back();\n                } else {\n                    if (sta.empty() || sta.back() != '[') return false;\n                    else sta.pop_back();\n                }\n            } else sta.push_back(s[i]);\n        }\n        return sta.empty();\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#21","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<p>\u76f4\u63a5\u5408\u5e76</p> <pre><code>class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode head, *p = &amp;head;\n        while(list1 != nullptr &amp;&amp; list2 != nullptr) {\n            if (list1-&gt;val &lt; list2-&gt;val) {\n                p-&gt;next = list1;\n                p = p-&gt;next;\n                list1 = list1-&gt;next;\n            } else {\n                p-&gt;next = list2;\n                p = p-&gt;next;\n                list2 = list2-&gt;next;\n            }\n        }\n        while(list1 != nullptr) p-&gt;next = list1, p = p-&gt;next, list1 = list1-&gt;next;\n        while(list2 != nullptr) p-&gt;next = list2, p = p-&gt;next, list2 = list2-&gt;next;\n        return head.next;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#22","title":"22. \u62ec\u53f7\u751f\u6210","text":"<p>\u53ef\u4ee5\u7528\u9012\u5f52\u6765\u505a\uff0c\u505a\u7684\u540c\u65f6\u8fd8\u53ef\u4ee5\u526a\u679d\uff0c\u4f1a\u5feb\u4e00\u4e9b\u3002\u6211\u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u5199\u4e86\u8fed\u4ee3\u679a\u4e3e+\u5224\u65ad\u7684\u65b9\u6cd5\u3002</p> <pre><code>class Solution {\n    bool check(int val, int len, string &amp;ret) {\n        ret = \"\";\n        int leftNumber = 0;\n        for (int i = 0; i &lt; len; ++ i) {\n            if (val &amp; (1 &lt;&lt; i)) {\n                ret += '(';\n                ++ leftNumber;\n            } else {\n                if (leftNumber) --leftNumber;\n                else return false;\n                ret += ')';\n            }\n        }\n        return leftNumber == 0;\n    }\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        vector&lt;string&gt; ans;\n        int len = n &lt;&lt; 1;\n        for (int i = 0; i &lt; (1 &lt;&lt; len); ++ i) {\n            string ret;\n            if (check(i, len, ret)) ans.push_back(ret);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#23-k","title":"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868","text":"<p>\u5efa\u4e00\u4e2a\u5806\uff0c\u7136\u540e\u4fdd\u5b58\u6bcf\u4e2a\u94fe\u8868\u7684\u5f53\u524d\u6307\u9488\uff0c\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u5143\u7d20\uff0c\u7136\u540e\u5c06\u5806\u9876\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5806\u4e2d\u3002</p> <pre><code>class Solution {\npublic:\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        ListNode *head = nullptr;\n        ListNode *tail = nullptr;\n        priority_queue &lt;pair&lt;int, int&gt;,vector&lt;pair&lt;int, int&gt;&gt;,greater&lt;pair&lt;int, int&gt;&gt; &gt; heap;\n        for (int i = 0; i &lt; lists.size(); ++ i) {\n            if (lists[i] != nullptr)\n                heap.push(make_pair(lists[i]-&gt;val, i));\n        }\n        while(!heap.empty()) {\n            pair&lt;int, int&gt; ret = heap.top();\n            heap.pop();\n            ListNode *nw = lists[ret.second];\n            lists[ret.second] = nw-&gt;next;\n            nw-&gt;next = nullptr;\n            if (head == nullptr) {\n                head = nw;\n                tail = nw;\n            } else {\n                tail-&gt;next = nw;\n                tail = nw;\n            }\n            if (lists[ret.second] != nullptr) {\n                heap.push(make_pair(lists[ret.second]-&gt;val, ret.second));\n            }\n        }\n        return head;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u521b\u5efa\u4e00\u4e2a <code>preHead</code> \u4f5c\u4e3a\u5934\u8282\u70b9\uff0c\u6765\u65b9\u4fbf\u540e\u7eed\u7684\u5224\u65ad\u3002</p> <pre><code>class Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode *p, *q;\n        ListNode preHead; preHead.next = head;\n        if (head == nullptr || head-&gt;next == nullptr) return head;\n        p = &amp;preHead;\n        while(p-&gt;next != nullptr &amp;&amp; p-&gt;next-&gt;next != nullptr) {\n            q = p-&gt;next;\n            ListNode *x = q-&gt;next;\n            p-&gt;next = x;\n            q-&gt;next = x-&gt;next;\n            x-&gt;next = q;\n            p = q;\n        }\n        return preHead.next;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#25-k","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":"<p>\u6dfb\u52a0\u4e00\u4e2a leftGuard \u8282\u70b9\u6307\u5411 head\uff0c\u540e\u7eed\u7528\u4e24\u4e2a\u6307\u9488\u8868\u793a <code>(]</code> \u7684\u533a\u95f4\u7136\u540e\u8fdb\u884c\u7ffb\u8f6c\u3002</p> <pre><code>class Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        if (k == 1) return head;\n        ListNode *left, *right;\n        ListNode leftGuard(0, head);\n        right = left = &amp;leftGuard;\n        int cnt = 0;\n        while(right-&gt;next != nullptr) {\n            right = right-&gt;next;\n            if (++cnt == k) {\n                ListNode *now = left-&gt;next, *tail = left-&gt;next;\n                ListNode *nextNode = now-&gt;next;\n                while(nextNode != right) {\n                    ListNode *tmp = nextNode-&gt;next;\n                    nextNode-&gt;next = now;\n                    now = nextNode;\n                    nextNode = tmp;\n                }\n                left-&gt;next-&gt;next = right-&gt;next;\n                right-&gt;next = now;\n                left-&gt;next = right;\n                left = right = tail;\n                cnt = 0;\n            }\n        }\n        return leftGuard.next;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#31","title":"31. \u4e0b\u4e00\u4e2a\u6392\u5217","text":"<p>\u4ece\u540e\u5f80\u524d\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u964d\u5e8f\u7684\u6570\u5b57\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6570\u5b57\u4e0e\u540e\u9762\u7684\u6570\u5b57\u4e2d\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6570\u5b57\u4ea4\u6362\uff0c\u7136\u540e\u5c06\u540e\u9762\u7684\u6570\u5b57\u7ffb\u8f6c\uff08\u8c03\u4e3a\u6b63\u5e8f\uff09\u3002</p> <pre><code>class Solution {\npublic:\n    void nextPermutation(vector&lt;int&gt;&amp; nums) {\n        int i = nums.size() - 2;\n        while(i &gt;= 0 &amp;&amp; nums[i] &gt;= nums[i+1]) -- i;\n        if (i &gt;= 0) {\n            int j = nums.size() - 1;\n            while(j &gt;= 0 &amp;&amp; nums[i] &gt;= nums[j]) -- j;\n            swap(nums[i], nums[j]);\n        }\n        reverse(nums.begin() + i + 1, nums.end());\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#32","title":"32. \u6700\u957f\u6709\u6548\u62ec\u53f7","text":"<p>\u6808\u6c42\u89e3\u62ec\u53f7\u5e8f\u5217\uff0c\u7528\u6808\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5de6\u62ec\u53f7\u7684\u4f4d\u7f6e\uff0c\u901a\u8fc7\u8bb0\u5f55<code>f[i]</code>\u8868\u793a\u4ee5\u7b2c <code>i</code> \u4e2a\u5b57\u7b26\u7ed3\u5c3e\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\u7684\u957f\u5ea6\u3002</p> <pre><code>class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int ans = 0;\n        stack&lt;int&gt; sta;\n        vector&lt;int&gt; f(s.size());\n        for (int i = 0, res = 0; i &lt; s.size(); ++ i) {\n            f[i] = 0;\n            if (s[i] == '(') {\n                sta.push(i);\n            } else {\n                if (sta.empty()) continue;\n                else {\n                    int idx = sta.top(); sta.pop();\n                    if (idx == 0) f[i] = i - idx + 1;\n                    else f[i] = f[idx-1] + (i - idx + 1);\n                    ans = max(ans, f[i]);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#33","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":"<p>\u901a\u8fc7\u4e8c\u5206\u786e\u8ba4\u5206\u754c\u70b9\uff0c\u7136\u540e\u8fdb\u884c\u5206\u522b\u4e8c\u5206\u67e5\u627e\u3002</p> <pre><code>class Solution {\npublic:\n    int binary_search(vector&lt;int&gt;&amp; nums, int l, int r, int target) {\n        while(l &lt;= r) {\n            int mid = l+r &gt;&gt; 1;\n            if (nums[mid] &lt; target) l = mid+1;\n            else if (nums[mid] &gt; target) r = mid-1;\n            else return mid;\n        }\n        return -1;\n    }\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int base = nums[0];\n\n        if (nums.size() == 1) return target == base ? 0 : -1;\n\n        int l = 1, r = nums.size() - 1, ans = 0;\n        while (l &lt;= r) {\n            int mid = l+r &gt;&gt; 1;\n            if (nums[mid] &gt; base) l = mid+1;\n            else {\n                r = mid-1;\n                ans = mid;\n            }\n        }\n        int x = binary_search(nums, 0, ans-1, target);\n        int y = binary_search(nums, ans, nums.size()-1, target);\n        if (x == -1 &amp;&amp; y == -1) return -1;\n        return x == -1 ? y : x;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#34","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<p><code>upper_bound</code> \u5927\u6cd5\u597d\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        int p = upper_bound(nums.begin(), nums.end(), target-1) - nums.begin();\n        int q = upper_bound(nums.begin(), nums.end(), target) - nums.begin();\n        if (p == q) return vector&lt;int&gt;(2, -1);\n        return vector&lt;int&gt;({p, q-1});\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#35","title":"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e","text":"<p><code>lower_bound</code> \u5927\u6cd5\u597d\u3002</p> <pre><code>class Solution {\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {\n        return lower_bound(nums.begin(), nums.end(), target) - nums.begin();\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#39","title":"39. \u7ec4\u5408\u603b\u548c","text":"<p>\u9012\u5f52\u66b4\u641c\uff0c\u56e0\u4e3a\u8981\u8f93\u51fa\u7b54\u6848\u3002</p> <pre><code>class Solution {\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;int&gt; ret;\n    void dfs(vector&lt;int&gt; &amp;vec, int idx, int val) {\n        if (val == 0) { ans.push_back(ret); return; }\n        if (idx &gt;= vec.size()) return;\n        dfs(vec, idx+1, val);\n        int cnt = 1;\n        for (; val - cnt*vec[idx] &gt;= 0; ++ cnt) {\n            ret.push_back(vec[idx]);\n            dfs(vec, idx+1, val - cnt*vec[idx]);\n        }\n        while(--cnt) ret.pop_back();\n    }\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        ans.clear();\n        dfs(candidates, 0, target);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#41","title":"41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570","text":"<p>\u5229\u7528\u539f\u672c\u7684\u6570\u7ec4\u5143\u7d20\u5b58\u50a8\u4fe1\u606f\uff0c\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u4e0b\u6807\u4e3a <code>i</code> \u7684\u6570\u5b57 <code>num[i]</code> \u65f6\uff0c\u901a\u8fc7\u4e0d\u65ad\u7684 <code>swap</code> \u64cd\u4f5c\u5c06 <code>num[i]</code> \u653e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u6700\u540e\u518d\u904d\u5386\u4e00\u6b21\u6570\u7ec4\u3002</p> <pre><code>class Solution {\npublic:\n    int firstMissingPositive(vector&lt;int&gt;&amp; nums) {\n        for (int i = 0; i &lt; nums.size(); ++ i) {\n            while (nums[i] &gt; 0 &amp;&amp; nums[i] &lt;= nums.size()) {\n                if (nums[i] == nums[nums[i]-1]) break;\n                swap(nums[i], nums[nums[i]-1]);\n            }\n        }\n        for (int i = 0; i &lt; nums.size(); ++ i) {\n            if (nums[i] != i+1) return i+1;\n        }\n        return nums.size() + 1;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#42","title":"42. \u63a5\u96e8\u6c34","text":"<p>\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u4ece\u5de6\u5411\u53f3\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u6700\u9ad8\u70b9\u66f4\u65b0\u65f6\u5c31\u4f1a\u6709\u4e00\u4e2a\u65b0\u7684\u63a5\u96e8\u6c34\u7684\u5751\u51fa\u73b0\u3002\u6240\u4ee5\u5faa\u73af\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u4ece\u5de6\u5411\u53f3\uff0c\u7b2c\u4e8c\u6b21\u4ece\u53f3\u5411\u5de6\uff0c\u5982\u679c\u6700\u9ad8\u70b9\u6709\u66f4\u65b0\u7684\u8bdd\u5c31\u662f\u51fa\u73b0\u4e86\u65b0\u7684\u6c34\u5751\u3002</p> <pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        int maxHeightIdx = 0;\n        int sum = 0, ans = 0;\n        for (int i = 1; i &lt; height.size(); ++ i) {\n            if (height[i] &gt;= height[maxHeightIdx]) {\n                ans += height[maxHeightIdx] * (i - maxHeightIdx - 1) - sum;\n                sum = 0;\n                maxHeightIdx = i;\n            } else {\n                sum += height[i];\n            }\n        }\n        int middle = maxHeightIdx;\n        maxHeightIdx = height.size()-1;\n        sum = 0;\n        for (int i = height.size()-2; i &gt;= middle; -- i) {\n            if (height[i] &gt;= height[maxHeightIdx]) {\n                ans += height[maxHeightIdx] * (maxHeightIdx - i - 1) - sum;\n                sum = 0;\n                maxHeightIdx = i;\n            } else {\n                sum += height[i];\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#45-ii","title":"45. \u8df3\u8dc3\u6e38\u620f II","text":"<p>\u6bcf\u6b21\u9009\u62e9\u8df3\u8dc3\u533a\u95f4\u5185\u4e0b\u4e00\u6b65\u8df3\u7684\u6700\u8fdc\u7684\u70b9\u3002\u8fed\u4ee3\u8df3\u8dc3\u76f4\u5230\u8fbe\u5230\u7ec8\u70b9\u3002\u8fd9\u4efd\u4ee3\u7801\u5176\u5b9e\u590d\u6742\u5ea6\u6709\u4e9b\u4e0d\u5bf9\uff0c\u6bcf\u6b21\u679a\u4e3e\u4e0d\u5e94\u8be5\u4ece <code>cur</code> \u5f00\u59cb\uff0c\u6700\u597d\u662f\u4ece\u4e0a\u4e00\u6b21\u7684 <code>jumpRange</code> \u5f00\u59cb\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u907f\u514d\u679a\u4e3e\u5230\u76f8\u540c\u7684\u5143\u7d20\uff0c\u4f46\u662f\u61d2\u5f97\u6539\u4e86\uff09</p> <pre><code>class Solution {\npublic:\n    int jump(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() &lt;= 1) return 0;\n        int ans = 0, cur = 0, jumpRange = nums[0];\n        while(true) {\n            if (jumpRange &gt;= nums.size()-1) break;\n            int idx = cur;\n            for (int i = cur + 1; i &lt;= jumpRange; ++ i) {\n                if (i + nums[i] &gt; idx + nums[idx]) {\n                    idx = i;\n                }\n            }\n            jumpRange = idx + nums[idx];\n            cur = idx;\n            ans += 1;\n        }\n        ans += 1;\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#46","title":"46. \u5168\u6392\u5217","text":"<p>\u4e0d\u65ad\u6c42\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u76f4\u5230\u5f97\u5230\u672c\u8eab\u3002</p> <p>\u5982\u4f55\u6c42\u4e0b\u4e00\u4e2a\u6392\u5217\uff1a\u4ece\u540e\u5f80\u524d\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f\u9012\u589e\u7684\u6570\u5b57\uff0c\u7136\u540e\u5c06\u8be5\u6570\u5b57\u540e\u9762\u7684\u6570\u5b57\u7ffb\u8f6c\u3002\u518d\u4ece\u5f53\u524d\u6570\u5b57\u5f00\u59cb\u5411\u540e\u679a\u4e3e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u8be5\u6570\u5b57\u7684\u6570\u5b57\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u4e0b\u4e00\u4e2a\u6392\u5217\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans; ans.push_back(nums);\n        vector&lt;int&gt; origin = nums;\n        while(true) {\n            int p = -1;\n            for (int i = nums.size() - 2; i &gt;= 0; -- i) {\n                if (nums[i] &lt; nums[i+1]) {\n                    p = i; break;\n                }\n            }\n            reverse(nums.begin()+p+1, nums.end());\n            if (p != -1) for (int i = p+1; i &lt; nums.size(); ++ i) {\n                if (nums[p] &lt; nums[i]) {\n                    swap(nums[p], nums[i]);\n                    break;\n                }\n            }\n            if (nums == origin) break;\n            ans.push_back(nums);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#48","title":"48. \u65cb\u8f6c\u56fe\u50cf","text":"<p>\u65cb\u8f6c\u4f1a\u5f62\u6210\u5faa\u73af\u94fe\u8def\uff0c\u901a\u8fc7\u5750\u6807\u8ba1\u7b97\u53ef\u4ee5\u8ba1\u7b97\u51fa\u56db\u4e2a\u70b9\u7684\u65cb\u8f6c\u53d8\u6362\u5173\u7cfb\uff0c\u7136\u540e\u76f4\u63a5\u4ea4\u6362\u3002\u6ce8\u610f\u5bf9\u4e8e\u5947\u6570\u7684\u77e9\u9635\u6765\u8bf4\u9700\u8981\u679a\u4e3e\u4e2d\u95f4\u884c\u6216\u5217\u6765\u63a5\u89e6\u5230\u4e2d\u95f4\u7684\u5faa\u73af\u8282\u3002</p> <pre><code>class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int n = matrix.size();\n        for (int i = 0; i &lt; n&gt;&gt;1; ++ i) {\n            for (int j = 0; j &lt; (n+1&gt;&gt;1); ++ j) {\n                int tmp = matrix[i][j];\n                matrix[i][j] = matrix[n-j-1][i];\n                matrix[n-j-1][i] = matrix[n-i-1][n-j-1];\n                matrix[n-i-1][n-j-1] = matrix[j][n-i-1];\n                matrix[j][n-i-1] = tmp;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#49","title":"49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4","text":"<p>\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u6392\u5e8f\uff0c\u6b64\u65f6\u76f8\u7b49\u7684\u5b57\u7b26\u4e32\u5c31\u662f\u5b57\u6bcd\u5f02\u4f4d\u8bcd\uff0c\u7528\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a key\uff0c\u539f\u5b57\u7b26\u4e32\u4f5c\u4e3a value \u5b58\u5165 hashmap \u4e2d\uff0c\u6700\u540e\u5c06 hashmap \u4e2d\u7684 value \u53d6\u51fa\u3002\u7528 C++ \u7684 <code>unordered_map</code> \u5b9e\u73b0\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) {\n        int len = strs.size();\n        unordered_map&lt;string, vector&lt;string&gt;&gt; mp;\n        int cnt = 0;\n        for (auto it: strs) {\n            string sortResult = it;\n            sort(sortResult.begin(), sortResult.end());\n            mp[sortResult].push_back(it);\n        }\n        vector&lt;vector&lt;string&gt;&gt; ret;\n        for (auto it : mp) {\n            ret.push_back(it.second);\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#51-n","title":"51. N \u7687\u540e","text":"<p>\u66b4\u641c</p> <pre><code>class Solution {\n    vector&lt;vector&lt;string&gt;&gt; ans;\n    int mat[10][10];\npublic:\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        ans.clear();\n        memset(mat, 0, sizeof mat);\n        dfs(n, 1, 1);\n        return ans;\n    }\n\n    void dfs(int n, int rows, int idx) {\n        if (idx == n+1) {\n            return ;\n        }\n        if (rows &gt; n) {\n            vector&lt;string&gt; res;\n            res.clear();\n            for (int i = 1; i &lt;= n; ++ i) {\n                string row_ans = \"\";\n                for (int j = 1; j &lt;= n; ++ j) {\n                    if (mat[i][j]) row_ans += \"Q\";\n                    else row_ans += \".\";\n                }\n                res.push_back(row_ans);\n            }\n            ans.push_back(res);\n            return ;\n        }\n        if (check(n, rows, idx)) {\n            mat[rows][idx] = 1;\n            dfs(n, rows+1, 1);\n            mat[rows][idx] = 0;\n        }\n        dfs(n, rows, idx+1);\n    }\n\n    bool check(int n, int x, int y) {\n        for (int i = 1; x-i &gt; 0 &amp;&amp; y - i &gt; 0; ++ i) {\n            if (mat[x - i][y - i]) return false;\n        }\n        for (int i = 1; x-i &gt; 0 &amp;&amp; y + i &lt;= n; ++ i) {\n            if (mat[x - i][y + i]) return false;\n        }\n        for (int i = 1; i &lt; x; ++ i) {\n            if (mat[i][y]) return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#53","title":"53. \u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<p>\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf\u8868\u793a\u4ece\u5f53\u524d\u6570\u5b57\u5f80\u524d\u6269\u5c55\u80fd\u5f97\u5230\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002</p> <pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        int ans = -0x7fffffff;\n        int res = -0x7fffffff;\n        for (auto x: nums) {\n            if (res &lt; 0) {\n                ans = max(ans, x);\n                res = x;\n            } else {\n                ans = max(ans, res + x);\n                res += x;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#54","title":"54. \u87ba\u65cb\u77e9\u9635","text":"<p>\u901a\u8fc7\u7ef4\u62a4\u8fb9\u754c\u7ebf\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\uff0c\u7ef4\u62a4\u76ee\u524d\u5269\u4f59\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u8fb9\u754c\u7ebf\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        vector&lt;int&gt; ans;\n        if (matrix.empty()) return ans;\n        int u = 0, l = 0;\n        int d = matrix.size() - 1, r = matrix[0].size() - 1;\n        ans.reserve(matrix.size() * matrix[0].size());\n        while(1) {\n            for (int i = l; i &lt;= r; ++ i) ans.push_back(matrix[u][i]);\n            if (++ u &gt; d) break;\n            for (int i = u; i &lt;= d; ++ i) ans.push_back(matrix[i][r]);\n            if (-- r &lt; l) break;\n            for (int i = r; i &gt;= l; -- i) ans.push_back(matrix[d][i]);\n            if (-- d &lt; u) break;\n            for (int i = d; i &gt;= u; -- i) ans.push_back(matrix[i][l]);\n            if (++ l &gt; r) break;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#55","title":"55. \u8df3\u8dc3\u6e38\u620f","text":"<p>\u7ef4\u62a4\u53ef\u4ee5\u8df3\u5230\u7684\u6700\u8fdc\u7684\u70b9\u3002</p> <pre><code>class Solution {\npublic:\n    bool canJump(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() &lt;= 1) return true;\n        for (int i = 0, idx = 0; i &lt; nums.size() &amp;&amp; i &lt;= idx; ++ i) {\n            while(idx &lt; i + nums[i]) if (++idx &gt;= nums.size()-1) return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#56","title":"56. \u5408\u5e76\u533a\u95f4","text":"<p>\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\u540e\u7ebf\u5f62\u626b\u4e00\u904d\u5e76\u8fdb\u884c\u5408\u5e76</p> <pre><code>class Solution {\n    static bool compare(const vector&lt;int&gt; &amp;a, const vector&lt;int&gt; &amp;b) {\n        return a[0] &lt; b[0];\n    }\npublic:\n    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        if (intervals.empty()) return ans;\n        sort(intervals.begin(), intervals.end(), compare);\n        int l = intervals[0][0], r = intervals[0][1];\n        for (int i = 1; i &lt; intervals.size(); ++ i) {\n            if (intervals[i][0] &lt;= r) {\n                r = max(r, intervals[i][1]);\n            } else {\n                ans.push_back(vector&lt;int&gt;({l, r}));\n                l = intervals[i][0];\n                r = intervals[i][1];\n            }\n        }\n        ans.push_back(vector&lt;int&gt;({l, r}));\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#62","title":"62. \u4e0d\u540c\u8def\u5f84","text":"<p><code>f[i][j]</code> \u8868\u793a\u4ece\u8d77\u70b9\u8d70\u5230 \\((i, j)\\) \u7684\u65b9\u6848\u6570: <code>f[i][j] = f[i-1][j] + f[i][j-1]</code></p> <pre><code>class Solution {\n    int f[100][100];\npublic:\n    int uniquePaths(int m, int n) {\n        f[0][0] = 1;\n        for (int i = 1; i &lt; m; ++ i) f[i][0] = 1;\n        for (int i = 1; i &lt; n; ++ i) f[0][i] = 1;\n        for (int i = 1;i &lt; m; ++ i) {\n            for (int j = 1; j &lt; n; ++ j) {\n                f[i][j] = f[i-1][j] + f[i][j-1];\n            }\n        }\n        return f[m-1][n-1];\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#64","title":"64. \u6700\u5c0f\u8def\u5f84\u548c","text":"<p>\u52a8\u6001\u89c4\u5212\uff0c<code>f[i][j] = min(f[i-1][j], f[i][j-1]) + grid[i][j]</code>\u3002</p> <pre><code>class Solution {\n    vector&lt;vector&lt;int&gt;&gt; f;\npublic:\n    int minPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        f = grid;\n        for (int i = 0; i &lt; grid.size(); ++ i) {\n            for (int j = 0; j &lt; grid[i].size(); ++ j) {\n                if (i == 0 &amp;&amp; j == 0) continue;\n                if (i == 0) f[i][j] = f[i][j-1] + grid[i][j];\n                else if (j == 0) f[i][j] = f[i-1][j] + grid[i][j];\n                else f[i][j] = min(f[i-1][j], f[i][j-1]) + grid[i][j];\n            }\n        }\n        return f.back().back();\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#70","title":"70. \u722c\u697c\u68af","text":"<p>\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002</p> <pre><code>class Solution {\n    int f[55];\n\npublic:\n    Solution() {\n        memset(f, -1, sizeof f);\n        f[0] = 1;\n        f[1] = 1;\n    }\n    int climbStairs(int n) {\n        if (f[n] != -1) return f[n];\n        return f[n] = climbStairs(n-1) + climbStairs(n-2);\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#72","title":"72. \u7f16\u8f91\u8ddd\u79bb","text":"<p><code>f[i][j]</code> \u8868\u793a <code>s[0..i-1]</code> \u548c <code>t[0..j-1]</code> \u7684\u7f16\u8f91\u8ddd\u79bb</p> <pre><code>class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        int n = word1.size(), m = word2.size();\n        vector&lt;vector&lt;int&gt;&gt; f(n+1, vector&lt;int&gt;(m+1));\n        f[0][0] = 0;\n        for (int i = 1; i &lt;= n; ++ i) f[i][0] = i;\n        for (int i = 1; i &lt;= m; ++ i) f[0][i] = i;\n        for (int i = 1; i &lt;= n; ++ i) {\n            for (int j = 1; j &lt;= m; ++ j) {\n                if (word1[i-1] == word2[j-1]) f[i][j] = f[i-1][j-1];\n                else f[i][j] = min(min(f[i-1][j-1], f[i-1][j]), f[i][j-1]) + 1;\n            }\n        }\n        return f[n][m];\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#73","title":"73. \u77e9\u9635\u7f6e\u96f6","text":"<p>\u5c06\u884c\u6216\u8005\u5217\u7684\u7f6e\u96f6\u4fe1\u53f7\u4fdd\u5b58\u5230\u7b2c \\(0\\) \u884c\u548c\u7b2c \\(0\\) \u5217\uff0c\u7136\u540e\u518d\u5f00\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u8868\u793a\u7b2c \\(0\\) \u884c\u548c\u7b2c \\(0\\) \u5217\u662f\u5426\u9700\u8981\u7f6e\u96f6\u3002</p> <pre><code>class Solution {\npublic:\n    void setZeroes(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        bool line0 = false, col0 = false;\n        for (int i = 0; i &lt; matrix[0].size(); ++ i) {\n            if (matrix[0][i] == 0) {\n                line0 = true;\n                break;\n            }\n        }\n        for (int i = 0; i &lt; matrix.size(); ++ i) {\n            if (matrix[i][0] == 0) {\n                col0 = true;\n            }\n            for (int j = 0; j &lt; matrix[i].size(); ++ j) {\n                if (matrix[i][j] == 0) {\n                    matrix[i][0] = matrix[0][j] = 0;\n                }\n            }\n        }\n        for (int i = 1; i &lt; matrix[0].size(); ++ i) {\n            if (matrix[0][i] == 0) {\n                for (int j = 1; j &lt; matrix.size(); ++ j) {\n                    matrix[j][i] = 0;\n                }\n            }\n        }\n        for (int i = 1; i &lt; matrix.size(); ++ i) {\n            if (matrix[i][0] == 0) {\n                for (int j = 1; j &lt; matrix[i].size(); ++ j) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n        if (line0) for(int i = 0; i &lt; matrix[0].size(); ++ i) matrix[0][i] = 0;\n        if (col0) for(int i = 0; i &lt; matrix.size(); ++ i) matrix[i][0] = 0;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#74","title":"74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635","text":"<p>\u7a81\u51fa\u4e00\u4e2a\uff0c\u61d2\u5f97\u5199\u4e8c\u5206\uff09\u5148\u7528\u4e00\u6b21\u4e8c\u5206\u786e\u5b9a\u884c\u5750\u6807\uff0c\u518d\u7528\u4e00\u6b21\u4e8c\u5206\u786e\u5b9a\u5217\u5750\u6807\u3002</p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        int p = lower_bound(matrix.begin(), matrix.end(), vector&lt;int&gt;(1, target)) - matrix.begin();\n\n        if (p &lt; matrix.size() &amp;&amp; matrix[p][0] == target) return true;\n        if (-- p &lt; 0) return false;\n\n        auto it = lower_bound(matrix[p].begin(), matrix[p].end(), target);\n        if (it == matrix[p].end()) return false;\n        return *it == target;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#75","title":"75. \u989c\u8272\u5206\u7c7b","text":"<p>\u7ef4\u62a4\u5de6\u6307\u9488\u8868\u793a \\(0\\) \u5ef6\u7eed\u5230\u54ea\u91cc\u4e86\uff0c\u540c\u65f6\u7ef4\u62a4\u53f3\u6307\u9488\u8868\u793a \\(2\\) \u5ef6\u7eed\u5230\u54ea\u91cc\u4e86\u3002\u4ece\u5de6\u8fb9\u6362\u8fc7\u6765\u7684\u53ea\u53ef\u80fd\u662f \\(2\\)\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4e0b\u4e00\u4e2a\uff0c\u4ece\u53f3\u8fb9\u6362\u8fc7\u6765\u7684\u4e0d\u786e\u5b9a\uff0c\u6240\u4ee5\u9700\u8981 <code>while</code> \u5faa\u73af\u3002\u4ee3\u7801\u4e0a\u6211\u662f\u90fd\u653e\u5230\u4e86 <code>while</code> \u91cc\u9762\uff0c\u4f46\u5176\u5b9e\u4ece\u5de6\u8fb9\u6362\u8fc7\u6765\u7684\u53ef\u4ee5\u63d0\u5230\u5faa\u73af\u5916\u9762\u3002</p> <pre><code>class Solution {\npublic:\n    void sortColors(vector&lt;int&gt;&amp; nums) {\n        int l = 0, r = nums.size()-1;\n        for (int i = 0; i &lt;= r; ++ i) {\n            while(l &lt;= i &amp;&amp; i &lt;= r) {\n                if (nums[i] == 0) swap(nums[l++], nums[i]);\n                else if (nums[i] == 2) swap(nums[r--], nums[i]);\n                else break;\n            }\n        }\n        return ;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#76","title":"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32","text":"<p>\u679a\u4e3e\u53f3\u7aef\u70b9\uff0c\u5de6\u7aef\u70b9\u4e00\u5b9a\u662f\u4e00\u76f4\u5411\u53f3\u79fb\u52a8\u7684\u3002</p> <pre><code>class Solution {\n    int ws[52], nw[52], remain;\n    int convertChar2Id(char x) {\n        if ('a' &lt;= x &amp;&amp; x &lt;= 'z') return x - 'a';\n        if ('A' &lt;= x &amp;&amp; x &lt;= 'Z') return x - 'A' + 26;\n        return -1;\n    }\npublic:\n    string minWindow(string s, string t) {\n        memset(ws, 0, sizeof ws);\n        memset(nw, 0, sizeof nw);\n        remain = 52;\n        int n = s.size(), m = t.size();\n        for (int i = 0; i &lt; m; ++ i) {\n            ws[convertChar2Id(t[i])] += 1;\n        }\n        for (int i = 0; i &lt; 52; ++ i) {\n            if (nw[i] &gt;= ws[i]) -- remain;\n        }\n        int ans = n+1, ansl = -1, ansr = -1;\n        for (int r = 0,l = 0; r &lt; n; ++ r) {\n            int charId = convertChar2Id(s[r]);\n            if (++ nw[charId] == ws[charId]) {\n                -- remain;\n            }\n            while(l &lt; r) {\n                charId = convertChar2Id(s[l]);\n                if (nw[charId] &gt; ws[charId]) {\n                    -- nw[charId];\n                    ++ l;\n                } else break;\n            }\n            if (remain == 0){\n                if (r-l+1 &lt; ans) {\n                    ans = r-l+1;\n                    ansl = l;\n                    ansr = r;\n                }\n            }\n        }\n        if (ans == n+1) return \"\";\n        return s.substr(ansl, ansr-ansl+1);\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#79","title":"79. \u5b50\u96c6","text":"<p>\u4e8c\u8fdb\u5236\u679a\u4e3e</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        for (int i = 0 ; i &lt; (1 &lt;&lt; nums.size()); ++ i) {\n            vector&lt;int&gt; res;\n            for (int j = 0; j &lt; nums.size(); ++ j) {\n                if (i &amp; (1 &lt;&lt; j)) res.push_back(nums[j]);\n            }\n            ans.push_back(res);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#79_1","title":"79. \u5355\u8bcd\u641c\u7d22","text":"<p>\u76f4\u63a5\u641c\u7d22\uff0c\u8bb0\u5f55\u5f53\u524d\u4f4d\u7f6e\u5339\u914d\u5230\u4e86\u7b2c\u51e0\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u9012\u5f52\u641c\u7d22\u3002</p> <pre><code>class Solution {\n    bool flag[12][12];\n    bool dfs(vector&lt;vector&lt;char&gt;&gt;&amp; board, int u, int v, string word, int idx) {\n        static int dx[] = {0, 0, 1, -1};\n        static int dy[] = {1, -1, 0, 0};\n        if (flag[u][v]) return false;\n        flag[u][v] = true;\n        if (board[u][v] != word[idx]) {\n            flag[u][v] = false;\n            return false;\n        }\n\n        if (idx == word.size()-1) {\n            flag[u][v] = false;\n            return true;\n        }\n        for (int i = 0; i &lt; 4; ++ i) {\n            int nx = u + dx[i];\n            int ny = v + dy[i];\n            if (nx &lt; 0 || nx &gt;= board.size() || ny &lt; 0 || ny &gt;= board[0].size()) continue;\n            if (dfs(board, nx, ny, word, idx+1)) {\n                flag[u][v] = false;\n                return true;\n            }\n        }\n        flag[u][v] = false;\n        return false;\n    }\npublic:\n    bool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) {\n        for (int i = 0; i &lt; board.size(); ++ i) {\n            for (int j = 0;j &lt; board[i].size(); ++ j) {\n                if (dfs(board, i, j, word, 0)) return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#84","title":"84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62","text":"<p>\u6bcf\u4e00\u4e2a\u5143\u7d20 \\(i\\) \u5411\u5de6\u80fd\u6269\u5c55\u7684\u6700\u5927\u957f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5355\u8c03\u4e0a\u5347\u7684\u5355\u8c03\u6808\u8ba1\u7b97\u5f97\u5230\uff0c\u4e24\u8fb9\u5355\u8c03\u6808\u6c42\u51fa\u6bcf\u4e00\u4e2a\u5143\u7d20\u5411\u5de6\u6269\u5c55\u548c\u5411\u53f3\u6269\u5c55\u7684\u6700\u5927\u957f\u5ea6\uff0c\u7136\u540e\u8ba1\u7b97\u7b54\u6848\u3002</p> <pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        stack&lt;int&gt; sta;\n        vector&lt;int&gt; left(heights.size()), right(heights.size());\n        for (int i = 0; i &lt; heights.size(); ++ i) {\n            while(!sta.empty() &amp;&amp; heights[sta.top()] &gt; heights[i]) sta.pop();\n            if (sta.empty()) left[i] = 0;\n            else {\n                if (heights[sta.top()] == heights[i]) left[i] = left[sta.top()];\n                else left[i] = sta.top() + 1;\n            }\n            sta.push(i);\n        }\n        while(!sta.empty()) sta.pop();\n        int ans = 0;\n        for (int i = heights.size()-1; i &gt;= 0; -- i) {\n            while(!sta.empty() &amp;&amp; heights[sta.top()] &gt; heights[i]) sta.pop();\n            if (sta.empty()) right[i] = heights.size()-1;\n            else {\n                if (heights[sta.top()] == heights[i]) right[i] = right[sta.top()];\n                else right[i] = sta.top() - 1;\n            }\n            sta.push(i);\n            ans = max(ans, (i-left[i] + right[i]-i + 1) * heights[i]);\n            sta.push(i);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#94","title":"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386","text":"<pre><code>class Solution {\n    void dfs(TreeNode *root, vector&lt;int&gt; &amp;ans) {\n        if (root == nullptr) return ;\n        dfs(root-&gt;left, ans);\n        ans.push_back(root-&gt;val);\n        dfs(root-&gt;right, ans);\n        return ;\n    }\npublic:\n    vector&lt;int&gt; inorderTraversal(TreeNode* root) {\n        vector&lt;int&gt; ans;\n        dfs(root, ans);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#98","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u5361 <code>INT_MAX</code> \u5f88\u6709\u610f\u601d\u5417\uff1f</p> <pre><code>class Solution {\n    bool dfs(TreeNode *root, long long minVal, long long maxVal) {\n        if (root == nullptr) return true;\n        if (root-&gt;val &lt;= minVal || root-&gt;val &gt;= maxVal) return false;\n        return dfs(root-&gt;left, minVal, root-&gt;val) &amp;&amp; dfs(root-&gt;right, root-&gt;val, maxVal);\n    }\npublic:\n    bool isValidBST(TreeNode* root) {\n        return dfs(root, -(1LL&lt;&lt;60), (1LL&lt;&lt;60));\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#101","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811","text":"<p>\u9012\u5f52\u5224\u65ad\u5de6\u53f3\u5b50\u6811\u662f\u5426\u5bf9\u79f0\u3002</p> <pre><code>class Solution {\n    bool check(TreeNode *p, TreeNode *q) {\n        if (p == nullptr &amp;&amp; q == nullptr) return true;\n        if (p == nullptr || q == nullptr) return false;\n        if (p-&gt;val != q-&gt;val) return false;\n        return check(p-&gt;left, q-&gt;right) &amp;&amp; check(p-&gt;right, q-&gt;left);\n    }\npublic:\n    bool isSymmetric(TreeNode* root) {\n        TreeNode *p = root, *q = root;\n        return check(p, q);\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#102","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":"<p>BFS + \u5b88\u536b\u8282\u70b9</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        if (root == nullptr) return ans;\n        queue&lt;TreeNode*&gt; que; que.push(root); que.push(nullptr);\n        vector&lt;int&gt; ret;\n        while(!que.empty()) {\n            TreeNode *p = que.front(); que.pop();\n            if (p == nullptr) {\n                ans.push_back(ret);\n                ret.clear();\n                if (que.empty()) break;\n                else {\n                    que.push(nullptr);\n                    continue;\n                }\n            }\n            ret.push_back(p-&gt;val);\n            if (p-&gt;left != nullptr) que.push(p-&gt;left);\n            if (p-&gt;right!= nullptr) que.push(p-&gt;right);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#104","title":"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","text":"<pre><code>class Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == nullptr) return 0;\n        return max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + 1;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#105","title":"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811","text":"<p>\u4ee5\u524d\u5e8f\u904d\u5386\u4e3a\u4e3b\uff0c\u6bcf\u6b21\u627e\u5230\u5f53\u524d\u4f4d\u7f6e\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u6765\u5c06\u95ee\u9898\u5212\u5206\u4e3a\u4e24\u4e2a\u5b50\u95ee\u9898\u3002</p> <pre><code>class Solution {\n    TreeNode* dfs(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt; &amp;inorder, int &amp;idx, int l, int r) {\n        if (l &gt; r) return nullptr;\n        TreeNode *p = new TreeNode();\n        p-&gt;val = preorder[idx];\n        int mid = -1;\n        for (int i = l; i &lt;= r; ++ i) {\n            if (inorder[i] == preorder[idx]) {\n                mid = i;\n                break;\n            }\n        }\n        assert(mid != -1);\n        idx += 1;\n\n        p-&gt;left = dfs(preorder, inorder, idx, l, mid-1);\n        p-&gt;right = dfs(preorder, inorder, idx, mid+1, r);\n        return p;\n    }\npublic:\n    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) {\n        int idx = 0;\n        return dfs(preorder, inorder, idx, 0, inorder.size()-1);\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#108","title":"108. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u901a\u8fc7 dfs \u8fdb\u884c\u9012\u5f52\u5efa\u6811\uff0c\u6bcf\u6b21\u53d6\u4e2d\u95f4\u7684\u6570\u5b57\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u5efa\u7acb\u5de6\u53f3\u5b50\u6811\u3002</p> <pre><code>class Solution {\npublic:\n    TreeNode* dfs(int l, int r, vector&lt;int&gt;&amp; nums) {\n        if (l &gt; r) return NULL;\n        int mid = l+r &gt;&gt; 1;\n        TreeNode* rt = new TreeNode();\n        rt-&gt;val = nums[mid];\n        rt-&gt;left = dfs(l, mid-1, nums);\n        rt-&gt;right = dfs(mid+1, r, nums);\n        return rt;\n    }\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        return dfs(0, nums.size()-1, nums);\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#114","title":"114. \u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u505a\uff0c\u6bcf\u6b21\u8fd4\u56de\u94fe\u8868\u7684\u5934\u4e0e\u5c3e\u90e8\u3002</p> <pre><code>class Solution {\n    pair&lt;TreeNode*, TreeNode*&gt; dfs(TreeNode *p) {\n        if (p == nullptr) return make_pair(nullptr, nullptr);\n        auto listleft = dfs(p-&gt;left);\n        auto listRight = dfs(p-&gt;right);\n        p-&gt;left = nullptr;\n        if (listleft.first == nullptr) p-&gt;right = listRight.first;\n        else {\n            p-&gt;right = listleft.first;\n            (listleft.second)-&gt;right = listRight.first;\n        }\n        if (p-&gt;right == nullptr) return make_pair(p, p);\n        if (listRight.first == nullptr) return make_pair(p, listleft.second);\n        return make_pair(p, listRight.second);\n    }\npublic:\n    void flatten(TreeNode* root) {\n        dfs(root);\n    }\n};\n</code></pre> <p>\u770b\u4e86\u9898\u89e3\u4e4b\u540e\u53d1\u73b0\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7684\u65b9\u5f0f\u6765\u505a\uff0c\u6bcf\u6b21\u5c06\u5de6\u5b50\u6811\u63d2\u5230\u53f3\u5b50\u6811\u4e2d\uff0c\u8fd9\u79cd\u65b9\u5f0f\u8981\u6162\u4e00\u4e9b\uff0c\u4f46\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4e3a\u4e86 \\(O(1)\\)\u3002</p> <pre><code>class Solution {\npublic:\n    void flatten(TreeNode* root) {\n        while(root != nullptr) {\n            if (root-&gt;left != nullptr) {\n                auto tmp = root-&gt;left;\n                while(tmp-&gt;right != nullptr) tmp = tmp-&gt;right;\n                tmp-&gt;right = root-&gt;right;\n                root-&gt;right = root-&gt;left;\n                root-&gt;left = nullptr;\n            }\n            root = root-&gt;right;\n        }\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#118","title":"118. \u6768\u8f89\u4e09\u89d2","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) {\n        vector&lt;vector&lt;int&gt;&gt; f(numRows);\n        f[0].push_back(1);\n        for (int i = 1; i &lt; numRows; ++ i) {\n            f[i].resize(i+1);\n            for (int j = 0; j &lt;= i; ++ j) {\n                if (j != i) f[i][j] += f[i-1][j];\n                if (j != 0) f[i][j] += f[i-1][j-1];\n            }\n        }\n        return f;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#121","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a","text":"<p>\u8bb0\u5f55\u8fc7\u53bb\u6700\u4f4e\u7684\u4e70\u5165\u4ef7\u683c\u3002</p> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        if (prices.size() &lt;= 1) return 0;\n        int minVal = prices[0], ans = 0;\n        for (int i = 1;i &lt; prices.size(); ++ i) {\n            if (prices[i] &gt; minVal) ans = max(ans, prices[i] - minVal);\n            else minVal = prices[i];\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#124","title":"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c","text":"<p>\u5728\u6bcf\u4e2a\u70b9\u4e0a\u8ba1\u7b97\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7aef\u70b9\u4e3a\u6839\u7684\u6700\u5927\u8def\u5f84\uff0c\u56e0\u4e3a\u662f\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u6bcf\u6b21\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u76f4\u63a5 <code>left + right</code> \u5c31\u662f\u901a\u8fc7\u6839\u7684\u6700\u5927\u8def\u5f84\u3002</p> <pre><code>class Solution {\n    int ans;\n    int dfs(TreeNode *p) {\n        if (p == nullptr) return 0;\n        int left = max(dfs(p-&gt;left), 0);\n        int right = max(dfs(p-&gt;right), 0);\n        ans = max(ans, left + right + p-&gt;val);\n        return max(left, right) + p-&gt;val;;\n    }\npublic:\n    int maxPathSum(TreeNode* root) {\n        ans = -0x7fffffff;\n        dfs(root);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#128","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217","text":"<p>\u5c06\u6240\u6709\u6570\u5b57\u63d2\u5165\u5230 HashMap \u5185\u540e\uff0c\u901a\u8fc7\u679a\u4e3e\u7684\u65b9\u5f0f\u5bfb\u627e\u8fde\u7eed\u6bb5\u7684\u8d77\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u5faa\u73af\u627e\u5230\u7ec8\u70b9\u3002</p> <pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        unordered_set&lt;int&gt; num_set;\n        for (auto x: nums) {\n            num_set.insert(x);\n        }\n        int ans = 0;\n        for (auto x: num_set) {\n            if (!num_set.count(x-1)) {\n                int cur = x;\n                int ret = 1;\n                while(num_set.count(cur+1)) {\n                    ++ cur;\n                    ++ ret;\n                }\n                ans = max(ans, ret);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#131","title":"131. \u5206\u5272\u56de\u6587\u4e32","text":"<p>\u641c\u7d22\u679a\u4e3e\uff1a</p> <pre><code>class Solution {\n    vector&lt;string&gt; res;\n    vector&lt;vector&lt;string&gt;&gt; ans;\n    bool check(string s) {\n        for (int i = 0; i &lt; s.size() / 2; ++ i) {\n            if (s[i] != s[s.size()-i-1]) return false;\n        }\n        return true;\n    }\n    void dfs(int u, string s) {\n        if (u &gt;= s.size()) {\n            ans.push_back(res);\n            return ;\n        }\n        for (int i = u;i &lt; s.size(); ++ i) {\n            string str = s.substr(u, i - u + 1);\n            if (check(str)) {\n                res.push_back(str);\n                dfs(i+1, s);\n                res.pop_back();\n            }\n        }\n    }\npublic:\n    vector&lt;vector&lt;string&gt;&gt; partition(string s) {\n        res.clear();\n        ans.clear();\n        dfs(0, s);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#138","title":"138. \u968f\u673a\u94fe\u8868\u7684\u590d\u5236","text":"<p>\u7528\u4e00\u4e2a HashMap \u6765\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u65b0\u8282\u70b9\uff0c\u5728\u62f7\u8d1d\u65f6\u901a\u8fc7\u8bb0\u5fc6\u5316\u7684\u65b9\u5f0f\u6765\u5c06\u6307\u9488\u6307\u5411\u6b63\u786e\u7684\u4f4d\u7f6e\u3002</p> <pre><code>class Solution {\n    unordered_map&lt;Node*, Node*&gt; hash;\n    Node* copy(Node *head) {\n        if (head == nullptr) return nullptr;\n        if (hash.contains(head)) return hash[head];\n        Node *p = new Node(head-&gt;val);\n        hash[head] = p;\n        p-&gt;next = copy(head-&gt;next);\n        p-&gt;random = copy(head-&gt;random);\n        return p;\n    }\npublic:\n    Node* copyRandomList(Node* head) {\n        hash.clear();\n        return copy(head);\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#136","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57","text":"<p>\u5f02\u6216\u548c\uff0c\u51fa\u73b0\u5076\u6570\u6b21\u7684\u6570\u5b57\u90fd\u4f1a\u4e92\u76f8\u62b5\u6d88\u3002</p> <pre><code>class Solution {\npublic:\n    int singleNumber(vector&lt;int&gt;&amp; nums) {\n        int x = 0;\n        for (int i = 0; i &lt; nums.size(); ++ i) {\n            x ^= nums[i];\n        }\n        return x;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#139","title":"139. \u5355\u8bcd\u62c6\u5206","text":"<p>\u8bbe <code>f[i]</code> \u8868\u793a\u80fd\u591f\u51d1\u51fa <code>0 .. i-1</code>, \u679a\u4e3e\u8f6c\u79fb\u66f4\u65b0\u3002\u5224\u65ad\u53ef\u4ee5\u7528 Hash \u8868\u6216\u8005 Trie\u3002</p> <pre><code>class Solution {\n    vector&lt;bool&gt; f;\n    unordered_set&lt;string&gt; hash;\npublic:\n    bool wordBreak(string s, vector&lt;string&gt;&amp; wordDict) {\n        hash.clear();\n        for (auto str : wordDict) hash.insert(str);\n        f.clear(); f.resize(s.size()+1);\n        f[0] = true;\n        for (int i = 1; i &lt;= s.size(); ++ i) {\n            for (int j = 0; j &lt; i; ++ j) {\n                if (f[j] &amp;&amp; hash.contains(s.substr(j, i-j))) f[i] = true;\n            }\n        }\n        return f[s.size()];\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#141","title":"141. \u73af\u5f62\u94fe\u8868","text":"<p>\u6211\u5c45\u7136\u5148\u505a\u7684\u73af\u5f62\u94fe\u8868 II\u3002</p> <pre><code>class Solution {\n#define next(x) \\\n    if((x)-&gt;next == nullptr) return false; \\\n    else (x) = (x)-&gt;next\npublic:\n    bool hasCycle(ListNode *head) {\n        if (head == nullptr) return false;\n        ListNode *p = head, *q = head;\n        while(true) {\n            next(p);\n            next(q);next(q);\n            if (p == q) return true;\n        }\n    }\n#undef next(x)\n};\n</code></pre>"},{"location":"interview/leetcode100/#143-ii","title":"143. \u73af\u5f62\u94fe\u8868 II","text":"<p>\u9996\u5148\u5728 Head \u5b9a\u4e49\u5feb\u6162\u4e24\u4e2a\u6307\u9488\uff0c\u5feb\u6307\u9488\u6bcf\u6b21\u79fb\u52a8 \\(2\\)\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u79fb\u52a8 \\(1\\)\u3002\u5982\u679c\u6211\u4eec\u8bbe \\(L\\) \u8868\u793a\u5165\u53e3\u70b9\u5230\u5165\u73af\u70b9\u7684\u8ddd\u79bb\uff0c\\(R\\) \u8868\u793a\u73af\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6162\u6307\u9488\u5230\u8fbe\u5165\u73af\u70b9\u65f6\u5feb\u6307\u9488\u4f4d\u4e8e\u73af\u4e0a\u8ddd\u79bb\u5165\u73af\u70b9 \\(L\\) \u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u518d\u7ecf\u8fc7 \\((R-L)\\) \u6b65\u5c31\u4f1a\u5230\u8fbe\u76f8\u9047\u70b9\uff0c\u6240\u4ee5\u76f8\u9047\u70b9\u4f4d\u4e8e\u73af\u4e0a\u8ddd\u79bb\u5165\u73af\u70b9 \\((R-L)\\) \u6b65\u7684\u4f4d\u7f6e\u3002</p> <p>\u63a5\u4e0b\u6765\u5c06\u6162\u6307\u9488\u91cd\u65b0\u653e\u56de\u8d77\u70b9\uff0c\u7136\u540e\u5c06\u5feb\u6307\u9488\u7684\u6b65\u5e45\u8c03\u6574\u4e3a \\(1\\)\u3002\u8fd9\u6837\u5728\u7ecf\u8fc7 \\(L\\) \u6b65\u540e\uff0c\u6162\u6307\u9488\u521a\u597d\u5230\u8fbe\u5165\u73af\u70b9\uff0c\u5feb\u6307\u9488\u4e5f\u521a\u597d\u5230\u8fbe\u5165\u73af\u70b9\u3002\u56e0\u6b64\u6b64\u65f6\u7684\u76f8\u9047\u70b9\u5c31\u662f\u5165\u73af\u70b9\uff0c\u4e5f\u5c31\u662f\u9898\u76ee\u6240\u6c42\u7684\u4f4d\u7f6e\u3002</p> <pre><code>#define next(pointer) \\\n    if ((pointer)-&gt;next != nullptr) pointer = pointer-&gt;next; \\\n    else return nullptr\n\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if (head == nullptr) return nullptr;\n        ListNode *slowPointer = head, *fastPointer = head;\n        do {\n            next(slowPointer);\n            next(fastPointer);\n            next(fastPointer);\n        } while(slowPointer != fastPointer);\n        slowPointer = head;\n        while(slowPointer != fastPointer) {\n            next(slowPointer);\n            next(fastPointer);\n        }\n        return slowPointer;\n    }\n};\n#undef next(pointer)\n</code></pre>"},{"location":"interview/leetcode100/#146-lru","title":"146. LRU \u7f13\u5b58","text":"<p>hash \u8868\u7ef4\u62a4\u6bcf\u4e2a key \u5bf9\u5e94\u7684\u6307\u9488\uff0c\u53cc\u5411\u94fe\u8868\u7ef4\u62a4\u6570\u636e\u7684\u987a\u5e8f\uff08\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528\u5934\u5c3e\u5b9e\u8282\u70b9\u6765\u5199\uff09\u3002</p> <pre><code>struct Node {\n    int key, value;\n    Node *nxt, *pre;\n};\n\nclass LRUCache {\n    unordered_map&lt;int, Node*&gt; hash;\n    int cap, siz;\n    Node *head, *tail;\npublic:\n    LRUCache(int capacity) {\n        cap = capacity;\n        siz = 0;\n        hash.clear();\n        head = new Node();\n        tail = new Node();\n        head-&gt;key = head-&gt;value = -1;\n        head-&gt;pre = NULL;\n        head-&gt;nxt = tail;\n\n        tail-&gt;key = tail-&gt;value = -1;\n        tail-&gt;pre = head;\n        tail-&gt;nxt = NULL;\n    }\n\n    int get(int key) {\n        if (hash.contains(key)) {\n            Node* node = hash[key];\n            update(node, node-&gt;value);\n            return node-&gt;value;\n        }\n        return -1;\n    }\n\n    void put(int key, int value) {\n        if (hash.contains(key)) {\n            Node* node = hash[key];\n            update(hash[key], value);\n        } else {\n            hash[key] = insert(key, value);\n            if (++siz &gt; cap) {\n                int delete_key = delete_last();\n                hash.erase(delete_key);\n            }\n        }\n    }\n\n    Node* insert(int key, int value) {\n        Node *ret = new Node;\n        ret-&gt;value = value;\n        ret-&gt;key = key;\n        ret-&gt;nxt = ret-&gt;pre = NULL;\n\n        Node* tmp = head-&gt;nxt;\n        head-&gt;nxt = tmp-&gt;pre = ret;\n        ret-&gt;pre = head;\n        ret-&gt;nxt = tmp;\n\n        return ret;\n    }\n\n    void update(Node *p, int value) {\n        p-&gt;value = value;\n\n        p-&gt;pre-&gt;nxt = p-&gt;nxt;\n        p-&gt;nxt-&gt;pre = p-&gt;pre;\n\n        p-&gt;pre = head;\n        p-&gt;nxt = head-&gt;nxt;\n\n        head-&gt;nxt-&gt;pre = p;\n        head-&gt;nxt = p;\n    }\n\n    int delete_last() {\n        Node *last = tail-&gt;pre;\n\n        last-&gt;pre-&gt;nxt = last-&gt;nxt;\n        last-&gt;nxt-&gt;pre = last-&gt;pre;\n\n        int ret = last-&gt;key;\n        delete last;\n\n        return ret;\n    }\n\n};\n</code></pre>"},{"location":"interview/leetcode100/#148","title":"148. \u6392\u5e8f\u94fe\u8868","text":"<p>\u5f52\u5e76\u6392\u5e8f\uff0c\u901a\u8fc7\u5927\u6b65\u5c0f\u6b65\u7b97\u6cd5\u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u70b9\uff0c\u7136\u540e\u5212\u5206\u4e3a\u4e24\u6bb5\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\u3002</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        if (head == nullptr) return nullptr;\n        if (head-&gt;next == nullptr) return head;\n        ListNode *p = head, *q = head-&gt;next;\n        while(q != nullptr) {\n            q = q-&gt;next; if (q == nullptr) break;\n            q = q-&gt;next;\n            p = p-&gt;next;\n        }\n        ListNode *list1 = sortList(p-&gt;next); p-&gt;next = nullptr;\n        ListNode *list2 = sortList(head);\n        ListNode preHead; head = &amp;preHead;\n        while(list1 != nullptr &amp;&amp; list2 != nullptr) {\n            if (list1-&gt;val &lt; list2-&gt;val) {\n                head-&gt;next = list1;\n                list1 = list1-&gt;next;\n                head = head-&gt;next;\n            } else {\n                head-&gt;next = list2;\n                list2 = list2-&gt;next;\n                head = head-&gt;next;\n            }\n        }\n        while(list1 != nullptr) {\n            head-&gt;next = list1; list1 = list1-&gt;next; head = head-&gt;next;\n        }\n        while(list2 != nullptr) {\n            head-&gt;next = list2; list2 = list2-&gt;next; head = head-&gt;next;\n        }\n        return preHead.next;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#152","title":"152. \u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4","text":"<p>\u6211\u4e0d\u559c\u6b22\u8fd9\u4e2a\u9898\u76ee\uff0c\u51fa\u9898\u4eba\u73a9\u6587\u5b57\u6e38\u620f\u3002\u4fdd\u8bc1\u4e86\u7b54\u6848\u4e0d\u8d85\u8fc7<code>int</code>\uff0c\u4f46\u662f\u5728\u6570\u636e\u4e2d\u523b\u610f\u8ba9\u8fd0\u7b97\u8fc7\u7a0b\u7684\u6570\u5b57\u7206\u6389\u4e86<code>long long</code>\u3002\u4e0e\u7ea6\u5b9a\u4fd7\u6210\u7684\u4e60\u60ef\u4e0d\u7b26\u3002</p> <p>\u7ef4\u62a4<code>minDot</code>\u548c<code>maxDot</code>\u4e24\u4e2a\u53d8\u91cf\uff0c\u4fdd\u5b58\u9009\u62e9\u5f53\u524d\u6570\u5b57\u4f5c\u4e3a\u7ed3\u5c3e\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u548c\u6700\u5c0f\u4e58\u79ef\u5206\u522b\u662f\u591a\u5c11\u3002</p> <pre><code>class Solution {\npublic:\n    int maxProduct(vector&lt;int&gt;&amp; nums) {\n        long long maxDot = nums[0];\n        long long minDot = nums[0];\n        long long ans = nums[0];\n        for (int i = 1; i &lt; nums.size(); ++ i) {\n            long long x = nums[i];\n            if (x &gt; 0) {\n                ans = max(ans, max(maxDot * x, x));\n                maxDot = max(x, maxDot * x);\n                minDot = min((long long)x, minDot * x);\n                if (minDot &lt; -0x7fffffff) minDot = -0x7fffffff;\n            } else {\n                ans = max(ans, max(minDot * x, x));\n                long long tmp = maxDot;\n                maxDot = max(x, minDot * x);\n                minDot = min((long long)x, tmp * x);\n                if (minDot &lt; -0x7fffffff) minDot = -0x7fffffff;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#153","title":"153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c","text":"<p>\u5982\u679c\u6211\u4eec\u53d6\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u6240\u6709\u5927\u4e8e\u8fd9\u4e2a\u6570\u5b57\u7684\u6570\u5206\u5e03\u5728\u6570\u7ec4\u7684\u5de6\u534a\u8fb9\uff0c\u5c0f\u4e8e\u8fd9\u4e2a\u6570\u5b57\u7684\u6570\u5206\u5e03\u5728\u6570\u7ec4\u7684\u53f3\u534a\u8fb9\uff0c\u901a\u8fc7\u4e8c\u5206\u786e\u8ba4\u5206\u754c\u70b9\u3002</p> <pre><code>class Solution {\npublic:\n    int findMin(vector&lt;int&gt;&amp; nums) {\n        int midValue = nums[0];\n        int l = 1, r = nums.size() - 1, ans = -1;\n        while(l &lt;= r) {\n            int mid = l+r &gt;&gt; 1;\n            if (nums[mid] &lt; midValue) {\n                r = mid-1;\n                ans = mid;\n            } else l = mid+1;\n        }\n        if (ans == -1) return nums[0];\n        return nums[ans];\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#155","title":"155. \u6700\u5c0f\u6808","text":"<p>\u7528\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e00\u4e2a\u6570\u7ec4\u7ef4\u62a4\u6808\uff0c\u53e6\u4e00\u4e2a\u6570\u7ec4\u7ef4\u62a4\u5355\u8c03\u6808\u3002\u56e0\u4e3a\u66f4\u9760\u524d\u66f4\u5c0f\u7684\u6570\u5b57\u53ef\u4ee5\u963b\u6b62\u540e\u9762\u6240\u6709\u6bd4\u4ed6\u5927\u7684\u6570\u5b57\u6210\u4e3a\u6700\u5c0f\u503c\u3002</p> <pre><code>class MinStack {\n    vector&lt;int&gt; sta;\n    vector&lt;int&gt; minStack;\npublic:\n    MinStack() {\n        sta.clear();\n        minStack.clear();\n    }\n\n    void push(int val) {\n        sta.push_back(val);\n        if(minStack.empty() || minStack.back() &gt;= val)\n            minStack.push_back(val);\n    }\n\n    void pop() {\n        if (minStack.back() == sta.back()) {\n            minStack.pop_back();\n            sta.pop_back();\n        } else sta.pop_back();\n    }\n\n    int top() {\n        return sta.back();\n    }\n\n    int getMin() {\n        return minStack.back();\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#160","title":"160. \u76f8\u4ea4\u94fe\u8868","text":"<p>\u540c\u65f6\u5f00\u59cb\u904d\u5386\uff0c\u8f83\u77ed\u7684\u4e00\u65b9\u904d\u5386\u5b8c\u4e4b\u540e\u53ef\u4ee5\u5f97\u77e5\u957f\u7684\u4e00\u6761\u8def\u7ebf\u6bd4\u77ed\u7684\u8981\u591a\u591a\u5c11\u3002\u53ef\u4ee5\u8ba9\u77ed\u7684\u76f4\u63a5\u4ece\u957f\u7684\u5934\u5f00\u59cb\u904d\u5386\uff0c\u7b49\u957f\u7684\u5934\u5230\u7ec8\u70b9\u540e\u524d\u5f80\u77ed\u7684\u5934\u5f00\u59cb\u904d\u5386\uff0c\u8fd9\u6837\u53cc\u65b9\u4f1a\u540c\u65f6\u62b5\u8fbe\u3002\u5173\u4e8e\u4e0d\u76f8\u4ea4\u7684\u94fe\u8868\uff1a\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u94fe\u8868\u7684\u672b\u5c3e\u90fd\u8fde\u5411\u4e86 <code>nullptr</code>\uff0c\u6240\u4ee5\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\u7684\u8bdd\u6700\u7ec8\u4f1a\u5728 <code>nullptr</code> \u76f8\u9047\u3002</p> <pre><code>class Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == nullptr || headB == nullptr) return nullptr;\n        ListNode *pA = headA, *pB = headB;\n        while(pA != pB) {\n            pA = pA == nullptr ? headB : pA-&gt;next;\n            pB = pB == nullptr ? headA : pB-&gt;next;\n        }\n        return pA;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#162","title":"162. \u591a\u6570\u5143\u7d20","text":"<p>\u7ef4\u62a4\u76ee\u524d\u7684\u4e3b\u5143\u7d20\u548c\u8be5\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4efb\u610f\u4e0e\u8be5\u5143\u7d20\u4e0d\u540c\u7684\u6570\u5b57\u89c6\u4f5c\u62b5\u6d88\u3002</p> <pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        int value = -1, cnt = 0;\n        for (auto x : nums) {\n            if (x != value) {\n                if (cnt) -- cnt;\n                else if (cnt == 0) {\n                    value = x;\n                    ++ cnt;\n                }\n            } else ++ cnt;\n        }\n        return value;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#189","title":"189. \u8f6e\u8f6c\u6570\u7ec4","text":"<p>\u5341\u5206\u6709\u60f3\u8c61\u529b\u7684\u505a\u6cd5\uff1a\u5148\u6574\u4f53\u7ffb\u8f6c\uff0c\u518d\u5206\u4e24\u90e8\u5206\u7ffb\u8f6c\u56de\u6765\u3002</p> <pre><code>class Solution {\npublic:\n    void rotate(vector&lt;int&gt;&amp; nums, int k) {\n        k %= nums.size();\n        reverse(nums.begin(), nums.end());\n        reverse(nums.begin(), nums.begin() + k);\n        reverse(nums.begin()+k, nums.end());\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#198","title":"198. \u6253\u5bb6\u52ab\u820d","text":"<p>\u52a8\u6001\u89c4\u5212\uff0c<code>f[i]</code> \u8868\u793a\u524d <code>i</code> \u4e2a\u623f\u5b50\u80fd\u591f\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca\u3002</p> <pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; f(nums.size());\n        if (nums.empty()) return 0;\n        if (nums.size() == 1) return nums[0];\n        f[0] = nums[0]; f[1] = max(nums[1], nums[0]);\n        for (int i = 2; i &lt; nums.size(); ++ i) {\n            f[i] = max(f[i-2] + nums[i], f[i-1]);\n        }\n        return f.back();\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#199","title":"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":"<p>\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u90fd\u5148\u9012\u5f52\u641c\u7d22\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u6bcf\u4e2a\u6df1\u5ea6\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u8bbf\u95ee\u7684\u70b9\u5c31\u662f\u88ab\u770b\u5230\u7684\u70b9\u3002</p> <pre><code>class Solution {\n    void dfs(TreeNode *root, int depth, vector&lt;int&gt; &amp;ans) {\n        if (root == nullptr) return ;\n        if (depth == ans.size()) ans.push_back(root-&gt;val);\n        dfs(root-&gt;right, depth+1, ans);\n        dfs(root-&gt;left,  depth+1, ans);\n    }\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        vector&lt;int&gt; ans;\n        dfs(root, 0, ans);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#200","title":"200. \u5c9b\u5c7f\u6570\u91cf","text":"<p>\u5faa\u73af\u904d\u5386\uff0c\u9047\u5230 1 \u7684\u65f6\u5019\u5c31\u901a\u8fc7 <code>dfs</code> \u5c06\u6240\u6709\u76f8\u8fde\u7684 1 \u53d8\u4e3a 0\u3002</p> <pre><code>class Solution {\n    void dfs(int u, int v, vector&lt;vector&lt;char&gt;&gt; &amp;grid) {\n        static int dx[] = {0, 0, 1, -1};\n        static int dy[] = {1, -1, 0, 0};\n        if (u &lt; 0 || v &lt; 0 || u &gt;= grid.size() || v &gt;= grid[0].size()) return ;\n        if (grid[u][v] == '0') return ;\n        grid[u][v] = '0';\n        for (int k = 0; k &lt; 4; ++ k) {\n            int nx = u + dx[k];\n            int ny = v + dy[k];\n            dfs(nx, ny, grid);\n        }\n        return ;\n    }\npublic:\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int ans = 0;\n        for (int i = 0; i &lt; grid.size(); ++ i) {\n            for (int j = 0; j &lt; grid[i].size(); ++ j) {\n                if (grid[i][j] == '1') {\n                    ++ ans;\n                    dfs(i, j, grid);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#206","title":"206. \u53cd\u8f6c\u94fe\u8868","text":"<p>\u5728\u6570\u7ec4\u4e2d\u8bb0\u5f55\u94fe\u8868\u5143\u7d20\uff0c\u7136\u540e\u9006\u5e8f\u6784\u9020\u94fe\u8868\u6307\u9488\u3002</p> <pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (head == nullptr) return nullptr;\n        vector&lt;ListNode*&gt; sta;\n        while(head != nullptr) {\n            sta.push_back(head);\n            head = head-&gt;next;\n        }\n        for (int i = sta.size()-1; i &gt; 0; -- i) {\n            sta[i]-&gt;next = sta[i-1];\n        }\n        sta[0]-&gt;next = nullptr;\n        return sta.back();\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#207","title":"207. \u8bfe\u7a0b\u8868","text":"<p>\u62d3\u6251\u6392\u5e8f</p> <pre><code>class Solution {\npublic:\n    bool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) {\n        vector&lt;vector&lt;int&gt;&gt;edges(numCourses);\n        vector&lt;int&gt; deg;\n        deg.resize(numCourses);\n        for (auto vec: prerequisites) {\n            int x = vec[0], y = vec[1];\n            edges[x].push_back(y);\n            ++ deg[y];\n        }\n        queue&lt;int&gt; q;\n        for (int i = 0; i &lt; numCourses; ++ i) {\n            if (deg[i] == 0) q.push(i);\n        }\n        while(!q.empty()) {\n            int u = q.front();q.pop();\n            for (auto to: edges[u]) {\n                if (-- deg[to] == 0) q.push(to);\n            }\n        }\n        for (int i = 0; i &lt; numCourses; ++ i) {\n            if (deg[i] != 0) return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#208-trie","title":"208. \u5b9e\u73b0 Trie","text":"<p>\u5b57\u9762\u610f\u601d\uff0c\u5b9e\u73b0\u4e00\u4e2a\u5b57\u5178\u6811\u3002\u5199\u4e86\u4e00\u4e2a\u52a8\u6001\u7684\u3002</p> <pre><code>struct Node {\n    Node* ch[26];\n    bool flag;\n};\nclass Trie {\n    Node *rt;\npublic:\n    Trie() {\n        rt = newNode();\n    }\n\n    Node* newNode() {\n        Node *ret = new Node();\n        for (int i = 0;i &lt; 26; ++ i) {\n            ret-&gt;ch[i] = NULL;\n        }\n        ret-&gt;flag = false;\n        return ret;\n    }\n\n    void insert(string word) {\n        Node *nw = rt;\n        for (int i = 0;i &lt; word.size(); ++ i) {\n            if (nw-&gt;ch[word[i] - 'a'] == NULL) {\n                nw-&gt;ch[word[i] - 'a'] = newNode();\n            }\n            nw = nw-&gt;ch[word[i] - 'a'];\n        }\n        nw-&gt;flag = true;\n    }\n\n    bool search(string word) {\n        Node *nw = rt;\n        for (int i = 0;i &lt; word.size(); ++ i) {\n            if (nw-&gt;ch[word[i] - 'a'] == NULL) return false;\n            nw = nw-&gt;ch[word[i] - 'a'];\n        }\n        return nw-&gt;flag;\n    }\n\n    bool startsWith(string prefix) {\n        Node *nw = rt;\n        for (int i = 0;i &lt; prefix.size(); ++ i) {\n            if (nw-&gt;ch[prefix[i] - 'a'] == NULL) return false;\n            nw = nw-&gt;ch[prefix[i] - 'a'];\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#215-k","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20","text":"<p>\u5feb\u901f\u9009\u62e9\uff0c\u7528\u7c7b\u4f3c\u5feb\u62cd\u7684\u601d\u60f3\u6765\u505a\u3002\u6bcf\u6b21\u627e\u4e00\u4e2a\u6570\u5b57\u4f5c\u4e3a\u4e2d\u95f4\u70b9\uff0c\u7136\u540e\u5c06\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u6570\u5b57\u7684\u653e\u5728\u5de6\u8fb9\uff0c\u5927\u4e8e\u7b49\u4e8e\u8be5\u6570\u5b57\u7684\u653e\u5728\u53f3\u8fb9\u3002\u7136\u540e\u627e\u4e00\u4e2a\u65b9\u5411\u9012\u5f52\u3002</p> <pre><code>class Solution {\n    int dfs(vector&lt;int&gt;&amp; nums, int l, int r, int k) {\n        if (l == r) return nums[l];\n        int mid = nums[l];\n        int left = l - 1, right = r + 1;\n        while(left &lt; right) {\n            do { ++ left; }while(nums[left] &lt; mid);\n            do { -- right; }while(nums[right] &gt; mid);\n            if (left &lt; right) swap(nums[left], nums[right]);\n        }\n        if (r - right &lt; k) {\n            k -= (r - right);\n            return dfs(nums, l, right, k);\n        }else return dfs(nums, right+1, r, k);\n    }\npublic:\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        return dfs(nums, 0, nums.size()-1, k);\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#226","title":"226. \u7ffb\u8f6c\u4e8c\u53c9\u6811","text":"<p>\u9012\u5f52\u7ffb\u8f6c\u5de6\u53f3\u5b50\u6811\u3002</p> <pre><code>class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == nullptr) return nullptr;\n        root-&gt;left = invertTree(root-&gt;left);\n        root-&gt;right = invertTree(root-&gt;right);\n        swap(root-&gt;left, root-&gt;right);\n        return root;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#230-k","title":"230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20","text":"<p>\u7528\u8bb0\u5fc6\u5316\u7684\u65b9\u5f0f\u8ba1\u7b97\u8282\u70b9\u7684size\uff0c\u7136\u540e\u5728\u4e8c\u53c9\u6811\u4e0a\u4e8c\u5206</p> <pre><code>class Solution {\npublic:\n    unordered_map&lt;TreeNode*, int&gt; siz;\n    int get_size(TreeNode *root) {\n        if (root == NULL) return 0;\n        if (siz.contains(root)) return siz[root];\n        siz[root] = 1;\n        if (root-&gt;left) siz[root] += get_size(root-&gt;left);\n        if (root-&gt;right) siz[root] += get_size(root-&gt;right);\n        return siz[root];\n    }\n    int kthSmallest(TreeNode* root, int k) {\n        if (get_size(root-&gt;left) + 1 == k) {\n            return root-&gt;val;\n        }\n        if (get_size(root-&gt;left) &lt; k) {\n            k -= get_size(root-&gt;left) + 1;\n            return kthSmallest(root-&gt;right, k);\n        } else return kthSmallest(root-&gt;left, k);\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#234","title":"234. \u56de\u6587\u94fe\u8868","text":"<p>\u8fdb\u9636\u8981\u6c42\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7\u5feb\u6162\u6307\u9488\u627e\u5230\u4e2d\u70b9\uff0c\u7136\u540e\u5c06\u540e\u534a\u90e8\u5206\u7ffb\u8f6c\u3002\u4f46\u662f\u8fd9\u91cc\u5c31\u76f4\u63a5\u5199\u4e86 copy \u5230\u6570\u7ec4\u4e2d\u7684\u7248\u672c\u3002\u4ee5\u53ca\u8fd9\u4e2a\u9898\u5176\u5b9e\u53ef\u4ee5\u7528 SAM \u505a\u5230 \\(O(1)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>class Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if (head == nullptr) return true;\n        vector&lt;int&gt; vec;\n        while(head != nullptr) {\n            vec.push_back(head-&gt;val);\n            head = head-&gt;next;\n        }\n        for (int i = 0, j = vec.size()-1; i &lt; j; ++ i, -- j) {\n            if (vec[i] != vec[j]) return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#235","title":"235. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<p>\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u8bb0\u5f55 father \u548c\u6df1\u5ea6\uff0c\u8fd8\u53ef\u4ee5\u500d\u589e\u5b9e\u73b0 \\(O(1)\\) \u67e5\u8be2\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u53ea\u6709\u4e00\u6b21\u67e5\u8be2\uff0c\u53ef\u4ee5 \\(O(n)\\) \u66b4\u529b\u641c\u7d22\u3002</p> <pre><code>class Solution {\n    bool dfs(TreeNode *root, TreeNode *p, TreeNode *q, TreeNode* &amp;ans) {\n        if (root == nullptr) return false;\n        int l = dfs(root-&gt;left, p, q, ans);\n        int r = dfs(root-&gt;right,p, q, ans);\n        if ( (l &amp;&amp; r) || ((root == p || root == q) &amp;&amp; (l || r)) )\n            ans = root;\n        return l || r || (root == p) || (root == q);\n    }\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode *ans = nullptr;\n        dfs(root, p, q, ans);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#238","title":"238. \u79fb\u52a8\u96f6","text":"<p>\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u904d\u5386\u6570\u7ec4\uff0c\u53e6\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\u5e94\u8be5\u5b58\u653e\u7684\u4f4d\u7f6e\u3002</p> <pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n        int j = 0;\n        for (int i = 0; i &lt; nums.size(); ++ i) {\n            if (nums[i] == 0) continue;\n            nums[j++] = nums[i];\n        }\n        while(j &lt; nums.size()) nums[j++] = 0;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#238_1","title":"238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef","text":"<p>\u4e24\u6b21\u904d\u5386\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\u8ba1\u7b97\u5de6\u8fb9\u7684\u4e58\u79ef\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u8ba1\u7b97\u53f3\u8fb9\u7684\u4e58\u79ef\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; ret(nums.size());\n        ret[0] = 1;\n        for (int i = 1; i &lt; nums.size(); ++ i){\n            ret[i] = ret[i - 1] * nums[i-1];\n        }\n        int dotSum = nums.back();\n        for (int i = nums.size() - 2; i &gt;= 0; -- i) {\n            ret[i] *= dotSum;\n            dotSum *= nums[i];\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#239","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c","text":"<p>\u5355\u8c03\u6808\uff0c\u7ef4\u62a4\u9012\u51cf\u7684\u5355\u8c03\u6808\u3002</p> <pre><code>use std::collections::VecDeque;\n\nimpl Solution {\n    pub fn max_sliding_window(nums: Vec&lt;i32&gt;, k: i32) -&gt; Vec&lt;i32&gt; {\n        let mut result: Vec&lt;i32&gt; = Vec::new();\n        let mut sta: VecDeque&lt;usize&gt; = VecDeque::new();\n        for i in 0..k-1 {\n            while !sta.is_empty() &amp;&amp; nums[i as usize] &gt;= nums[*sta.back().unwrap()] {\n                sta.pop_back();\n            }\n            sta.push_back(i as usize);\n        }\n        for i in k-1..nums.len() as i32{\n            while !sta.is_empty() &amp;&amp; nums[i as usize] &gt;= nums[*sta.back().unwrap()] {\n                sta.pop_back();\n            }\n            sta.push_back(i as usize);\n            while i - *sta.front().unwrap() as i32 &gt;= k {\n                sta.pop_front();\n            }\n            result.push(nums[sta.front().unwrap().clone()])\n        }\n        result\n    }\n}\n</code></pre>"},{"location":"interview/leetcode100/#240-ii","title":"240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II","text":"<p>\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u5982\u679c <code>target</code> \u5927\u4e8e\u5f53\u524d\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u786e\u5b9a\u5f53\u524d\u8fd9\u4e00\u884c\u90fd\u4e0d\u4f1a\u6210\u4e3a\u7b54\u6848\uff0c\u53ef\u4ee5\u5411\u4e0b\u8d70\u4e00\u6b65\u3002\u5982\u679c <code>target</code> \u5c0f\u4e8e\u5f53\u524d\u6570\u5b57\uff0c\u5219\u53ef\u4ee5\u786e\u5b9a\u5f53\u524d\u8fd9\u4e00\u5217\u90fd\u4e0d\u4f1a\u6210\u4e3a\u7b54\u6848\uff0c\u53ef\u4ee5\u5411\u5de6\u8d70\u4e00\u6b65\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n)\\)</p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        if (matrix.size() == 0) return false;\n        int x = 0, y = matrix[0].size() - 1;\n        while(matrix[x][y] != target) {\n            if (target &gt; matrix[x][y]) ++ x;\n            else if (target &lt; matrix[x][y]) -- y;\n            if (x &gt;= matrix.size() || y &lt; 0) return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#279","title":"279. \u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u8fd9\u4e2a\u9898\u52a8\u6001\u89c4\u5212\uff0c\u8bbe<code>f[i]</code>\u8868\u793a\u548c\u4e3a \\(i\\) \u7684\u6700\u5c11\u6570\u91cf\uff0c\u7136\u540e\u679a\u4e3e\u5b8c\u5168\u5e73\u65b9\u6570 DP \u3002\u4f46\u662f\u9898\u89e3\u8c8c\u4f3c\u7528\u7684\u662f\u4ec0\u4e48\u56db\u5e73\u65b9\u6570\u7684\u6570\u5b66\u5b9a\u7406\uff0c\u6ca1\u592a\u770b\u61c2\uff09</p> <pre><code>class Solution {\n    int f[10010];\n    void prework(int n) {\n        f[0] = 0;\n        for (int i = 1;i &lt;= n; ++ i) {\n            f[i] = i;\n            for (int j = 1; j*j &lt;= i; ++ j) {\n                f[i] = min(f[i], f[i - j*j] + 1);\n            }\n        }\n    }\npublic:\n    Solution() {\n        prework(10000);\n    }\n    int numSquares(int n) {\n        return f[n];\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#287","title":"287. \u5bfb\u627e\u91cd\u590d\u6570","text":"<p>\u5f88\u5de7\u5999\u7684\u601d\u8def\uff0c\u5c06\u6570\u7ec4\u4e2d\u4fdd\u5b58\u7684\u6570\u503c\u770b\u4f5c\u8fde\u51fa\u7684\u6709\u5411\u8fb9\uff0c\u5b58\u5728\u91cd\u590d\u6570\u5b57\u65f6\u4e00\u5b9a\u5b58\u5728\u73af\u3002\u5feb\u6162\u6307\u9488\u627e\u5230\u73af\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u6162\u6307\u9488\u653e\u5230\u8d77\u70b9\u540c\u6b65\u5f00\u59cb\u8d70\uff0c\u91cd\u5408\u70b9\u5c31\u662f\u5165\u73af\u70b9\u5c31\u662f\u7b54\u6848\uff0c\u53ef\u4ee5\u5217\u516c\u5f0f\u8bc1\u660e\u3002</p> <pre><code>class Solution {\npublic:\n    int findDuplicate(vector&lt;int&gt;&amp; nums) {\n        int x = 0, y = 0;\n        do {\n            x = nums[nums[x]];\n            y = nums[y];\n        } while(x != y);\n        y = 0;\n        while(x != y) {\n            x = nums[x];\n            y = nums[y];\n        }\n        return x;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#300","title":"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","text":"<p>\u6811\u72b6\u6570\u7ec4\u52a0\u901f\u52a8\u6001\u89c4\u5212\uff0c\u52a8\u6001\u4fdd\u5b58\u6743\u503c\u7684\u524d\u7f00\u533a\u95f4\u5185\u6700\u5927\u7684\u6570\u5b57\u662f\u591a\u5c11\u3002</p> <pre><code>#define lowbit(x) (x&amp;(-x))\nclass Solution {\n    int c[2510], n;\npublic:\n    void modify(int x, int y) {\n        for (;x&lt;=n;x+=lowbit(x))\n            c[x] = max(c[x],y);\n    }\n    int query(int x) {\n        int ret = 0;\n        for(;x;x-=lowbit(x))\n            ret = max(ret, c[x]);\n        return ret;\n    }\n    int lengthOfLIS(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; sorted_nums = nums;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        int ans = 0;\n        n = sorted_nums.size() + 2;\n        memset(c, 0, sizeof c);\n        for (int i = 0; i &lt; nums.size(); ++ i) {\n            int x = lower_bound(sorted_nums.begin(), sorted_nums.end(), nums[i]) - sorted_nums.begin() + 2;\n            int fx = query(x-1) + 1;\n            ans = max(ans, fx);\n            modify(x, fx);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#322","title":"322. \u96f6\u94b1\u5151\u6362","text":"<p>\u52a8\u6001\u89c4\u5212\uff0c<code>f[i]</code> \u8868\u793a\u5151\u6362 <code>i</code> \u5143\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf\u3002</p> <pre><code>class Solution {\npublic:\n    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {\n        vector&lt;int&gt; f(amount + 1, 0x3fffffff);\n        f[0] = 0;\n        for (auto coin: coins) {\n            for (int i = coin; i &lt;= amount; ++ i) {\n                f[i] = min(f[i], f[i - coin] + 1);\n            }\n        }\n        return f[amount] == 0x3fffffff ? -1 : f[amount];\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#347-k","title":"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20","text":"<p>\u7528 HashMap \u8ba1\u7b97\u51fa\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u7528\u6876\u6392\u5e8f\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u63a7\u5236\u5230 \\(O(n)\\)</p> <pre><code>class Solution {\n    vector&lt;int&gt; ws[100010];\npublic:\n    vector&lt;int&gt; topKFrequent(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; hash;\n        for (int i = 0; i &lt; nums.size(); ++ i) {\n            if (hash.contains(nums[i])) {\n                hash[nums[i]] += 1;\n            } else {\n                hash[nums[i]] = 1;\n            }\n        }\n        for (int i = 0; i &lt; nums.size(); ++i) ws[i].clear();\n        for (auto it = hash.begin(); it != hash.end(); ++ it) {\n            ws[it-&gt;second].push_back(it-&gt;first);\n        }\n        vector&lt;int&gt; ans;\n        for (int i = nums.size(); i &gt; 0; -- i) {\n            if (ws[i].size() != 0) {\n                for (int x : ws[i]) {\n                    ans.push_back(x);\n                    if (-- k == 0) break;\n                }\n            }\n            if(k == 0) break;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#394","title":"394. \u5b57\u7b26\u4e32\u89e3\u7801","text":"<p>\u4e11\u964b\uff01\u8fd9\u6bb5\u4ee3\u7801\u53ea\u80fd\u7528\u4e11\u964b\u6765\u5f62\u5bb9\uff01</p> <p>\u6211\u600e\u4e48\u4f1a\u5199\u51fa\u5982\u6b64\u4e11\u964b\u7684\u4ee3\u7801\uff1f\u62ec\u53f7\u5e8f\u5217+\u5b57\u7b26\u4e32\u5904\u7406\u771f\u662f\u96be\u641e\u3002</p> <pre><code>class Solution {\npublic:\n    string decodeString(string s) {\n        string ans = \"\";\n        stack&lt;string&gt; charStack;\n        stack&lt;int&gt; numberStack;\n        for (int i = 0; i &lt; s.size(); ++ i) {\n            if (s[i] == ']') {\n                string ret = \"\";\n                while(charStack.top() != \"[\") {\n                    ret = charStack.top() + ret;\n                    charStack.pop();\n                }\n                charStack.pop();\n                for (int i = 0; i &lt; numberStack.top(); ++ i) {\n                    charStack.push(ret);\n                }\n                numberStack.pop();\n            } else if (s[i] &lt;= '9' &amp;&amp; s[i] &gt;= '0') {\n                int x = s[i] - '0';\n                while(s[i+1] &lt;= '9' &amp;&amp; s[i+1] &gt;= '0') x = s[++i] - '0' + 10*x;\n                numberStack.push(x);\n            } else charStack.push(string(1, s[i]));\n        }\n        while(!charStack.empty()) {\n            ans = charStack.top() + ans;\n            charStack.pop();\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#416","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<p>\u80cc\u5305</p> <pre><code>class Solution {\n#define maxn 10000\n    bool f[maxn + 1];\npublic:\n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int sum = 0;\n        memset(f, 0, sizeof f);\n        f[0] = true;\n        for (auto x: nums) sum += x;\n        if (sum % 2 != 0) return false;\n\n        int lim = sum / 2;\n        for (auto x: nums) {\n            for (int i = lim; i &gt;= x; -- i) {\n                f[i] |= f[i - x];\n            }\n        }\n        return f[lim];\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#437-iii","title":"437. \u8def\u5f84\u603b\u548c III","text":"<p>\u9996\u5148\u8ba1\u7b97\u524d\u7f00\u548c\uff0c\u7528\u4e00\u4e2a HashMap \u4fdd\u5b58\u6bcf\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u51fa\u73b0\uff0c\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\u7136\u540e\u901a\u8fc7\u641c\u7d22\u7684\u65b9\u5f0f\u5728 HashMap \u4e2d\u67e5\u627e\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u7aef\u70b9\u7684\u8def\u5f84\u6761\u6570\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>class Solution {\n    unordered_multiset&lt;long long&gt; hash;\n    int ans;\n    void dfs(TreeNode *u, long long sum, const int &amp;targetSum) {\n        if (u == nullptr) return ;\n        sum += u-&gt;val;\n        ans += hash.count(sum - targetSum);\n        hash.insert(sum);\n        dfs(u-&gt;left, sum, targetSum);\n        dfs(u-&gt;right, sum, targetSum);\n        hash.erase(hash.find(sum));\n    }\npublic:\n    int pathSum(TreeNode* root, int targetSum) {\n        ans = 0;\n        hash.insert(0);\n        dfs(root, 0, targetSum);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#438","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u7528\u6876\u6765\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u6ed1\u52a8\u7a97\u53e3\u4e0d\u65ad\u7ef4\u62a4\u7a97\u53e3\u5185\u7684\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\uff0c\u7ef4\u62a4\u5339\u914d\u3002</p> <pre><code>class Solution {\n    int wc[26], nw[26];\n    void addChar(char c, int &amp;matchCount) {\n        int charIdx = c - 'a';\n        nw[charIdx] += 1;\n        if (nw[charIdx] == wc[charIdx]) ++ matchCount;\n        else if(nw[charIdx] == wc[charIdx]+1) -- matchCount;\n        return ;\n    }\n    void delChar(char c, int &amp;matchCount) {\n        int charIdx = c - 'a';\n        nw[charIdx] -= 1;\n        if (nw[charIdx] == wc[charIdx]) ++ matchCount;\n        else if(nw[charIdx] == wc[charIdx]-1) -- matchCount;\n        return ;\n    }\npublic:\n    vector&lt;int&gt; findAnagrams(string s, string p) {\n        vector&lt;int&gt; ans;\n        if(s.size() &lt; p.size()) return ans;\n        memset(wc, 0, sizeof wc);\n        for (int i = 0; i &lt; p.size(); ++ i){\n            wc[p[i] - 'a'] += 1;\n        }\n        int matchCount = 0;\n        for (int j = 0; j &lt; 26; ++ j) {\n            nw[j] = 0;\n            if (nw[j] == wc[j]) ++ matchCount;\n        }\n        for (int i = 0; i &lt; p.size(); ++ i) addChar(s[i], matchCount);\n        if (matchCount == 26) ans.push_back(0);\n        for (int i = p.size(); i &lt; s.size(); ++ i) {\n            addChar(s[i], matchCount);\n            delChar(s[i-p.size()], matchCount);\n            if (matchCount == 26) ans.push_back(i-p.size()+1);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#543","title":"543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84","text":"<p>\u901a\u8fc7 dfs \u8ba1\u7b97\u51fa\u6bcf\u4e00\u4e2a\u70b9\u5411\u4e0b\u5ef6\u4f38\u7684\u6700\u5927\u957f\u5ea6\u3002</p> <pre><code>class Solution {\n    int dfs(TreeNode *root, int &amp;ans) {\n        if (root == nullptr) return -1;\n        int left = dfs(root-&gt;left, ans) + 1;\n        int right = dfs(root-&gt;right, ans) + 1;\n        ans = max(ans, left + right);\n        return max(left, right);\n    }\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        int ans = 0;\n        dfs(root, ans);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#560-k","title":"560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4","text":"<p>\u6570\u7ec4\u548c\u5c31\u662f\u524d\u7f00\u548c\u76f8\u51cf\uff0c\u7528 hashmap \u7ef4\u62a4\u67d0\u4e2a\u524d\u7f00\u6570\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; hash; hash.clear();\n        int sum = 0, ans = 0;\n        hash[sum] = 1;\n        for (auto x: nums) {\n            sum += x;\n            ans += hash[sum - k];\n            hash[sum] += 1;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#739","title":"739. \u6bcf\u65e5\u6e29\u5ea6","text":"<p>\u5012\u5e8f\u679a\u4e3e\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u4e0b\u964d\u7684\u5355\u8c03\u6808\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5feb\u901f\u5bf9\u6bcf\u4e2a\u6570\u5b57\u90fd\u5feb\u901f\u627e\u5230\u4e4b\u524d\u51fa\u73b0\u7684\u6570\u5b57\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u8be5\u6570\u5b57\u7684\u6570\u5b57\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; temperatures) {\n        stack&lt;int&gt; minStack;\n        vector&lt;int&gt; ans(temperatures.size());\n        for (int i = temperatures.size()-1; i &gt;= 0; -- i) {\n            while (!minStack.empty() &amp;&amp;\n            temperatures[minStack.top()] &lt;= temperatures[i]) {\n                minStack.pop();\n            }\n            if (!minStack.empty()) ans[i] = minStack.top() - i;\n            minStack.push(i);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#763","title":"763. \u5212\u5206\u5b57\u6bcd\u533a\u95f4","text":"<p>\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u5b57\u6bcd\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u76f8\u5f53\u4e8e\u533a\u95f4\u8986\u76d6\u95ee\u9898\u4e86\uff0c\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u679a\u4e3e\u5e76\u7ef4\u62a4\u53f3\u7aef\u70b9\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; partitionLabels(string s) {\n        static int last[26];\n        memset(last, -1, sizeof last);\n        vector&lt;int&gt; end(s.size());\n        for (int i = s.size() - 1; i &gt;= 0; -- i) {\n            if (last[s[i] - 'a'] == -1) last[s[i] - 'a'] = i;\n            end[i] = last[s[i] - 'a'];\n        }\n        vector&lt;int&gt; split;\n        int ans = 0, r = -1, lastIdx = 0;\n        for (int i = 0;i &lt; s.size(); ++ i) {\n            if (r &lt; i) {\n                ++ ans;\n                int len = i - lastIdx;\n                if (len != 0) split.push_back(len);\n                lastIdx = i;\n                r = end[i];\n            } else r = max(r, end[i]);\n        }\n        split.push_back(s.size() - lastIdx);\n        return split;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#994","title":"994. \u8150\u70c2\u7684\u6a58\u5b50","text":"<p>\u7528\u961f\u5217\u4fdd\u5b58\u5f85\u641c\u7d22\u7684\u6a58\u5b50\u4f4d\u7f6e\uff0cBFS\u3002</p> <pre><code>class Solution {\npublic:\n    int orangesRotting(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        static int dx[] = {0, 0, 1, -1};\n        static int dy[] = {1, -1, 0, 0};\n        queue&lt; pair&lt;int,int&gt; &gt; q;\n        int freshNumber = 0;\n        for (int i = 0 ; i &lt; grid.size(); ++ i) {\n            for(int j = 0;j &lt; grid[i].size(); ++ j) {\n                if (grid[i][j] == 2) q.push(make_pair(i, j));\n                else if(grid[i][j] == 1) ++ freshNumber;\n            }\n        }\n        q.push(make_pair(-1, -1));\n        int timeCounter = 0;\n        while(!q.empty()) {\n            int x = q.front().first;\n            int y = q.front().second;\n            q.pop();\n            if (x == -1 &amp;&amp; y == -1) {\n                if (q.empty()) break;\n                ++ timeCounter;\n                q.push(make_pair(-1, -1));\n                continue;\n            }\n            for (int k = 0; k &lt; 4; ++ k) {\n                int nx = x + dx[k];\n                int ny = y + dy[k];\n                if (nx &lt; 0 || nx &gt;= grid.size() || ny &lt; 0 || ny &gt;= grid[x].size())\n                    continue;\n                if (grid[nx][ny] != 1) continue;\n                -- freshNumber;\n                grid[nx][ny] = 2;\n                q.push(make_pair(nx, ny));\n            }\n        }\n        return freshNumber == 0 ? timeCounter : -1;\n    }\n};\n</code></pre>"},{"location":"interview/leetcode100/#1143","title":"1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"\\[ f[i][j] = \\max\\{f[i-1][j], f[i][j-1], [s_i == s_j](f[i-1][j-1]+1)\\} \\] <pre><code>class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        vector&lt;vector&lt;int&gt;&gt; f(text1.size()+1, vector&lt;int&gt;(text2.size()+1));\n        for (int i = 1; i &lt;= text1.size(); ++ i) {\n            for (int j = 1; j &lt;= text2.size(); ++ j) {\n                if (text1[i-1] == text2[j-1]) f[i][j] = f[i-1][j-1] + 1;\n                else f[i][j] = max(f[i-1][j], f[i][j-1]);\n            }\n        }\n        return f[text1.size()][text2.size()];\n    }\n};\n</code></pre>"},{"location":"interview/resnet/","title":"ResNet \u9762\u8bd5\u8d44\u6599\u6574\u7406","text":""},{"location":"interview/resnet/#_1","title":"\u7b80\u4ecb","text":"<p>\u300aDeep Residual Learning for Image Recognition\u300b</p> <p>Deep Residual Network, \u6df1\u5ea6\u6b8b\u5dee\u795e\u7ecf\u7f51\u7edc\uff0c\u7b80\u79f0 ResNet\u3002\u901a\u8fc7\u6b8b\u5dee\u5b66\u4e60\u4f7f\u8bad\u7ec3\u66f4\u6df1\u7684\u7f51\u7edc\u6210\u4e3a\u53ef\u80fd\u3002ResNet \u6709\u5f88\u591a\u79cd\u4e0d\u540c\u6df1\u5ea6\u7684\u7f51\u7edc\uff0cResNet18, ResNet34, ResNet50, ResNet101, ResNet152 \u7b49\u3002</p>"},{"location":"interview/resnet/#_2","title":"\u7f51\u7edc\u67b6\u6784","text":"<p>\u7ed3\u6784\u7ec4\u6210\uff1a</p> <ol> <li>\u521d\u59cb\u5377\u79ef\u5c42\uff1a\u521d\u6b65\u8fdb\u884c\u7279\u5f81\u63d0\u53d6</li> <li>\u521d\u59cb\u5377\u79ef\u5c42 7x7\uff0c\u6b65\u957f 2\uff0cpadding 3\uff0c\u5c06\u7ef4\u5ea6\u51cf\u534a\u3002\u540e\u9762\u8ddf BN \u5c42\u548c ReLU \u5c42\u3002</li> <li>\u8fdb\u884c\u56fe\u50cf\u7279\u5f81\u8fdb\u884c\u57fa\u7840\u7684\u63d0\u53d6</li> <li>\u6b8b\u5dee\u5757\u7ec4\uff1a\u5305\u542b\u591a\u4e2a\u6b8b\u5dee\u5355\u5143</li> <li>\u6bcf\u4e2a\u6b8b\u5dee\u5757\u53ef\u4ee5\u4ece\u524d\u4e00\u7ec4\u63d0\u53d6\u7684\u7279\u5f81\u4e2d\u63d0\u53d6\u66f4\u9ad8\u7ea7\u7684\u7279\u5f81</li> <li>\u901a\u8fc7\u6b8b\u5dee\u8fde\u63a5\uff0c\u6bcf\u4e2a\u6b8b\u5dee\u5757\u80fd\u5b66\u4e60\u975e\u7ebf\u5f62\u6620\u5c04</li> <li>Skip Connection \u53ef\u4ee5\u66f4\u597d\u5730\u4f20\u9012\u68af\u5ea6</li> <li>\u5168\u5c40\u5e73\u5747\u6c60\u5316\uff1a\u51cf\u5c11\u7ef4\u5ea6</li> <li>\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c06\u6bcf\u4e2a\u7279\u5f81\u56fe\u7f29\u51cf\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u503c\uff0c\u663e\u8457\u51cf\u5c11\u4e86\u8ba1\u7b97\u91cf</li> <li>\u9632\u6b62\u8fc7\u62df\u5408\uff0c\u63d0\u5347\u6cdb\u5316\u80fd\u529b\u3002\u51cf\u5c11\u53c2\u6570\u6709\u52a9\u4e8e\u9632\u6b62\u6a21\u578b\u8fc7\u62df\u5408</li> <li>\u5168\u94fe\u63a5\u5c42\uff1a\u53ef\u4ee5\u7528\u4e8e\u5206\u7c7b\u6216\u5176\u4ed6\u4efb\u52a1</li> <li>\u53ef\u4ee5\u6839\u636e\u4efb\u52a1\u9700\u6c42\u6839\u636e\u524d\u5c42\u7279\u5f81\u8fdb\u884c\u5206\u7c7b\u6216\u56de\u5f52</li> <li>\u5b8c\u5168\u6574\u5408\u4e4b\u524d\u5404\u5c42\u7684\u4fe1\u606f\uff0c\u8f93\u51fa\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u7279\u5f81\u5411\u91cf\u3002</li> </ol>"},{"location":"interview/resnet/#_3","title":"\u6b8b\u5dee\u5355\u5143","text":"<p>\u4f20\u7edf\u7684 CNN \u4e2d\uff0c\u6bcf\u4e2a\u5377\u79ef\u5c42\u5b66\u4e60\u7684\u90fd\u662f\u8f93\u5165\u4e0e\u8f93\u51fa\u4e4b\u95f4\u7684\u6620\u5c04\u3002\u6b8b\u5dee\u5757\u5219\u91c7\u7528\u4e86\u4e0d\u540c\u7684\u7b56\u7565\uff0c\u5c1d\u8bd5\u5b66\u4e60\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u6b8b\u5dee\u6620\u5c04\u3002</p>"},{"location":"interview/resnet/#_4","title":"\u95ee\u7b54","text":""},{"location":"interview/resnet/#_5","title":"\u4e3a\u4ec0\u4e48\u6709\u6548","text":"<p>\u901a\u8fc7 BN \u548c\u5408\u7406\u7684\u521d\u59cb\u5316\u7ed3\u5c40\u4e86\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8\u7684\u95ee\u9898\u3002\u6b8b\u5dee\u8fde\u63a5\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u5b66\u5230\u7c7b\u6052\u7b49\u6620\u5c04\uff0c\u8fd9\u4f7f ResNet \u7684\u5b66\u4e60\u4efb\u52a1\u66f4\u7b80\u5355\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u89e3\u51b3\u68af\u5ea6\u5f25\u6563\u7684\u95ee\u9898\u3002</p>"},{"location":"interview/resnet/#resnet152","title":"ResNet152 \u4e2d\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\u8bbe\u8ba1","text":"<p>\u5728\u66f4\u6df1\u7684 ResNet \u4e2d\uff0c\u4f4d\u4e86\u51cf\u5c11\u8ba1\u7b97\u91cf\u901a\u5e38\u5148\u4f7f\u7528 1x1 \u7684\u5377\u79ef\u6838\u8fdb\u884c\u964d\u7ef4\uff0c\u7136\u540e\u518d\u8fdb\u884c 3x3 \u5377\u79ef\uff0c\u6700\u540e\u518d\u901a\u8fc7 1x1 \u5377\u79ef\u6062\u590d\u7ef4\u5ea6\u3002</p>"},{"location":"interview/resnet/#resnet_1","title":"\u8bf7\u7b80\u8981\u4ecb\u7ecd ResNet","text":"<p>ResNet \u901a\u8fc7\u5c06\u591a\u4e2a\u795e\u7ecf\u7f51\u7edc\u7684\u5c42\u805a\u5408\u6210\u4e00\u4e2a\u5757\uff0c\u7136\u540e\u518d\u5757\u7684\u4e00\u4fa7\u52a0\u5165\u6052\u7b49\u6620\u5c04\uff0c\u4f7f\u8fd9\u4e2a\u5757\u4ece\u539f\u672c\u7684 \\(F(x)\\) \u53d8\u6210\u4e86 \\(F(x)+x\\)\uff0c\u4ece\u800c\u89e3\u51b3\u4e86\u795e\u7ecf\u7f51\u7edc\u7684\u9000\u5316\u95ee\u9898\u3002</p> <p>ResNet \u5f15\u5165\u8df3\u8dc3\u94fe\u63a5\uff0c\u4f7f\u5f97\u68af\u5ea6\u80fd\u591f\u66f4\u597d\u5730\u56de\u4f20\uff0c\u4ece\u800c\u7f13\u89e3\u4e86\u68af\u5ea6\u6d88\u5931\u4e0e\u68af\u5ea6\u7206\u70b8\u95ee\u9898\u3002</p> <p>\u4e0a\u9762\u8fd9\u4e2a\u63cf\u8ff0\u5b9e\u9645\u4e0a\u4e0d\u51c6\u786e\uff0c\u8bba\u6587\u4e2d\u660e\u786e\u8bf4\u660e\u4f18\u5316\u56f0\u96be\u4e0d\u662f\u7531\u4e8e\u68af\u5ea6\u6d88\u5931\u800c\u5bfc\u81f4\u7684\u3002</p>"},{"location":"interview/resnet/#relu1","title":"\u4ec0\u4e48\u662f\u68af\u5ea6\u6d88\u5931\uff1f\u4f20\u7edf\u7684\u6fc0\u6d3b\u51fd\u6570\u5728\u4e24\u7aef\u4f1a\u8fdb\u5165\u68af\u5ea6\u9971\u548c\u533a\uff0c\u4ece\u800c\u5bfc\u81f4\u68af\u5ea6\u6d88\u5931\u3002\u4f46\u73b0\u4ee3\u6fc0\u6d3b\u51fd\u6570\u6bd4\u5982ReLU\uff0c\u4ed6\u5728\u8f93\u5165\u4e3a\u6b63\u65f6\u6052\u4e3a1\uff0c\u90a3\u4e48\u5e94\u5f53\u5c31\u6ca1\u6709\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u624d\u5bf9\u554a\uff1f","text":"<p>ReLU \u5728\u8f93\u5165\u4e3a\u8d1f\u6570\u65f6\u6052\u4e3a 0\uff0c\u56e0\u6b64\u5bf9\u68af\u5ea6\u6d88\u5931\u7684\u6548\u679c\u6709\u9650\u3002ResNet \u7684\u68af\u5ea6\u6d88\u5931\u548c\u7206\u70b8\u7684\u95ee\u9898\u4e3b\u8981\u662f\u901a\u8fc7 BN \u548c\u521d\u59cb\u5316\u6765\u89e3\u51b3\u7684\u3002</p>"},{"location":"interview/resnet/#batchnorm-layernorm","title":"Batchnorm \u4e0e LayerNorm","text":"<p>\u4f5c\u7528\u90fd\u662f\u5c06\u8f93\u5165\u7684\u6570\u636e\u5f52\u4e00\u5316\uff0c\u5747\u503c\u53d8\u4e3a \\(0\\)\uff0c\u65b9\u5dee\u53d8\u4e3a \\(1\\)\u3002</p> <p>Batchnorm \u662f\u5bf9\u6bcf\u4e2a batch \u7684\u67d0\u4e00\u4e2a\u7ef4\u5ea6\u7ec4\u5408\u6210\u7684\u7279\u5f81\u8fdb\u884c\u5f52\u4e00\u5316\uff0cLayerNorm \u662f\u5bf9\u6bcf\u4e2a\u6837\u672c\u7684\u7279\u5f81\u8fdb\u884c\u5f52\u4e00\u5316\u3002Transformers \u4e2d\u4f7f\u7528 LayerNorm\uff0c\u56e0\u4e3a\u7406\u89e3\u4e0a\u6765\u8bf4\u4e0d\u540c Batch \u6837\u672c\u4e2d\u7684\u67d0\u4e2a\u7279\u5f81\u4e0d\u5b58\u5728\u76f8\u5173\u6027\uff0c\u800c\u540c\u4e00\u4e2a\u6837\u672c\u4e2d\u7684\u7279\u5f81\u4e4b\u95f4\u5b58\u5728\u76f8\u5173\u6027\u3002\u5927\u90e8\u5206\u6837\u672c embedding \u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u5c11\u90e8\u5206\u662f\u6709\u610f\u4e49\u7684\uff0c\u5982\u679c\u4f7f\u7528 Batchnorm \u53ef\u80fd\u53cd\u800c\u4f1a\u7834\u574f\u8fd9\u4e9b\u6709\u610f\u4e49\u7684 embedding\u3002</p> <p></p>"},{"location":"interview/resnet/#batchnorm","title":"Batchnorm \u6709\u54ea\u4e9b\u53c2\u6570","text":"<p>\u53ef\u5b66\u4e60\u53c2\u6570\uff1a</p> <ul> <li>\\(\\gamma\\)\uff1a\u7f29\u653e\u56e0\u5b50\uff0c\u63a7\u5236\u6807\u51c6\u5316\u540e\u7684\u6570\u636e scale\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6bcf\u4e00\u4e2a\u7279\u5f81\u901a\u9053\u90fd\u6709\u4e00\u4e2a\u53ef\u5b66\u4e60\u7684\u7f29\u653e\u56e0\u5b50\u3002</li> <li>\\(\\beta\\)\uff1a\u504f\u79fb\u56e0\u5b50\uff0c\u63a7\u5236\u6807\u51c6\u5316\u540e\u7684\u6570\u636e shift\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6bcf\u4e00\u4e2a\u7279\u5f81\u901a\u9053\u90fd\u6709\u4e00\u4e2a\u53ef\u5b66\u4e60\u7684\u504f\u79fb\u56e0\u5b50\u3002</li> </ul> <p>\u4e0d\u53ef\u5b66\u4e60\u53c2\u6570\uff1a\u5168\u5c40\u5747\u503c\u548c\u5168\u5c40\u65b9\u5dee\u3002</p>"},{"location":"interview/resnet/#batchnormbatchnorm","title":"\u4ec0\u4e48\u662fBatchNorm\uff1fBatchNorm\u5982\u4f55\u8ba1\u7b97\u5e76\u8d77\u5230\u4e86\u4ec0\u4e48\u6837\u7684\u6548\u679c\uff1f","text":"<p>BatchNorm \u53ef\u4ee5\u8ba9\u67d0\u4e00\u7ef4\u5ea6\u7684\u6570\u636e\u5728 Batch \u5185\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u8fd9\u79cd\u64cd\u4f5c\u4e3a\u6570\u636e\u5f15\u5165\u4e86\u8f83\u4e3a\u968f\u673a\u7684\u6270\u52a8\uff0c\u53ef\u4ee5\u8d77\u5230\u6b63\u5219\u5316\u7684\u6548\u679c\u3002\u4e5f\u6709\u7684\u89e3\u91ca\u8bf4 BatchNorm \u901a\u8fc7\u4f7f\u635f\u5931\u7684landscape\u66f4\u52a0\u5e73\u6ed1\u964d\u4f4e\u4e86\u4f18\u5316\u7684\u96be\u5ea6\u3002</p>"},{"location":"interview/resnet/#batchnorm_1","title":"BatchNorm \u7684\u516c\u5f0f\u53ca\u4ee3\u7801\u5b9e\u73b0","text":"\\[ \\mu_{\\mathcal{B}} = \\frac{1}{|\\mathcal{B}|}\\sum_{x \\in \\mathcal{B}} x , \\sigma^2_{\\mathcal{B}} = \\frac{1}{|\\mathcal{B}|}\\sum_{x \\ in \\mathcal{B}}(x - \\mu)^2 \\\\ \\hat{x} = \\frac{x - \\mu_{\\mathcal{B}}}{\\sqrt{\\sigma^2_{\\mathcal{B}} + \\epsilon}} \\\\ y_i = \\gamma \\hat{x}_i + \\beta \\] <pre><code>def Batchnorm_simple_for_train(x, gamma, beta, bn_param):\n\"\"\"\nparam:x    : \u8f93\u5165\u6570\u636e\uff0c\u8bbeshape(B,L)\nparam:gama : \u7f29\u653e\u56e0\u5b50  \u03b3\nparam:beta : \u5e73\u79fb\u56e0\u5b50  \u03b2\nparam:bn_param   : batchnorm\u6240\u9700\u8981\u7684\u4e00\u4e9b\u53c2\u6570\n    eps      : \u63a5\u8fd10\u7684\u6570\uff0c\u9632\u6b62\u5206\u6bcd\u51fa\u73b00\n    momentum : \u52a8\u91cf\u53c2\u6570\uff0c\u4e00\u822c\u4e3a0.9\uff0c 0.99\uff0c 0.999\n    running_mean \uff1a\u6ed1\u52a8\u5e73\u5747\u7684\u65b9\u5f0f\u8ba1\u7b97\u65b0\u7684\u5747\u503c\uff0c\u8bad\u7ec3\u65f6\u8ba1\u7b97\uff0c\u4e3a\u6d4b\u8bd5\u6570\u636e\u505a\u51c6\u5907\n    running_var  : \u6ed1\u52a8\u5e73\u5747\u7684\u65b9\u5f0f\u8ba1\u7b97\u65b0\u7684\u65b9\u5dee\uff0c\u8bad\u7ec3\u65f6\u8ba1\u7b97\uff0c\u4e3a\u6d4b\u8bd5\u6570\u636e\u505a\u51c6\u5907\n\"\"\"\n    running_mean = bn_param['running_mean']  #shape = [B]\n    running_var = bn_param['running_var']    #shape = [B]\n    results = 0. # \u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\n\n    x_mean=x.mean(axis=0)  # \u8ba1\u7b97x\u7684\u5747\u503c\n    x_var=x.var(axis=0)    # \u8ba1\u7b97\u65b9\u5dee\n    x_normalized=(x-x_mean)/np.sqrt(x_var+eps)       # \u5f52\u4e00\u5316\n    results = gamma * x_normalized + beta            # \u7f29\u653e\u5e73\u79fb\n\n    running_mean = momentum * running_mean + (1 - momentum) * x_mean\n    running_var = momentum * running_var + (1 - momentum) * x_var\n\n    #\u8bb0\u5f55\u65b0\u7684\u503c\n    bn_param['running_mean'] = running_mean\n    bn_param['running_var'] = running_var\n\n    return results , bn_param\n</code></pre>"},{"location":"interview/resnet/#xavierkaiming","title":"\u521d\u59cb\u5316\u662f\u5982\u4f55\u7f13\u89e3\u68af\u5ea6\u6d88\u5931/\u68af\u5ea6\u7206\u70b8\u95ee\u9898\u7684\u5462\uff1f\u4e3a\u4ec0\u4e48\u6709\\(Xavier\\)\u3001\\(Kaiming\\)\u8fd9\u6837\u7684\u521d\u59cb\u5316\u5462\uff1f","text":"<p>Xavier: bias\u521d\u59cb\u5316\u4e3a 0\uff0c\u4e3a Normalize \u540e\u7684\u53c2\u6570\u4e58\u4ee5\u4e00\u4e2a rescale \u7cfb\u6570\uff1a\\(1/\\sqrt n\\), n \u662f\u8f93\u5165\u53c2\u6570\u7684\u4e2a\u6570</p> <p>Kaiming: \u56e0\u4e3a relu \u4f1a\u629b\u5f03\u6389\u5c0f\u4e8e 0 \u7684\u503c\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5747\u503c\u4e3a 0 \u7684 data \u6765\u8bf4\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u780d\u6389\u4e86\u4e00\u534a\u7684\u503c\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5747\u503c\u5c31\u4f1a\u53d8\u5927\uff0c\u524d\u9762 Xavier \u521d\u59cb\u5316\u516c\u5f0f\u4e2d E(x) = mean = 0 \u7684\u60c5\u51b5\u5c31\u4e0d\u6210\u7acb\u4e86\u3002\u6839\u636e\u65b0\u516c\u5f0f\u7684\u63a8\u5bfc\uff0c\u6700\u7ec8\u5f97\u5230\u65b0\u7684 rescale \u7cfb\u6570\uff1a\\(1 / \\sqrt{2/n}\\)\u3002</p> <p>\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u7f51\u7edc\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u5747\u503c\u4e3a \\(0\\) \u65b9\u5dee\u4e3a \\(1\\) \u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03 \u2014\u2014 \u4e0e\u8f93\u5165\u4fdd\u6301\u4e00\u81f4\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ea\u6709\u5377\u79ef\u6216\u8005\u5168\u8fde\u63a5\u5c42\u6784\u6210\u7684\u7ebf\u6027\u7684\u795e\u7ecf\u7f51\u7edc\u6765\u8bf4\uff0c\u5e38\u89c4\u505a\u6cd5\u662f\u4f7f\u7528 Xavier \u6765\u5f52\u4e00\u5316\u6743\u91cd\u4f7f\u5f97\u5176\u8f93\u51fa\u6ee1\u8db3\u6b63\u6001\u5206\u5e03\u3002\u7136\u800c\uff0c\u8fd9\u4e2a\u505a\u6cd5\u5728\u5f15\u5165\u4e86\u975e\u7ebf\u6027\u53d8\u6362\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\u6548\u679c\u6709\u9650\uff0c\u5728 ReLU \u6fc0\u6d3b\u5c42\u51fa\u73b0\u65f6\u66f4\u662f\u5982\u6b64\uff0c\u6240\u4ee5\u6709\u4e86 Kaiming\u3002</p>"},{"location":"interview/resnet/#_6","title":"\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>ResNet\u9762\u8bd5\u7b80\u4ecb</li> <li>\u57fa\u7840 | batchnorm\u539f\u7406\u53ca\u4ee3\u7801\u8be6\u89e3</li> <li>\u4e00\u6587\u641e\u61c2\u6df1\u5ea6\u7f51\u7edc\u521d\u59cb\u5316\uff08Xavier and Kaiming initialization\uff09</li> </ul>"},{"location":"interview/transformer/","title":"Transformer \u9762\u8bd5\u8d44\u6599\u6574\u7406","text":""},{"location":"interview/transformer/#_1","title":"\u7b80\u4ecb","text":"<p>\u300aAttention is All You Need\u300b</p> <p></p>"},{"location":"interview/transformer/#_2","title":"\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6a21\u578b","text":"<p>Transformer \u7531\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7ec4\u6210\uff0c\u7f16\u7801\u5668\u5185\u90e8\u7531\u4e00\u4e2a\u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\u548c\u4e00\u4e2a\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u7ec4\u6210\uff0c\u89e3\u7801\u5668\u7531\u4e00\u4e2a Masked \u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\u3001\u4e00\u4e2a\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u548c\u4e00\u4e2a\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u7ec4\u6210\u3002\u5728 Transformer \u4e2d\u5229\u7528\u4e86 Resnet \u7684\u6b8b\u5dee\u8fde\u63a5\uff0c\u4f7f\u6a21\u578b\u66f4\u5bb9\u6613\u8bad\u7ec3\u5e76\u4e14\u80fd\u591f\u8bad\u7ec3\u66f4\u6df1\u7684\u7f51\u7edc\uff0c\u540c\u65f6\u4e5f\u7f13\u89e3\u4e86\u68af\u5ea6\u9707\u8361\u3001\u7f51\u7edc\u9000\u5316\u7b49\u95ee\u9898\u3002</p> <p>Encoder \u4e2d\uff0cSelf-Attention \u7684\u4f5c\u7528\u662f\u83b7\u53d6\u4e0a\u4e0b\u6587\u4fe1\u606f\u8fd9\u4e00\u5c42\u7684\u53c2\u6570\u5e76\u4e0d\u591a\uff0c\u4e3b\u8981\u662f\u878d\u5408\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\u901a\u8fc7\u53c2\u6570\u91cf\u8f83\u5927\u7684\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u50a8\u5b58\u77e5\u8bc6\u3002</p> <p>Decoder \u7684\u81ea\u6ce8\u610f\u529b\u673a\u5236\u90e8\u5206\u53ef\u4ee5\u7528\u4e8e\u4fe1\u606f\u878d\u5408\uff0c\u5728\u591a\u6a21\u5757\u3001\u673a\u5668\u7ffb\u8bd1\u7b49\u573a\u666f\u6709\u6240\u5e94\u7528\u3002\u878d\u5408\u65f6 Encoder \u5411 decoder \u7684\u8fd9\u4e00\u5c42\u63d0\u4f9b \\(K\\) \u548c \\(V\\)\uff0cdecoder \u7684\u8fd9\u4e00\u5c42\u63d0\u4f9b \\(Q\\)\u3002</p> <p>\u56e0\u4e3a Attention \u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u8ddf\u8f93\u5165\u7684 Token \u76f8\u5173\u662f\u8f93\u5165\u7684\u5e73\u65b9\u7ea7\u522b\uff08\u6240\u4ee5\u8bb8\u591a\u5927\u6a21\u578b\u90fd\u9650\u5236\u8f93\u5165\u7684\u6700\u957f Token\uff09\uff0c\u6240\u4ee5\u5728\u63a8\u7406\u65f6\u53ef\u4ee5\u901a\u8fc7 KV-cache \u8fdb\u884c\u4f18\u5316\uff1a\u6bcf\u6b21 decoder \u5c06\u4e4b\u524d\u7684 \\(Q\\) \u548c \\(K\\) \u7684\u70b9\u4e58\u7ed3\u679c\u7f13\u5b58\u8d77\u6765\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002</p>"},{"location":"interview/transformer/#ffn","title":"\u4ecb\u7ecd\u4e00\u4e0b FFN \u8ba1\u7b97\u516c\u5f0f","text":"<p>FFN\u7531\u4e24\u4e2a\u5168\u8fde\u63a5\u5c42\uff08\u5373\u524d\u9988\u795e\u7ecf\u7f51\u7edc\uff09\u548c\u4e00\u4e2a\u6fc0\u6d3b\u51fd\u6570\u7ec4\u6210\u3002\u4e0b\u9762\u662fFFN\u5757\u7684\u8ba1\u7b97\u516c\u5f0f\uff1a</p> \\[ \\operatorname{FFN}(\\boldsymbol{x})=\\operatorname{Relu}\\left(\\boldsymbol{x} \\boldsymbol{W}_{1}+\\boldsymbol{b}_{1}\\right) \\boldsymbol{W}_{2}+\\boldsymbol{b}_{2} \\] <p>\u5047\u8bbe\u8f93\u5165\u662f\u4e00\u4e2a\u5411\u91cf \\(x\\)\uff0cFFN\u5757\u7684\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u7b2c\u4e00\u5c42\u5168\u8fde\u63a5\u5c42\uff08\u7ebf\u6027\u53d8\u6362\uff09\uff1a\\(z = xW1 + b1\\) \u5176\u4e2d\uff0cW1 \u662f\u7b2c\u4e00\u5c42\u5168\u8fde\u63a5\u5c42\u7684\u6743\u91cd\u77e9\u9635\uff0cb1 \u662f\u504f\u7f6e\u5411\u91cf\u3002</li> <li>\u6fc0\u6d3b\u51fd\u6570\uff1a\\(a = g(z)\\) \u5176\u4e2d\uff0cg() \u662f\u6fc0\u6d3b\u51fd\u6570\uff0c\u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570\u6709ReLU\uff08Rectified Linear Unit\uff09\u7b49\u3002</li> <li>\u7b2c\u4e8c\u5c42\u5168\u8fde\u63a5\u5c42\uff08\u7ebf\u6027\u53d8\u6362\uff09\uff1a\\(y = aW2 + b2\\) \u5176\u4e2d\uff0cW2 \u662f\u7b2c\u4e8c\u5c42\u5168\u8fde\u63a5\u5c42\u7684\u6743\u91cd\u77e9\u9635\uff0cb2 \u662f\u504f\u7f6e\u5411\u91cf\u3002</li> </ol> <p>\u589e\u5927\u524d\u9988\u5b50\u5c42\u9690\u72b6\u6001\u7684\u7ef4\u5ea6\u6709\u5229\u4e8e\u63d0\u5347\u6700\u7ec8\u7ffb\u8bd1\u7ed3\u679c\u7684\u8d28\u91cf\uff0c\u56e0\u6b64\uff0c\u524d\u9988\u5b50\u5c42\u9690\u72b6\u6001\u7684\u7ef4\u5ea6\u4e00\u822c\u6bd4\u81ea\u6ce8\u610f\u529b\u5b50\u5c42\u8981\u5927\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u516c\u5f0f\u4e2d\u7684 W1\u3001b1\u3001W2\u3001b2 \u662fFFN\u5757\u7684\u53ef\u5b66\u4e60\u53c2\u6570\uff0c\u5b83\u4eec\u4f1a\u901a\u8fc7\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u5b66\u4e60\u548c\u66f4\u65b0\u3002</p>"},{"location":"interview/transformer/#_3","title":"\u95ee\u7b54","text":""},{"location":"interview/transformer/#nrom-layernorm-batchnorm","title":"\u4e3a\u4ec0\u4e48 Nrom \u9009\u62e9 LayerNorm \u800c\u4e0d\u662f BatchNorm\uff1f","text":"<ol> <li> <p>BN \u662f\u5728\u4e0d\u540c Batch \u4e4b\u95f4\u8ba1\u7b97\u7684\u3002\u5728 NLP \u4efb\u52a1\u4e2d\uff0c\u4e0d\u540c\u5e8f\u5217\u7684\u957f\u5ea6\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5 BatchNorm \u4f1a\u9047\u5230\u5bf9\u9f50\u7684\u95ee\u9898\u3002LN \u662f\u5728\u4e00\u4e2a Batch \u5185\u8ba1\u7b97\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u3002</p> </li> <li> <p>BN \u5728 NLP \u7684\u4efb\u52a1\u4e2d\u6bd4\u8f83\u5f31\uff0c\u56e0\u4e3a NLP \u4e2d\u540c\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8bcd\u7684\u4f5c\u7528\u53ef\u80fd\u5b8c\u5168\u4e0d\u4e00\u6837\uff0cBN \u5c06\u8fd9\u4e9b\u4f5c\u7528\u4e0d\u4e00\u6837\u7684\u8bcd\u7684\u4fe1\u606f\u6df7\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u4fe1\u606f\u7684\u4e22\u5931\u3002</p> </li> </ol>"},{"location":"interview/transformer/#dk","title":"\u4e3a\u4ec0\u4e48\u8981\u9664\u4ee5\u6839\u53f7 dk","text":"<p>\u8bba\u6587\u4e2d\u7684\u89e3\u91ca\u662f\uff1a\u5728\u8ba1\u7b97 Attention \u65f6\uff0c\u8ba1\u7b97\u7684\u662f \\(Q \\cdot K^T\\)\uff0c\u5982\u679c\u4e0d\u9664\u4ee5 \\(\\sqrt {d_k}\\)\uff0c\u90a3\u4e48 \\(Q \\cdot K^T\\) \u7684\u503c\u4f1a\u5f88\u5927\uff0c\u5bfc\u81f4 Softmax \u540e\u7684\u503c\u5f88\u5c0f\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u68af\u5ea6\u6d88\u5931\u3002\u901a\u8fc7\u8fd9\u6837\u7684 Scale \u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u4e3a\u4ec0\u4e48\u662f \\(\\sqrt {d_k}\\) \u5462\uff1f\u4ece\u516c\u5f0f\u6765\u89e3\u91ca\uff0c\u5047\u8bbe\u5411\u91cf \\(q\\) \u548c \\(k\\) \u7684\u5404\u4e2a\u5206\u91cf\u662f\u4e92\u76f8\u72ec\u7acb\u7684\u968f\u673a\u53d8\u91cf\uff0c\u5747\u503c\u662f \\(0\\)\uff0c\u65b9\u5dee\u662f \\(1\\)\uff0c\u90a3\u4e48\u70b9\u79ef \\(q\\cdot k\\) \u7684\u5747\u503c\u662f \\(0\\)\uff0c\u65b9\u5dee\u662f \\(d_k\\)\u3002</p> <p>\u5df2\u77e5 \\(E(q_i) = E(k_i) = 0, Q(q_i) = Q(k_i) = 1\\) \u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b:</p> \\[ \\begin{align} E(q_ik_i) &amp;= E(q_i)\\cdot E(k_i) = 0 \\\\ Var(q_ik_i) &amp;= Var(q_i) \\cdot Var(k_i) + Var(q_i)\\cdot E(k_i)^2 + Var(k_i)\\cdot E(q_i)^2\\\\             &amp;= 1 \\times 1 + 1 \\times 0 + 1 \\times 0 = 1 \\\\ Var(q\\cdot k) &amp;= \\sum_{i=1}^{d_k} Var(q_ik_i) = d_k \\end{align} \\] <p>\u6240\u4ee5\u4e58\u79ef\u540e\u7684\u6570\u5b57\u65b9\u5dee\u4e3a \\(d_k\\)\uff0c\u9700\u8981\u9664\u4ee5 \\(\\sqrt {d_k}\\) \u4f7f\u5f97\u65b9\u5dee\u4e3a \\(1\\)\u3002</p>"},{"location":"interview/transformer/#_4","title":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u591a\u5934\u6ce8\u610f\u529b","text":"<p>\u591a\u5934\u6ce8\u610f\u529b\u53ef\u4ee5\u6ce8\u610f\u5230\u4e0d\u540c\u5b50\u7a7a\u95f4\u7684\u4fe1\u606f\uff0c\u6355\u6349\u5230\u66f4\u52a0\u4e30\u5bcc\u7684\u7279\u5f81\u4fe1\u606f\u3002\u4e0d\u540c\u7684\u5934\u7684\u5173\u6ce8\u70b9\u53ef\u80fd\u4e0d\u76f8\u540c\uff0c\u4f8b\u5982\u4e00\u4e2a\u5934\u5173\u6ce8\u5230\u4e86\u8bed\u4e49\u4fe1\u606f\uff0c\u53e6\u4e00\u4e2a\u5934\u5173\u6ce8\u8bed\u6cd5\u4fe1\u606f\u3002\u6709\u7684\u5b9e\u9a8c\u8868\u660e\uff0c\u8fdb\u884c\u53ef\u89c6\u5316\u540e\u603b\u6709\u4e00\u4e24\u4e2a\u5934\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u4e0e\u5176\u4ed6\u7684\u5934\u5173\u6ce8\u4e0d\u4e00\u6837\u3002</p> <p>\u591a\u5934\u6ce8\u610f\u529b\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u53bb\u6389\u4e00\u4e9b\u5934\u4e5f\u8fd8\u662f\u4f1a\u6709\u4e0d\u9519\u7684\u6548\u679c\uff0c\u56e0\u4e3a\u5269\u4e0b\u7684\u5934\u5df2\u7ecf\u6709\u8db3\u591f\u7684\u5bf9\u4f4d\u7f6e\u4fe1\u606f\u3001\u8bed\u6cd5\u4fe1\u606f\u6216\u7f55\u89c1\u8bcd\u7684\u5173\u6ce8\u80fd\u529b\u4e86\u3002</p>"},{"location":"interview/transformer/#q-k","title":"\u4e3a\u4ec0\u4e48\u7684 Q \u548c K \u4f7f\u7528\u4e0d\u540c\u7684\u6743\u91cd\u77e9\u9635\u751f\u6210\uff0c\u4e3a\u4f55\u4e0d\u80fd\u4f7f\u7528\u540c\u4e00\u4e2a\u503c\u8fdb\u884c\u81ea\u8eab\u7684\u70b9\u4e58\uff1f","text":"<p>\u5982\u679c\u76f8\u540c\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u6cdb\u5316\u80fd\u529b\u8f83\u5dee\u7684\u5bf9\u79f0\u77e9\u9635\u3002\u4e0d\u76f8\u540c\u7684\u6743\u91cd\u77e9\u9635\u53ef\u4ee5\u4fdd\u8bc1 Q/K/V \u5728\u4e0d\u540c\u7a7a\u95f4\u8fdb\u884c\u6295\u5f71\uff0c\u8fd9\u589e\u5f3a\u4e86\u8868\u8fbe\u80fd\u529b\uff0c\u63d0\u9ad8\u4e86\u6cdb\u5316\u80fd\u529b\u3002</p>"},{"location":"interview/transformer/#qkv","title":"\u4e3a\u4ec0\u4e48\u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e2d\u7684 QKV \u8981\u7528\u4e09\u4e2a\u4e0d\u540c\u7684\u77e9\u9635\uff1f","text":"<ol> <li>\u4e0d\u540c\u7684\u77e9\u9635\u53ef\u4ee5\u5f15\u5165\u66f4\u591a\u7684\u53c2\u6570\u91cf\uff0c\u589e\u5927\u8bed\u4e49\u7a7a\u95f4\uff0c\u63d0\u5347\u8868\u8fbe\u80fd\u529b\u3002\u3002</li> <li>\u5728\u8fdb\u884c self-attntion \u65f6\uff0c\u6211\u4eec\u66f4\u52a0\u5e0c\u671b \\(Q\\neq K \\neq V\\)\uff0c\u5f15\u5165\u4e0d\u540c\u7684\u77e9\u9635\u53ef\u4ee5\u66f4\u597d\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5982\u679c \\(Q=K=V\\)\uff0c\u90a3\u4e48\u5728\u8fdb\u884c\u70b9\u4e58\u65f6\uff0c\u6bcf\u4e00\u4e2a Query \u5bf9\u81ea\u5df1\u7684 Key \u90fd\u4f1a\u6709\u5f88\u5927\u7684\u503c\uff0c\u8fd9\u4f1a\u5f71\u54cd\u6bcf\u4e00\u4e2a Query \u5bf9\u5176\u4ed6\u7684 Key \u7684\u6ce8\u610f\u529b\u6743\u91cd\uff0c\u5bfc\u81f4 Transformer \u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u7684\u63d0\u53d6\u80fd\u529b\u5927\u5e45\u5ea6\u4e0b\u964d\u3002</li> </ol>"},{"location":"interview/transformer/#attention","title":"\u8ba1\u7b97 attention \u4e3a\u4f55\u9009\u62e9\u70b9\u4e58\u800c\u4e0d\u662f\u52a0\u6cd5\uff1f\u4e24\u8005\u8ba1\u7b97\u590d\u6742\u5ea6\u548c\u6548\u679c\u4e0a\u6709\u4ec0\u4e48\u533a\u522b\uff1f","text":"<p>\u901a\u8fc7\u70b9\u4e58\u7684\u65b9\u5f0f\u8ba1\u7b97\u4f1a\u6709\u66f4\u9ad8\u7684\u6548\u7387\u3002\u8bba\u6587\u4e2d\u6709\u5b9e\u9a8c\uff0c\u5728 dk \u6bd4\u8f83\u5927\u7684\u65f6\u5019\u52a0\u6cd5\u6709\u66f4\u597d\u7684\u6548\u679c\u3002</p>"},{"location":"interview/transformer/#positional-encoding-sin-cos","title":"Positional Encoding \u4e3a\u4ec0\u4e48\u9009\u7528 sin \u548c cos \u51fd\u6570\uff1f","text":"\\[ \\left\\{              \\begin{array}{lr}              PE(pos, 2i) &amp;= sin\\left( pos / 10000 ^ {2i / d_{model}}\\right) &amp;  \\\\              PE(pos, 2i+1) &amp;= cos\\left( pos / 10000 ^ {2i / d_{model}}\\right) &amp;              \\end{array} \\right. \\] <pre><code>class PositionalEncoding(nn.Module):\n    \"Implement the PE function.\"\n    def __init__(self, d_model, dropout, max_len=5000):\n        super(PositionalEncoding, self).__init__()\n        self.dropout = nn.Dropout(p=dropout)\n\n        # Compute the positional encodings once in log space.\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2) *\n                             -(math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        pe = pe.unsqueeze(0)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        x = x + Variable(self.pe[:, :x.size(1)],\n                         requires_grad=False)\n        return self.dropout(x)\n</code></pre> <p>pos \u5373 position\uff0c\u610f\u5473 token \u5728\u53e5\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8bbe\u53e5\u5b50\u957f\u5ea6\u4e3a \\(L\\)\uff0c\u5219 \\(pos = 0,1,\\ldots, L-1\\); \\(i\\) \u4e3a\u5411\u91cf\u7684\u67d0\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u4f8b\u5982 \\(d_{model} = 512, i = 0,1,\\ldots, 255\\)\u3002\u8fd9\u79cd\u7f16\u7801\u65b9\u5f0f\u5bf9\u4e0d\u540c\u7ef4\u5ea6\u4f7f\u7528\u4e86\u4e0d\u540c\u9891\u7387\u7684\u6b63/\u4f59\u5f26\u516c\u5f0f\u751f\u6210\u4e86\u4e0d\u540c\u4f4d\u7f6e\u7684\u9ad8\u7eac\u4f4d\u7f6e\u7f16\u7801\uff0c\u5229\u7528\u6b63\u4f59\u5f26\u51fd\u6570\u5b9e\u73b0\u76f8\u5bf9\u4f4d\u7f6e\u4fe1\u606f\u7684\u8868\u793a\u3002</p> <p>\u901a\u8fc7\u4e09\u89d2\u51fd\u6570\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a</p> \\[ \\left\\{              \\begin{array}{lr}              PE(pos+k, 2i) &amp;= PE(pos, 2i)\\times PE(k, 2i+1) + PE(pos, 2i+1)\\times PE(k, 2i) &amp;  \\\\              PE(pos+k, 2i+1) &amp;= PE(pos, 2i+1)\\times PE(k, 2i+1) - PE(pos, 2i)\\times PE(k,2i) &amp;              \\end{array} \\right. \\] <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e \\(pos+k\\) \u4f4d\u7f6e\u7684\u4f4d\u7f6e\u5411\u91cf\u7684\u67d0\u4e00\u7ef4\u5ea6\u800c\u8a00\uff0c\u5176\u503c\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a \\(pos\\) \u548c \\(k\\) \u4f4d\u7f6e\u7684\u4f4d\u7f6e\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\u3002\u8fd9\u610f\u5473\u7740\u4f4d\u7f6e\u5411\u91cf\u4e4b\u4e2d\u5305\u542b\u4e86\u76f8\u5bf9\u4f4d\u7f6e\u4fe1\u606f\u3002\u4f46\u662f\u6211\u6709\u770b\u5230\u6709\u4eba\u63d0\u51fa\uff1a\u5728\u7ecf\u8fc7\u7ebf\u6027\u53d8\u6362\u5c42\u4e4b\u540e\uff0c\u76f8\u5bf9\u4f4d\u7f6e\u7684\u4fe1\u606f\u88ab\u7834\u574f\u3002Transformer \u88ab\u63d0\u51fa\u65f6\u4f5c\u8005\u53ef\u80fd\u5c31\u53d1\u73b0\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u540e\u7eed\u4ed6\u4eec\u53c8\u63d0\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u52a0\u5165\u4e86\u4e00\u4e2a\u53ef\u8bad\u7ec3\u7684\u76f8\u5bf9\u4f4d\u7f6e\u53c2\u6570\u3002</p>"},{"location":"interview/transformer/#prenorm-postnorm","title":"PreNorm \u548c PostNorm \u7684\u533a\u522b","text":"<p>PreNorm \u662f LayerNorm \u653e\u5728\u4e86 Attention/FFN \u8fd0\u7b97\u4e4b\u524d\uff0cPostNorm \u662f LayerNorm \u653e\u5728\u4e86 Attention/FFN \u4e4b\u540e\u3002</p> <ul> <li>Post-norm \u5728\u6b8b\u5dee\u4e4b\u540e\u505a\u5f52\u4e00\u5316\uff0c\u5bf9\u53c2\u6570\u7684\u6b63\u5219\u5316\u6548\u679c\u66f4\u597d\u3002</li> <li>Pre-norm \u76f8\u5bf9 Post-norm \uff0c\u56e0\u4e3a\u6709\u4e00\u90e8\u5206\u53c2\u6570\u672a\u7ecf\u8fc7 Norm \u52a0\u5728\u4e86\u540e\u9762\uff0c\u8fd9\u9632\u6b62\u4e86\u6a21\u578b\u51fa\u73b0\u68af\u5ea6\u6d88\u5931\u7684\u95ee\u9898\u3002</li> <li>\u5982\u679c\u5c42\u6570\u6bd4\u8f83\u5c11\u7684\u8bdd PostNorm \u7684\u6548\u679c\u4f1a\u66f4\u597d\uff0c\u5982\u679c\u5c42\u6570\u6bd4\u8f83\u9ad8\u7684\u8bdd\u5c31\u9700\u8981\u901a\u8fc7 PreNorm \u6765\u9632\u6b62\u68af\u5ea6\u7206\u70b8\u6216\u68af\u5ea6\u6d88\u5931\u3002</li> </ul> <p>PostNorm \u68af\u5ea6\uff1a\\(\\frac{\\partial \\varepsilon}{\\partial x_l} = \\frac{\\partial \\varepsilon}{\\partial x_{l+1}}\\times \\prod_{k=l}^{L-1}\\frac{\\partial LN(y_k)}{\\partial y_k}\\times \\prod_{k=1}^{L-1}\\left(1 + \\frac{\\partial F(x_k; \\theta_k)}{\\partial x_k}\\right)\\)</p> <p>PreNorm \u68af\u5ea6\uff1a\\(\\frac{\\partial \\varepsilon }{\\partial x_l} = \\frac{\\partial \\varepsilon}{\\partial x_{l+1}}\\times \\prod_{k=1}^{L-1}\\left(1 + \\frac{\\partial x_{l+1}}{\\partial LN(x_l)}\\right)\\)</p> <p>\u6240\u4ee5 PreNorm \u7684\u68af\u5ea6\u66f4\u52a0\u7a33\u5b9a\uff0c\u56e0\u4e3a \\(\\prod\\) \u4e2d\u7684\u6570\u5b57\u5747\u5927\u4e8e \\(1\\)\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0\u68af\u5ea6\u6d88\u5931\u7684\u95ee\u9898\u3002</p>"},{"location":"interview/transformer/#embedding-size","title":"\u4e3a\u4f55\u5728\u83b7\u53d6\u8f93\u5165\u8bcd\u5411\u91cf\u4e4b\u540e\u9700\u8981\u5bf9\u77e9\u9635\u4e58\u4ee5embedding size\u7684\u5f00\u65b9\uff1f\u610f\u4e49\u662f\u4ec0\u4e48\uff1f","text":"<p>Embedding matrix \u7684\u521d\u59cb\u5316\u65b9\u5f0f\u662f xavier \u521d\u59cb\u5316\uff0c\u8fd9\u79cd\u65b9\u5f0f\u7684\u65b9\u5dee\u662f \\(\\frac{1}{\\text{Embedding size}}\\)\uff0c\u56e0\u6b64\u4e58\u4ee5 Embedding size \u7684\u5f00\u65b9\u4f7f\u5f97 Embedding matrix \u7684\u65b9\u5dee\u662f \\(1\\)\uff0c\u5728\u8fd9\u4e2a scale \u4e0b\u53ef\u80fd\u66f4\u6709\u5229\u4e8e Embedding matrix \u7684\u6536\u655b\u3002</p>"},{"location":"interview/transformer/#_5","title":"\u4ee3\u7801","text":"<pre><code>import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport math, copy, time\nfrom torch.autograd import Variable\nimport matplotlib.pyplot as plt\nimport seaborn\nseaborn.set_context(context='talk')\n%matplotlib inline\n\nclass EncoderDecoder(nn.Module):\n    def __init__(self, encoder, decoder, src_embed, tgt_embed, generator):\n        \"\"\"\n        \u7f16\u7801\u5668\u3001\u89e3\u7801\u5668\u3001\u8f93\u5165\u5d4c\u5165\u5c42\u3001\u76ee\u6807\u5d4c\u5165\u5c42\u3001\u8f93\u51fa\u5c42\n        \"\"\"\n        super(EncoderDecoder, self).__init__()\n        self.encoder = encoder\n        self.decoder = decoder\n        self.src_embed = src_embed\n        self.tgt_embed = tgt_embed\n        self.generator = generator\n\n    def forward(self, src, tgt, src_mask, tgt_mask):\n        \"\"\"\n        src --&gt; memory\n        memory + tgt --&gt; output\n        \"\"\"\n        memory = self.encode(src, src_mask)\n        return self.decode(memory, src_mask, tgt, tgt_mask)\n\n    def encode(self, src, src_mask):\n        \"\"\"\n        src --&gt; memory\n        \"\"\"\n        return self.encoder(self.src_embed(src), src_mask)\n\n    def decode(self, memory, src_mask, tgt, tgt_mask):\n        \"\"\"\n        memory + tgt --&gt; output\n        \"\"\"\n        return self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)\n\n\nclass Generator(nn.Module):\n    \"Define standard linear + softmax generation step.\"\n\n    def __init__(self, d_model, vocab):\n        super(Generator, self).__init__()\n        self.proj = nn.Linear(d_model, vocab)\n\n    def forward(self, x):\n        return F.log_softmax(self.proj(x), dim=-1)\n\ndef clone(module, N):\n    return nn.ModuleList([copy.deepcopy(module) for _ in range(N)])\n\nclass Encoder(nn.Module):\n    def __init__(self, layer, N):\n        super(Encoder, self).__init__()\n        self.layers = clone(layer, N)\n        self.norm = LayerNorm(layer.size)\n\n    def forward(self, x, mask):\n        \"\"\"\n        \u9700\u8981\u81ea\u4e3b\u751f\u6210 mask\n        \"\"\"\n        for layer in self.layers:\n            x = layer(x, mask)\n        return self.norm(x)\n\nclass LayerNorm(nn.Module):\n    \"\"\"\n    inputs: batch, seq_len, features\n    \u6cbf\u8f93\u5165\u6570\u636e\u7684\u7279\u5f81\u7ef4\u5ea6\u5f52\u4e00\u5316\n    \"\"\"\n    def __init__(self, features, eps=1e-6):\n        # \u9700\u8981\u6307\u5b9a\u7279\u5f81\u6570\u91cf features\n        super(LayerNorm, self).__init__()\n        self.a_2 = nn.Parameter(torch.ones(features))\n        self.b_2 = nn.Parameter(torch.ones(features))\n        self.eps = eps\n\n    def forward(self, x):\n        \"\"\"\n        x --&gt; (x - x.mean) / x.std\n        \"\"\"\n        mean = x.mean(-1, keepdim=True)\n        std = x.std(-1, keepdim=True)\n        return self.a_2 * (x - mean) / (std + self.eps) + self.b_2\n\nclass SublayerConnection(nn.Module):\n    def __init__(self, size, dropout):\n        super(SublayerConnection, self).__init__()\n        self.norm = LayerNorm(size)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x, sublayer):\n        \"\"\"\n        \u6307\u5b9a\u5185\u90e8\u7684\u7ed3\u6784 sublayer\uff0c\u662f attention \u5c42\uff0c\u8fd8\u662f feed_forward \u5c42\n        \"\"\"\n        return x + self.dropout(sublayer(self.norm(x)))\n\nclass EncoderLayer(nn.Module):\n    \"\"\"size: d_model\"\"\"\n    def __init__(self, size, self_attn, feed_forward, dropout):\n        super(EncoderLayer, self).__init__()\n        self.self_attn = self_attn\n        self.feed_forward = feed_forward\n        self.sublayer = clone(SublayerConnection(size, dropout), 2)\n        self.size = size\n\n    def forward(self, x, mask):\n        x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask))\n        return self.sublayer[1](x, self.feed_forward)\n\nclass Decoder(nn.Module):\n    def __init__(self, layer, N):\n        super(Decoder, self).__init__()\n        self.layers = clone(layer, N)\n        self.norm = LayerNorm(layer.size)\n\n    def forward(self, x, memory, src_mask, tgt_mask):\n        for layer in self.layers:\n            x = layer(x, memory, src_mask, tgt_mask)\n        return self.norm(x)\n\n\nclass DecoderLayer(nn.Module):\n    def __init__(self, size, self_attn, src_attn, feed_forward, dropout):\n        super(DecoderLayer, self).__init__()\n        self.size = size  # \u4f5c\u4e3a\u53c2\u6570\u7528\u4e8e layernorm \u5c42\n        self.self_attn = self_attn\n        self.src_attn = src_attn\n        self.feed_forward = feed_forward\n        self.sublayer = clone(SublayerConnection(size, dropout), 3)\n\n    def forward(self, x, memory, src_mask, tgt_mask):\n        m = memory\n        x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, tgt_mask))\n        x = self.sublayer[1](x, lambda x: self.src_attn(x, m, m, src_mask))\n        return self.sublayer[2](x, self.feed_forward)\n\n# \u89e3\u7801\u5668\u4e00\u6b21\u8f93\u5165\u5e8f\u5217\u4e2d\u5411\u91cf\uff0c\u5f53\u524d\u6b65\u540e\u9762\u7684\u5e8f\u5217\u9700\u8981\u88ab\u906e\u76d6\n# \u9700\u8981\u88ab\u906e\u76d6\u7684\u5355\u8bcd\u88ab\u6807\u8bb0\u4e3a False\n\ndef subsequent_mask(size):\n    attn_shape = (1, size, size)\n    subsequent_mask = np.triu(np.ones(attn_shape), k=1).astype('uint8')\n    return torch.from_numpy(subsequent_mask) == 0\n\n\nplt.figure(figsize=(5, 5))\nplt.imshow(subsequent_mask(20)[0])\n\ndef attention(query, key, value, mask=None, dropout=None):\n    \"\"\"\n    query : batch, target_len, feats\n    key   : batch, seq_len,    feats\n    value : batch, seq_len,    val_feats\n\n    return: batch, target_len, val_feats\n    \"\"\"\n    d_k = query.size(-1)\n    scores = torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)\n\n    if mask is not None:\n        scores = scores.masked_fill(mask == 0, -1e9)\n    p_attn = F.softmax(scores, dim=-1)\n\n    if dropout is not None:\n        p_attn = dropout(p_attn)\n    return torch.matmul(p_attn, value), p_attn\n\nclass MultiHeadedAttention(nn.Module):\n    def __init__(self, h, d_model, dropout=0.1):\n        \"\"\"\n        h, num_heads\n        d_model, features\n        \"\"\"\n        super(MultiHeadedAttention, self).__init__()\n        assert d_model % h == 0\n        self.d_k = d_model // h\n        self.h = h\n        self.linears = clone(nn.Linear(d_model, d_model), 4)\n        self.attn = None\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, query, key, value, mask=None):\n        # query,key,value: batch,seq_len,d_model\n\n        if mask is not None:\n            mask = mask.unsqueeze(1)\n        nbatches = query.size(0)\n\n        query, key, value = [\n            l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2)\n            for l, x in zip(self.linears, (query, key, value))\n        ]\n\n        x, self.attn = attention(\n            query,  # batch,num_head,seq_len,feats\n            key,\n            value,\n            mask=mask,\n            dropout=self.dropout)\n\n        x = x.transpose(1, 2).contiguous().view(nbatches, -1,\n                                                self.h * self.d_k)\n        # batch,seq_len,num_head*feats\n        return self.linears[-1](x)\n\ndef test_multi_head():\n    x = torch.randn(2, 4, 12)\n    d_model = x.shape[-1]\n    model = MultiHeadedAttention(2, d_model)\n    attn = model(x, x, x)\n    assert attn.shape == (2, 4, 12)\n    print(\"Test passed!\")\n\ntest_multi_head()\n\n\nclass PositionwiseFeedForward(nn.Module):\n    def __init__(self, d_model, d_ff, dropout=0.1):\n        super(PositionwiseFeedForward, self).__init__()\n        self.w_1 = nn.Linear(d_model, d_ff)\n        self.w_2 = nn.Linear(d_ff, d_model)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        return self.w_2(self.dropout(F.relu(self.w_1(x))))\n\nclass Embeddings(nn.Module):\n    def __init__(self, d_model, vocab):\n        super(Embeddings, self).__init__()\n        self.lut = nn.Embedding(vocab, d_model)\n        self.d_model = d_model\n\n    def forward(self, x):\n        return self.lut(x) * math.sqrt(self.d_model)\n\nclass PositionalEncoding(nn.Module):\n    \"Implement the PE function.\"\n\n    def __init__(self, d_model, dropout, max_len=5000):\n        super(PositionalEncoding, self).__init__()\n        self.dropout = nn.Dropout(p=dropout)\n\n        # Compute the positional encodings once in log space.\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len).unsqueeze(1)\n        div_term = torch.exp(\n            torch.arange(0, d_model, 2) * -(math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        pe = pe.unsqueeze(0)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        x = x + Variable(self.pe[:, :x.size(1)], requires_grad=False)\n        return self.dropout(x)\n\ndef make_model(src_vocab,\n               tgt_vocab,\n               N=6,\n               d_model=512,\n               d_ff=2048,\n               h=8,\n               dropout=0.1):\n    \"Helper: Construct a model from hyperparameters.\"\n    c = copy.deepcopy\n    attn = MultiHeadedAttention(h, d_model)\n    ff = PositionwiseFeedForward(d_model, d_ff, dropout)\n    position = PositionalEncoding(d_model, dropout)\n    model = EncoderDecoder(\n        Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),\n        Decoder(DecoderLayer(d_model, c(attn), c(attn), c(ff), dropout), N),\n        nn.Sequential(Embeddings(d_model, src_vocab), c(position)),\n        nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),\n        Generator(d_model, tgt_vocab),\n    )\n\n    # This was important from their code.\n    # Initialize parameters with Glorot / fan_avg.\n    for p in model.parameters():\n        if p.dim() &gt; 1:\n            nn.init.xavier_uniform_(p)\n    return model\n\nclass Batch:\n    def __init__(self, src, trg=None, pad=0):\n        \"\"\"\n        src: \u8f93\u5165\u5e8f\u5217\n        trg: \u76ee\u6807\u5e8f\u5217\n        \"\"\"\n        self.src = src\n        self.src_mask = (src != pad).unsqueeze(-2)\n        if trg is not None:\n            self.trg = trg[:, :-1]\n            self.trg_y = trg[:, 1:]\n            self.trg_mask = self.make_std_mask(self.trg, pad)\n            self.ntokens = (self.trg_y != pad).data.sum()\n\n    @staticmethod\n    def make_std_mask(tgt, pad):\n        \"\"\"\n        \u5c06 pad \u4ea7\u751f\u7684 mask\uff0c\u548c\u5e8f\u5217\u4e00\u6b21\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u8bcd\u4ea7\u751f\u7684 mask \u7ed3\u5408\u8d77\u6765\n        \"\"\"\n        tgt_mask = (tgt != pad).unsqueeze(-2)\n        tgt_mask = tgt_mask &amp; Variable(\n            subsequent_mask(tgt.size(-1)).type_as(tgt_mask.data))\n        return tgt_mask\n\nsrc = torch.tensor([[3, 5, 7, 0, 0], [2, 4, 6, 8, 0]])  # batch=2,seq_len=5\ntrg = torch.tensor([[2, 3, 4, 5, 0, 0], [3, 5, 6, 0, 0,\n                                         0]])  # batch=2,seq_len=6\n\nsample = Batch(src, trg)\nsample.src_mask\n\ndef run_epoch(data_iter, model, loss_compute):\n    start = time.time()\n    total_tokens = 0\n    total_loss = 0\n    tokens = 0\n    for i, batch in enumerate(data_iter):\n        out = model.forward(batch.src, batch.trg, batch.src_mask,\n                            batch.trg_mask)\n        loss = loss_compute(out, batch.trg_y, batch.ntokens)\n        total_loss += loss\n        total_tokens += batch.ntokens  # \u603b tokens \u6570\n        tokens += batch.ntokens  # 50 \u6279\u8bad\u7ec3\u65f6\u7684\u603b tokens \u6570\n        if i % 50 == 1:\n            elapsed = time.time() - start\n            print(\"Epoch Step: %d Loss: %f Tokens per Sec: %f\" %\n                  (i, loss / batch.ntokens, tokens / elapsed))\n            start = time.time()\n            tokens = 0\n    return total_loss / total_tokens\n</code></pre>"},{"location":"interview/transformer/#_6","title":"\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>Transformer\u3001Like-Bert\u3001\u5bf9\u6bd4\u5b66\u4e60\u3001ChatGPT\u76f8\u5173\u9762\u8bd5\u96c6\u9526</li> <li>Transformer\u76f8\u5173\u2014\u2014\uff088\uff09Transformer\u6a21\u578b</li> <li>llm_interview_note</li> <li>24\u5e74\u5927\u6a21\u578b\u9762\u8bd5\u5fc5\u770b\uff0c\u57fa\u7840\u77e5\u8bc6Transformer\u9762\u8bd5\u9898-\u5317\u5927\u535a\u58eb\u540e\u5362\u83c1\u535a\u58eb\u6388\u8bfe</li> <li>30-Transformer\u6a21\u578b\u53ca\u6e90\u4ee3\u7801(PyTorch)</li> </ul>"},{"location":"machine_learning/","title":"\u673a\u5668\u5b66\u4e60","text":"<p>\u673a\u5668\u5b66\u4e60\u76f8\u5173\u7684\u8d44\u6599\u6574\u7406\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e3b\u8981\u662f\u6559\u5b66\u76f8\u5173\u7684\u6574\u7406\u4e0e\u8bb0\u5f55\u3002</p>"},{"location":"machine_learning/decision_tree/","title":"\u5b9e\u73b0\u51b3\u7b56\u6811","text":"<p>\u9996\u5148\u6211\u4eec\u51c6\u5907\u4e86\u4e00\u4e9b\u6570\u636e\u7528\u4e8e\u6f14\u793a\uff1a</p> age income student credit_rating buys_computer youth high no fair no youth high no excellent no middle_aged high no fair yes senior medium no fair yes senior low yes fair yes senior low yes excellent no middle_aged low yes excellent yes youth medium no fair no youth low yes fair yes senior medium yes fair yes youth medium yes excellent yes middle_aged medium no excellent yes middle_aged high yes fair yes senior medium no excellent no"},{"location":"machine_learning/decision_tree/#1","title":"1. \u6570\u636e\u5904\u7406","text":"<p>\u7ed9\u5b9a\u7684\u6570\u636e\u4e2d\u5305\u542b<code>age, income, student, credit_rating</code>\u56db\u4e2a\u7ef4\u5ea6\u7684\u6570\u636e\uff0c\u9884\u6d4b<code>buys_computer</code>\u503c\uff0c\u5373\u6839\u636e\u4e2a\u4eba\u4fe1\u606f\u6765\u9884\u6d4b\u8fd9\u4e2a\u4eba\u4f1a\u4e0d\u4f1a\u8d2d\u4e70\u7535\u8111\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u5c06\u8fd9\u4efd\u8868\u683c\u6570\u636e\u8f6c\u6362\u4e3a Python \u4ee3\u7801\u4e2d\u7684 <code>List</code> \u6765\u8fdb\u884c\u50a8\u5b58\uff1a</p> <pre><code>from math import log\nimport operator\nimport copy\n\ndef createDataSet():\n    # \u6570\u636e\u96c6\n    dataSet = [['youth', 'high', 'no', 'fair', 'no'],\n               ['youth', 'high', 'no', 'excellent', 'no'],\n               ['middle_aged', 'high', 'no', 'fair', 'yes'],\n               ['senior', 'medium', 'no', 'fair', 'yes'],\n               ['senior', 'low', 'yes', 'fair', 'yes'],\n               ['senior', 'low', 'yes', 'excellent', 'no'],\n               ['middle_aged', 'low', 'yes', 'excellent', 'yes'],\n               ['youth', 'medium', 'no', 'fair', 'no'],\n               ['youth', 'low', 'yes', 'fair', 'yes'],\n               ['senior', 'medium', 'yes', 'fair', 'yes'],\n               ['youth', 'medium', 'yes', 'excellent', 'yes'],\n               ['middle_aged', 'medium', 'no', 'excellent', 'yes'],\n               ['middle_aged', 'high', 'yes', 'fair', 'yes'],\n               ['senior', 'medium', 'no', 'excellent', 'no']]\n    labels = ['age', 'income', 'student', 'credit_rating']\n    return dataSet, labels\n</code></pre>"},{"location":"machine_learning/decision_tree/#2","title":"2. \u6784\u5efa\u51b3\u7b56\u6811","text":"<p>\u6784\u5efa\u51b3\u7b56\u6811\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u4e0d\u65ad\u4ece\u5f53\u524d\u9700\u8981\u8fdb\u884c\u6784\u5efa\u7684\u8282\u70b9\u4e2d\u6311\u9009\u51fa\u4e00\u4e2a\u53ef\u4ee5\u201c\u66f4\u597d\u5730\u201d\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u5212\u5206\u5f00\u7684\u7279\u5f81\u8fdb\u884c\u5206\u5272\u3002\u6784\u5efa\u51b3\u7b56\u6811\u7684\u4e3b\u51fd\u6570\u5982\u4e0b\uff1a</p> <pre><code>def createTree(dataSet, labels):\n        # \u53d6\u51fa\u6bcf\u4e00\u4e2a\u6570\u636e\u96c6\u7684 buys_computer \u6807\u7b7e\n    classList = [example[-1] for example in dataSet]\n    # \u5982\u679c\u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u540c\u6837\u7684 buys_computer \u6807\u7b7e\u5219\u76f4\u63a5\u7ec8\u6b62\n    if classList.count(classList[0]) == len(classList):\n        return classList[0]\n    # \u82e5\u5df2\u65e0\u7279\u5f81\u53ef\u4ee5\u7528\u4e8e\u5212\u5206\uff0c\u5219\u627e\u51fa\u6570\u91cf\u66f4\u591a\u7684\u7ed3\u679c\u4f5c\u4e3a\u8be5\u8282\u70b9\u7684\u7ed3\u679c\n    if len(dataSet[0]) == 1:\n        return majorityCnt(classList)\n\n        # \u627e\u51fa\u6700\u5408\u9002\u7684\u7279\u5f81\u6765\u8fdb\u884c\u5212\u5206\uff0c\u5e76\u5c06\u4f7f\u7528\u8fc7\u7684\u7279\u5f81\u4ece\u7279\u5f81\u5217\u8868\u4e2d\u5220\u9664\n    bestFeat = chooseBestFeatureToSplit(dataSet)\n    bestFeatLabel = labels[bestFeat]\n    myTree = {bestFeatLabel:{}}\n    del(labels[bestFeat])\n\n    # \u6784\u5efa\u51b3\u7b56\u6811\u7684\u8f6c\u79fb\n    featValues = [example[bestFeat] for example in dataSet]\n    uniqueVals = set(featValues)\n    for value in uniqueVals:\n        myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value), copy.copy(labels))\n\n    return myTree\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6700\u9700\u8981\u6ce8\u610f\u7684\u662f\u51fd\u6570<code>chooseBestFeatureToSplit</code>\u7684\u5b9e\u73b0\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5206\u522b\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u7279\u5f81 \\(A\\) \u5e26\u6765\u7684\u4fe1\u606f\u589e\u76ca\u3002</p> \\[ Gain(A) = Info(D) - Info_A(D), \\\\ Info(D) = -\\sum_{i=1}^mp_i\\log_2p_i, \\\\ Info_A(D) = \\sum_{j=1}^v \\frac{|D_j|}{|D|}\\times Info(D_j) \\] <p>\u6211\u4eec\u5148\u6765\u5b9e\u73b0\u5bf9 \\(Info(D)\\) \u8fdb\u884c\u8ba1\u7b97\u7684\u51fd\u6570\uff1a</p> <pre><code>def calcShannonEnt(dataSet):\n    numEntires = len(dataSet)\n    labelCounts = {}\n\n    # \u904d\u5386\u5f53\u524d\u6570\u636e\u96c6\u4e2d\u6240\u6709\u7684\u6570\u636e\n    for featVec in dataSet:\n        currentLabel = featVec[-1]\n        if currentLabel not in labelCounts.keys():\n            labelCounts[currentLabel] = 0\n        labelCounts[currentLabel] += 1\n\n    shannonEnt = 0.0\n    for key in labelCounts:\n            # \u8ba1\u7b97\u6837\u672c\u5c5e\u4e8e\u7c7b\u522b key \u7684\u6982\u7387\n        prob = float(labelCounts[key]) / numEntires\n\n        # \u8ba1\u7b97\u9999\u519c\u71b5\n        shannonEnt -= prob*log(prob, 2)\n\n    return shannonEnt\n</code></pre> <p>\u7136\u540e\u5b8c\u6210 \\(Gain(A)\\) \u7684\u8ba1\u7b97\u548c\u7279\u5f81 \\(A\\) \u7684\u6311\u9009\uff1a</p> <pre><code>def chooseBestFeatureToSplit(dataSet):\n\n        # \u7279\u5f81\u6570\u91cf\n    numFeatures = len(dataSet[0]) - 1\n\n    # \u8ba1\u7b97 Info(D)\n    baseEntropy = calcShannonEnt(dataSet)\n\n    bestInfoGain = 0.0\n    bestFeature = -1\n    # \u8ba1\u7b97\u6bcf\u4e00\u4e2a Feature \u7684 Info_A(D)\n    for i in range(numFeatures):\n        featList = [example[i] for example in dataSet]\n        uniqueVals = set(featList)\n        newEntropy = 0.0\n        for value in uniqueVals:\n                # splitDataSet \u51fd\u6570\u7684\u4f5c\u7528\u662f\u5c06\u6570\u636e\u96c6\u4e2d\u7b2c i \u4e2a\u7279\u5f81\u4e3a value \u7684\u6837\u672c\u63d0\u53d6\u51fa\u6765\n            subDataSet = splitDataSet(dataSet, i, value)\n\n            # \u8ba1\u7b97 Info_A(D)\n            prob = len(subDataSet) / float(len(dataSet))\n            newEntropy += prob * calcShannonEnt(subDataSet)\n        # \u8ba1\u7b97\u4fe1\u606f\u589e\u76ca\n        infoGain = baseEntropy - newEntropy\n        print(\"Gains on the %d-th feature are %.3f\" % (i, infoGain))\n        if(infoGain &gt; bestInfoGain):\n            bestInfoGain = infoGain\n            bestFeature = i\n\n    return bestFeature\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5b8c\u6210\u5bf9\u51b3\u7b56\u6811\u7684\u6784\u5efa\u7684\u4e3b\u8981\u8fc7\u7a0b\uff0c\u5176\u4e2d\u4f7f\u7528\u5230\u4e86\u4e24\u4e2a\u6ca1\u6709\u5b9e\u73b0\u7684\u51fd\u6570 <code>majorityCnt</code> \u548c <code>splitDataSet</code> \uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u5206\u522b\u4e3a\uff1a</p> <ul> <li><code>majorityCnt(D)</code> : \u8ba1\u7b97\u6570\u636e\u96c6 <code>D</code> \u4e2d\u54ea\u4e00\u4e2a\u7c7b\u522b\u7684\u6837\u672c\u51fa\u73b0\u7684\u6700\u591a</li> <li><code>splitDataSet(D, i, value)</code> : \u5c06\u6570\u636e\u96c6\u4e2d\u7b2c \\(i\\) \u7ef4\u7279\u5f81\u503c\u4e3a <code>value</code> \u7684\u6837\u672c\u63d0\u53d6\u51fa\u6765\u7ec4\u5408\u6210\u65b0\u7684\u6570\u636e\u96c6</li> </ul> <p>\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>def majorityCnt(classList):\n    classCount = {}\n    for vote in classList:\n        if vote not in classCount.keys():\n            classCount[vote] = 0\n        classCount[vote] += 1\n    # \u901a\u8fc7 sort \u51fd\u6570\u6392\u5e8f\u7684\u65b9\u5f0f\u6311\u9009\u51fa\u51fa\u73b0\u6700\u591a\u7684\u7c7b\u522b\n    sortedClassCount = sorted(classCount.items(),\n                              key = operator.itemgetter(1),\n                              reverse = True)\n    return sortedClassCount[0][0]\n\ndef splitDataSet(dataSet, axis, value):\n    retDataSet = []\n    for featVec in dataSet:\n            # \u901a\u8fc7 if \u8bed\u53e5\u7b5b\u9009\u7b26\u5408\u8981\u6c42\u7684\u6837\u672c\n        if featVec[axis] == value:\n            reducedFeatVec = featVec[:axis]\n            reducedFeatVec.extend(featVec[axis+1:])\n            retDataSet.append(reducedFeatVec)\n\n    return retDataSet\n</code></pre>"},{"location":"machine_learning/decision_tree/#3","title":"3. \u4f7f\u7528\u51b3\u7b56\u6811\u8fdb\u884c\u9884\u6d4b","text":"<p>\u5728\u4e0a\u4e00\u4e2a\u5b9e\u9a8c\u73af\u8282\u6784\u9020\u7684\u51b3\u7b56\u6811\u4fdd\u5b58\u5728\u540d\u4e3a <code>myTree</code> \u7684\u53d8\u91cf\u4e2d\uff0c\u8be5\u53d8\u91cf\u662f\u4e00\u4e2a\u5d4c\u5957\u7684 <code>dictionariy</code> \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>print</code> \u8bed\u53e5\u8f93\u51fa <code>myTree</code> \u6765\u89c2\u5bdf\u4e00\u4e0b\u7ed3\u6784\uff1a</p> <pre><code>{\n  \"age\": {\n    \"middle_aged\": \"yes\",\n    \"senior\": {\n      \"credit_rating\": {\n        \"fair\": \"yes\",\n        \"excellent\": \"no\"\n      }\n    },\n    \"youth\": {\n      \"student\": {\n        \"no\": \"no\",\n        \"yes\": \"yes\"\n      }\n    }\n  }\n}\n</code></pre> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u9884\u6d4b\u4e00\u4e2a\u7279\u5f81\u4e3a\uff1a<code>['youth', 'low', 'yes', 'excellent']</code>\u7684\u6837\u672c\u662f\u5426\u4f1a\u8d2d\u4e70\u7535\u8111\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u51b3\u7b56\u6811\u6765\u8fdb\u884c\u9884\u6d4b\uff1a</p> <ol> <li>\u6839\u636e\u51b3\u7b56\u6811\u7684\u7ed3\u6784\uff0c\u9996\u5148\u6211\u4eec\u5224\u65ad\u5176\u4e2d\u7684 <code>age</code> \u7279\u5f81\u7684\u503c\uff0c\u7531\u4e8e\u6837\u672c\u4e2d\u8be5\u7279\u5f81\u7684\u503c\u4e3a <code>youth</code> \u6240\u4ee5\u6211\u4eec\u8fdb\u5165\u5230 <code>youth</code> \u5206\u679d\u3002</li> <li>\u63a5\u4e0b\u6765\u6211\u4eec\u5224\u65ad <code>student</code> \u7279\u5f81\u7684\u503c\uff0c\u7531\u4e8e\u6837\u672c\u4e2d\u8be5\u7279\u5f81\u7684\u503c\u4e3a <code>yes</code> \u6240\u4ee5\u6211\u4eec\u8fdb\u5165\u5230 <code>yes</code> \u5206\u679d</li> <li>\u6b64\u65f6\u6211\u4eec\u62b5\u8fbe\u4e86\u51b3\u7b56\u6811\u7684\u53f6\u5b50\u7ed3\u70b9 <code>yes</code> \uff0c\u56e0\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u5bf9\u8be5\u6837\u672c\u7684\u9884\u6d4b\uff1a\u5373\u8be5\u6837\u672c\u4f1a\u9009\u62e9\u8d2d\u4e70\u7535\u8111\u3002</li> </ol> <p>\u6211\u4eec\u5c06\u4e0a\u8ff0\u7684\u8fc7\u7a0b\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u5c31\u53ef\u4ee5\u81ea\u52a8\u4f7f\u7528\u51b3\u7b56\u6811\u8fdb\u884c\u9884\u6d4b\uff1a</p> <pre><code>def classify(inputTree, featLabels, testVec):\n    firstStr = next(iter(inputTree))\n\n    secondDict = inputTree[firstStr]\n    featIndex = featLabels.index(firstStr)\n    classLabel = None\n\n    # \u5224\u65ad\u4e0b\u4e00\u4e2a\u51b3\u7b56\u6811\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u5b50\u7ed3\u70b9\n    if type(secondDict[testVec[featIndex]]).__name__ == 'dict':\n            # \u82e5\u4e0d\u4e3a\u53f6\u5b50\u7ed3\u70b9\u7684\u8bdd\u901a\u8fc7\u9012\u5f52\u5904\u7406\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b21\u7279\u5f81\u5224\u65ad\n        classLabel = classify(secondDict[testVec[featIndex]], featLabels, testVec)\n    else:\n            # \u82e5\u4e3a\u53f6\u5b50\u7ed3\u70b9\u5219\u53ef\u4ee5\u5f97\u51fa\u9884\u6d4b\u7ed3\u679c\n        classLabel = secondDict[testVec[featIndex]]\n\n    return classLabel\n\n\ndef main():\n    # \u83b7\u53d6\u6570\u636e\u96c6\n    dataSet, features = createDataSet()\n    # \u6784\u5efa Decision Tree\n    myTree = createTree(dataSet, features)\n\n        # \u7279\u5f81\u6807\u6ce8\n    labels = ['age', 'income', 'student', 'credit_rating']\n    # \u6d4b\u8bd5\u6570\u636e\n    testVec = ['youth', 'low', 'yes', 'excellent']\n\n    # \u6837\u672c\u9884\u6d4b\n    result = classify(myTree, labels, testVec)\n\n    print(result) # \u8f93\u51fa\u9884\u6d4b\u7ed3\u679c\n    print(myTree) # \u8f93\u51fa Decision Tree\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\uff1a<code>yes</code></p>"},{"location":"machine_learning/decision_tree/#sklearn","title":"\u901a\u8fc7 Sklearn \u5e93\u5b9e\u73b0\u51b3\u7b56\u6811*","text":"<p>\u5728 Python \u4e2d\uff0csklearn \u5305\u5305\u542b\u4e86\u51b3\u7b56\u6811\u7684\u5b9e\u73b0\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 Sklearn \u5305\u8fdb\u884c\u51b3\u7b56\u6811\u7684\u8bad\u7ec3\u4e0e\u9884\u6d4b\u3002</p> <p>\u9996\u5148\u9700\u8981\u5b89\u88c5 sklearn \u5305\uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u901a\u8fc7\u547d\u4ee4 <code>python3.9 -m pip install scikit-learn</code> \u8fdb\u884c\u5b89\u88c5\uff08\u5176\u4e2d\u7684 <code>python3.9</code> \u9700\u8981\u66ff\u6362\u4e3a\u4f60\u7684 python \u7248\u672c\uff09\u5982\u679c\u7535\u8111\u4e2d\u53ea\u5b89\u88c5\u4e86\u4e00\u4e2a python \u7248\u672c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\uff1a<code>pip install scikit-learn</code> \u6765\u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u5728\u4f7f\u7528 sklearn \u5305\u5185\u7684\u51b3\u7b56\u6811\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u96c6\u4ece <code>string</code> \u7c7b\u578b\u8f6c\u6362\u4e3a <code>int</code> \u7c7b\u578b\u4ee5\u65b9\u4fbf\u5904\u7406\uff0c\u6240\u4ee5\u6211\u4eec\u6dfb\u52a0\u4e00\u6bb5\u4ee3\u7801\u5230\u6570\u636e\u96c6\u751f\u6210\u90e8\u5206\u8fdb\u884c\u5904\u7406\uff0c\u7136\u540e\u4f7f\u7528 Sklearn \u5305\u8fdb\u884c\u51b3\u7b56\u6811\u8bad\u7ec3\u548c\u9884\u6d4b\u5373\u53ef\u3002\u5168\u90e8\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>from sklearn import tree\n\nage_map = {'youth': 0, 'middle_aged': 1, 'senior': 2}\nincome_map = {'low': 0, 'medium': 1, 'high': 2}\nstudent_map = {'no': 0, 'yes': 1}\ncredit_rating_map = {'fair': 0, 'excellent': 1}\nbuys_computer_map = {'no': 0, 'yes': 1}\n\ndef createDataSet():\n    # \u6570\u636e\u96c6\n    dataSet = [['youth', 'high', 'no', 'fair', 'no'],\n               ['youth', 'high', 'no', 'excellent', 'no'],\n               ['middle_aged', 'high', 'no', 'fair', 'yes'],\n               ['senior', 'medium', 'no', 'fair', 'yes'],\n               ['senior', 'low', 'yes', 'fair', 'yes'],\n               ['senior', 'low', 'yes', 'excellent', 'no'],\n               ['middle_aged', 'low', 'yes', 'excellent', 'yes'],\n               ['youth', 'medium', 'no', 'fair', 'no'],\n               ['youth', 'low', 'yes', 'fair', 'yes'],\n               ['senior', 'medium', 'yes', 'fair', 'yes'],\n               ['youth', 'medium', 'yes', 'excellent', 'yes'],\n               ['middle_aged', 'medium', 'no', 'excellent', 'yes'],\n               ['middle_aged', 'high', 'yes', 'fair', 'yes'],\n               ['senior', 'medium', 'no', 'excellent', 'no']]\n    # \u5faa\u73af\u679a\u4e3e\u6bcf\u4e2a\u6837\u672c\uff0c\u5c06\u6837\u672c\u4e2d\u7684 string \u6570\u636e\u8f6c\u6362\u4e3a int \u6570\u636e\n    for data in dataSet:\n        data[0] = age_map[data[0]]\n        data[1] = income_map[data[1]]\n        data[2] = student_map[data[2]]\n        data[3] = credit_rating_map[data[3]]\n        data[4] = buys_computer_map[data[4]]\n    labels = ['age', 'income', 'student', 'credit_rating']\n    return dataSet, labels\n\nif __name__ == '__main__':\n    dataSet, _ = createDataSet()\n    X = []\n    Y = []\n    for data in dataSet:\n        X.append(data[:-1])\n        Y.append(data[-1])\n\n        # \u5b9a\u4e49\u51b3\u7b56\u6811\n    decisionTree = tree.DecisionTreeClassifier()\n\n    # \u901a\u8fc7\u6570\u636e\u96c6\u8bad\u7ec3\u51b3\u7b56\u6811\n    decisionTree.fit(X, Y)\n\n    # \u4f7f\u7528\u51b3\u7b56\u6811\u8fdb\u884c\u9884\u6d4b\n    # ['youth', 'low', 'yes', 'excellent']\n    print(decisionTree.predict([[0, 0, 1, 1], [1,1,0,0]]))\n</code></pre>"},{"location":"methods/","title":"\u65b9\u6cd5\u8bb0\u5f55","text":"<p>\u603b\u662f\u4f1a\u9047\u5230\u591a\u591a\u5c11\u5c11\u7684\u6742\u9879\u77e5\u8bc6\uff0c\u4e0d\u5e38\u7528\u7684\u547d\u4ee4\uff0c\u4e0d\u5e38\u7528\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u603b\u662f\u53c8\u5076\u7136\u5730\u518d\u6b21\u9700\u8981\u3002</p> <p>\u4e0e\u5176\u6bcf\u6b21\u90fd\u91cd\u65b0\u8fdb\u884c\u641c\u7d22\uff0c\u4e0d\u5982\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u6b21\u81ea\u5df1\u7684\u89e3\u51b3\u65b9\u6848\u3002</p>"},{"location":"methods/format_disk/","title":"MacOS \u7cfb\u7edf\u4e0b\u5982\u4f55\u683c\u5f0f\u5316\u78c1\u76d8","text":"<p>\u5728 macos \u4e2d\u683c\u5f0f\u5316\u53ef\u4ee5\u901a\u8fc7\u78c1\u76d8\u5de5\u5177(Disk Utility)\u6765\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u662f\u4e00\u4e2a\u7cfb\u7edf\u81ea\u5e26\u7684\u8f6f\u4ef6\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ec8\u7aef\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u6211\u5728\u8fdb\u884c\u64cd\u4f5c\u65f6\u901a\u8fc7\u78c1\u76d8\u5de5\u5177\u8fdb\u884c\u62b9\u9664\u7684\u65b9\u6cd5\u5931\u8d25\u4e86\uff0c\u6240\u4ee5\u53ea\u80fd\u901a\u8fc7\u7ec8\u7aef\u8fdb\u884c\u683c\u5f0f\u5316\u3002</p>"},{"location":"methods/format_disk/#_1","title":"\u901a\u8fc7\u78c1\u76d8\u5de5\u5177\u8fdb\u884c\u683c\u5f0f\u5316","text":"<p>\u9996\u5148\u6253\u5f00\u78c1\u76d8\u5de5\u5177\uff0c<code>command + space</code>\uff0c\u641c\u7d22\u78c1\u76d8\u5de5\u5177:</p> <p></p> <p>\u6253\u5f00\u4e4b\u540e\uff0c\u5728\u5de6\u4fa7\u9009\u62e9\u5217\u8868\u4e2d\u9009\u62e9\u8981\u8fdb\u884c\u683c\u5f0f\u5316\u7684\u78c1\u76d8\uff08\u6ce8\u610f\u5343\u4e07\u4e0d\u8981\u9009\u9519\uff09\uff0c\u7136\u540e\u70b9\u51fb\u9876\u90e8\u53f3\u4fa7\u7684\"\u62b9\u6389\"\u6309\u94ae\u3002\u5982\u56fe\u6240\u793a\uff1a</p> <p></p>"},{"location":"methods/format_disk/#_2","title":"\u901a\u8fc7\u7ec8\u7aef\u8fdb\u884c\u683c\u5f0f\u5316\uff08\u63a8\u8350\uff09","text":"<p>\u5982\u679c\u56fe\u5f62\u5316\u754c\u9762\u7684\u62b9\u9664\u9047\u5230\u4e86\u9519\u8bef\uff0c\u90a3\u4e48\u6700\u597d\u901a\u8fc7\u7ec8\u7aef\u547d\u4ee4\u884c\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u62b9\u9664\u3002\u9996\u5148\u6253\u5f00\u7ec8\u7aef\uff0c\u8f93\u5165<code>diskutil list</code>\u6765\u5217\u4e3e\u51fa\u6240\u6709\u7684\u78c1\u76d8\uff0c\u627e\u5230\u81ea\u5df1\u9700\u8981\u8fdb\u884c\u62b9\u9664\u7684\u78c1\u76d8\u7f16\u53f7\uff1a</p> <p></p> <p>\u4f8b\u5982\u6211\u8fd9\u91cc\u627e\u5230\u6211\u8981\u62b9\u9664\u7684\u78c1\u76d8\u5c31\u662f<code>disk7</code>\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5bf9\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u6ce8\u610f\u5b9e\u9645\u4f7f\u7528\u4f7f\u9700\u8981\u5c06\u5176\u4e2d\u7684<code>disk7</code>\u66ff\u6362\u4e3a\u81ea\u5df1\u7684\u78c1\u76d8\uff1a</p> <pre><code># \u9996\u5148\u5bf9\u786c\u76d8\u8fdb\u884c\u5378\u8f7d\nsudo diskutil umountDisk /dev/diskx\n\n# \u968f\u540e\u4f7f\u7528 0 \u6765\u8986\u76d6\u786c\u76d8\u7684\u6240\u6709\u6247\u533a\nsudo diskutil zeroDisk /dev/diskx\n\n# \u6700\u540e\u5bf9\u786c\u76d8\u91cd\u65b0\u8fdb\u884c\u5206\u533a\uff0c\u683c\u5f0f\u5316U\u76d8\nsudo diskutil eraseDisk ExFAT ud /dev/diskx\n</code></pre> <p>\u5982\u679c\u60f3\u8981\u683c\u5f0f\u5316\u4e3a\u5176\u4ed6\u683c\u5f0f\uff0c\u53ef\u4ee5\u5c06<code>ExFAT</code>\u66ff\u6362\u4e3a\u5176\u4ed6\u683c\u5f0f\uff0c\u4f8b\u5982<code>APFS</code>\u7b49\u3002</p> <p>\u53c2\u8003\u622a\u56fe\uff1a</p> <p></p>"},{"location":"methods/linux_command/","title":"Linux \u64cd\u4f5c\u8bb0\u5f55","text":""},{"location":"methods/linux_command/#_1","title":"\u73af\u5883\u4fe1\u606f\u67e5\u8be2","text":""},{"location":"methods/linux_command/#cpu","title":"\u67e5\u770b\u5185\u6838/\u64cd\u4f5c\u7cfb\u7edf/CPU\u4fe1\u606f","text":"<pre><code>uname -a\n</code></pre>"},{"location":"methods/linux_command/#_2","title":"\u67e5\u770b\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c","text":"<pre><code>head -n 1 /etc/issue\n</code></pre>"},{"location":"methods/linux_command/#cpu_1","title":"\u67e5\u770b CPU \u4fe1\u606f","text":"<pre><code>cat /proc/cpuinfo\n</code></pre>"},{"location":"methods/linux_command/#_3","title":"\u6742\u9879","text":""},{"location":"methods/linux_command/#_4","title":"\u67e5\u627e\u7aef\u53e3\u5360\u7528","text":"<pre><code>lsof -i:\u7aef\u53e3\u53f7\n</code></pre>"},{"location":"methods/linux_command/#_5","title":"\u5220\u9664\u663e\u5361\u4e0a\u6240\u6709\u7684\u8fdb\u7a0b","text":"<pre><code>fuser -v /dev/nvidiaX | xargs -t -n 1 kill -9\n</code></pre> <p>\u5176\u4e2d\u5927\u5199\u7684 <code>X</code> \u66ff\u6362\u4e3a\u663e\u5361\u7f16\u53f7\uff08<code>0-7</code>\uff09</p>"},{"location":"methods/linux_command/#_6","title":"\u5220\u9664\u663e\u5361\u4e0a\u67d0\u4e2a\u7528\u6237\u6240\u6709\u7684\u8fdb\u7a0b","text":"<pre><code>fuser -v /dev/nvidiaX 2&gt;&amp;1 | grep zhr | xargs -t -n 1 kill -9\n</code></pre> <p>\u8c8c\u4f3c\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u4e3b\u8981\u662f <code>xargs</code> \u6ca1\u6709\u6b63\u786e parse \u51fa PID\uff0c\u628a\u6240\u6709\u5185\u5bb9\u90fd\u653e\u8fdb\u53bb Kill \u4e86\u4e00\u904d\u3002</p>"},{"location":"methods/vscode_setting/","title":"VSCode \u914d\u7f6e\u8bb0\u5f55","text":"<p>\u4e4b\u524d\u7684 VScode \u770b\u817b\u4e86\uff0c\u5e76\u4e14\u88c5\u4e86\u592a\u591a\u7684\u63d2\u4ef6\u8fc7\u4e8e\u81c3\u80bf\u3002\u8d81\u7740\u8fd9\u6b21\u673a\u4f1a\uff0c\u201c\u91cd\u6784\u201d\u4e00\u4e0b VScode \u63d2\u4ef6\u548c\u76f8\u5173\u7684\u7f8e\u5316\u3002</p> <p>~~\u65f6\u523b\u4fdd\u6301\u65b0\u9c9c\u611f\u8fd8\u662f\u5f88\u91cd\u8981\u7684~~</p> <p>\u987a\u4fbf\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u6211\u5728 VScode \u4e0a\u9762\u7684\u63d2\u4ef6\uff0c\u548c\u6700\u7ec8\u7684\u7f8e\u5316\u6548\u679c</p>"},{"location":"methods/vscode_setting/#_1","title":"\u754c\u9762\u7bc7","text":""},{"location":"methods/vscode_setting/#material-icon-theme","title":"Material Icon Theme","text":"<p>\u5e94\u8be5\u5c5e\u4e8e\u662f\u5fc5\u5907\u63d2\u4ef6\u4e86\uff0c\u53ef\u4ee5\u7ed9\u5de6\u4fa7\u754c\u9762\u680f\u63d0\u4f9b\u597d\u770b\u7684\u56fe\u6807\u3002</p> <p></p>"},{"location":"methods/vscode_setting/#dark-synthwave-84-vs-code-theme","title":"Dark SynthWave '84 - VS Code theme","text":"<p>\u63a5\u4e0b\u6765\u5c31\u662f\u5341\u5206\u91cd\u8981\u7684\u90e8\u5206 \u2014\u2014 VScode\u4e3b\u9898\uff0c\u4e4b\u524d\u4e00\u76f4\u5728\u7528 Github Dark\u3002\u8fd9\u6b21\u60f3\u5c1d\u8bd5\u4e00\u4e2a\u65b0\u7684 theme\u3002\u8fd9\u4e2a theme \u4e3b\u8981\u5438\u5f15\u6211\u7684\u70b9\u662f\u8fd9\u4e2a\u4e3b\u9898\u7684\u9713\u8679\u706f\u6548\u679c\u3002</p> <p></p> <p>\u5176\u5b9e\u73b0\u5728\u53c8\u6362\u56de Github Dark \u4e86\uff0c\u8fd9\u4e2a Theme \u770b\u4e45\u4e86\u773c\u775b\u7d2f</p>"},{"location":"methods/vscode_setting/#_2","title":"\u63d2\u4ef6\u7bc7","text":""},{"location":"methods/vscode_setting/#_3","title":"\u8bed\u8a00\u652f\u6301","text":"<ul> <li>C/C++ Extension Pack: C++ \u5168\u5bb6\u6876</li> <li>Python Extension Pack : Python \u5168\u5bb6\u6876</li> <li>rust : \u5168\u5bb6\u6876\u786e\u5b9e\u540d\u5b57\u5c31\u53eb\u505a rust</li> <li>Markdown All in One : markdown \u5168\u5bb6\u6876</li> </ul>"},{"location":"methods/vscode_setting/#remote-development","title":"Remote Development","text":"<p>\u56e0\u4e3a\u6709\u8fdc\u7a0b\u8fde\u63a5\u670d\u52a1\u5668\u7684\u9700\u6c42\uff0c\u6240\u4ee5 VScode \u7684\u8fdc\u7a0b\u63d2\u4ef6\u4e5f\u9700\u8981\u914d\u9f50</p>"},{"location":"methods/vscode_setting/#github","title":"GitHub \u5168\u5bb6\u6876","text":"<ul> <li>GitHub Pull Requests: \u5728 VScode \u4e2d\u5904\u7406 PR</li> <li>GitHub Copilot: AI \u65f6\u4ee3</li> <li>GitHub Copilot Chat: AI \u65f6\u4ee3</li> <li>GitHub Actions: GitHub workflow \u89e3\u653e\u53cc\u624b</li> </ul>"},{"location":"methods/vscode_setting/#path-intellisense","title":"Path Intellisense","text":"<p>\u53ef\u4ee5\u81ea\u52a8\u5728\u7f16\u5199\u672c\u5730\u8def\u5f84\u65f6\u8fdb\u884c\u8865\u9f50</p>"},{"location":"methods/vscode_setting/#_4","title":"\u8bbe\u7f6e\u7bc7","text":"<p>VScode \u672c\u8eab\u7684\u8bbe\u7f6e\u4e5f\u9700\u8981\u4e00\u4e9b\u4fee\u6b63\uff01</p>"},{"location":"methods/vscode_setting/#_5","title":"\u7ed9\u62ec\u53f7\u4e0a\u8272","text":"<p><code>@id:editor.bracketPairColorization.enabled @id:editor.guides.bracketPairs</code></p> <p>\u4fee\u6539\u914d\u7f6e\u4e3a True \u6765\u542f\u7528\u5f69\u8272\u62ec\u53f7\u3002\u5728\u591a\u4e2a\u62ec\u53f7\u5806\u53e0\u7684\u65f6\u5019\u53ef\u4ee5\u5f88\u597d\u533a\u5206\u3002</p> <p></p>"},{"location":"methods/vscode_setting/#_6","title":"\u5b57\u4f53\u4fee\u6539","text":"<p><code>terminal.integrated.fontFamily</code></p> <p>\u56e0\u4e3a\u6211\u7684 zsh \u4f7f\u7528\u4e86\u4e00\u4e9b\u795e\u5947\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u9700\u8981\u628a\u7ec8\u7aef\u5b57\u4f53\u4fee\u6539\u4e3a <code>BitstromWera Nerd Font Propo</code> \u624d\u80fd\u6b63\u5e38\u663e\u793a\u8fd9\u4e9b\u5947\u5999\u7684\u5b57\u7b26\u3002\u5f53\u7136\u8fd9\u4e2a\u5b57\u4f53\u4e5f\u662f\u9700\u8981\u5b89\u88c5\u7684(\u795e\u79d8\u94fe\u63a5)\u3002\u4e5f\u53ef\u4ee5\u6311\u9009\u5176\u4ed6\u559c\u6b22\u7684\u5b57\u4f53\u3002</p>"},{"location":"methods/vscode_setting/#_7","title":"\u6742\u9879","text":""},{"location":"methods/vscode_setting/#_8","title":"\u7ffb\u8bd1(\u82f1\u6c49\u8bcd\u5178)","text":""},{"location":"others/","title":"\u6742\u9879","text":"<p>\u8fd9\u90fd\u662f\u4e9b\u4ec0\u4e48\u4e1c\u897f\uff1f</p> <p>\u8fd9\u6211\u600e\u4e48\u4ecb\u7ecd\uff1f</p> <p>\u8fd8\u662f\u76f4\u63a5\u53f3\u4e0b\u89d2\u4e0b\u4e00\u9875\u5427\u3002</p>"},{"location":"others/ads/","title":"ADS \u8bfe\u7a0b\u8bc4\u5206\u7ec6\u5219\u4e0e\u8bc4\u5206\u7a0b\u5e8f","text":"<p>\u505a\u4e86\u4e09\u6b21 ADS \u52a9\u6559\uff0c\u6bcf\u4e00\u6b21\u4ecb\u7ecd\u8bc4\u5206\u89c4\u5219\u7684\u65f6\u5019\u90fd\u611f\u89c9\u8fd9\u4e2a\u89c4\u5219\u5341\u5206\u590d\u6742\u3002</p> <pre><code>graph LR\n  A[\u603b\u5206 100] --&gt; B[\u671f\u672b 40 \u5206];\n  A --&gt; C[\u5e73\u65f6 60 \u5206]\n  C --&gt; I[Project 30 \u5206]\n  C --&gt; J[\u5e73\u65f6\u4f5c\u4e1a 10 \u5206]\n  C --&gt; K[\u8bfe\u4e0a\u8ba8\u8bba 10 \u5206]\n  C --&gt; L[\u671f\u4e2d\u8003\u8bd5 10 \u5206]\n  I --&gt; D[\u62a5\u544a 20 \u5206]\n  I --&gt; E[\u5c55\u793a 6 \u5206]\n  I --&gt; F[\u4e92\u8bc4 4 \u5206]\n  D --&gt; G[\u5c55\u793a Project \u62a5\u544a\u5206\u6570 10 \u5206]\n  D --&gt; H[\u5176\u4f59 Project \u4e2d\u62a5\u544a\u6700\u9ad8\u5206 10 \u5206]</code></pre> <p>\u9996\u5148\u6211\u4eec\u5f15\u7528 PPT \u539f\u6587\uff1a</p> <p></p> <p>\u671f\u672b\u8003\u8bd5\u4e0e\u5e73\u65f6\u5206\u6570\u662f 4:6 \u7684\u6bd4\u4f8b\uff0c\u8fd9\u662f\u4e00\u95e8\u5e73\u65f6\u5206\u5360\u6bd4\u8fd8\u662f\u5f88\u9ad8\u7684\u79d1\u76ee\u3002\u4e00\u822c\u6765\u8bf4\uff0cADS \u8fc7\u4e0e\u4e0d\u8fc7\u4e3b\u8981\u5c31\u662f\u770b\u671f\u672b\u8003\u8bd5\u7684\u5206\u6570\u80fd\u5426\u8fbe\u6807\uff0c\u56e0\u4e3a ADS \u7684\u671f\u672b\u8003\u8bd5\u5b58\u5728\u65a9\u6740\u7ebf\uff0c\u5982\u679c\u671f\u672b\u8003\u8bd5\u5206\u6570\u4e0d\u8db3 40 \u5206\u4f1a\u6302\u79d1\u3002\u53ea\u8981\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u5206\u6570\u7ebf\u52a9\u6559\u4e00\u822c\u6765\u8bf4\u4e0d\u4f1a\u7ed9\u6302\u79d1\u4e86\u3002</p>"},{"location":"others/ads/#_1","title":"\u5e73\u65f6\u5206\u6784\u6210","text":"<p>\u5f53\u7136\u671f\u672b\u8003\u8bd5\u4e0d\u5728\u672c\u6587\u7684\u4e3b\u8981\u4ecb\u7ecd\u8303\u56f4\u5185\uff0c\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5e73\u65f6\u5206\u7684\u7ec4\u6210\uff1a</p> <ul> <li>Homework: \u6bcf\u5468\u4e00\u6b21\u7684\u4f5c\u4e1a\uff0c\u5171 15 \u6b21\uff0c\u6bcf\u6b21\u65f6\u957f\u4e00\u5468\uff0c\u5728 PTA \u4e0a\u5b8c\u6210\u3002\u6bcf\u6b21\u8bfe\u7a0b\u90fd\u5bf9\u5e94\u7740\u4e00\u6b21\u4f5c\u4e1a\uff0c\u6240\u4ee5\u4e0a\u5b8c\u8bfe\u4e4b\u540e\u5c31\u8981\u60f3\u7740\u9700\u8981\u5b8c\u6210\u8fd9\u6b21\u7684\u8bfe\u7a0b\u4f5c\u4e1a\u3002\u5171\u5360\u603b\u8bc4 10 \u5206\u3002</li> <li>Discussion: \u8001\u5e08\u8bfe\u4e0a\u4f1a\u5e03\u7f6e\u7684\u968f\u5802\u95ee\u9898\uff0c\u7406\u8bba\u4e0a\u6765\u8bf4\u9700\u8981\u5199\u5728\u7eb8\u4e0a\u5e76\u5f53\u5802\u63d0\u4ea4\u3002\u4e3a\u4e86\u65b9\u4fbf\u6536\u96c6\uff0c\u6709\u7684\u73ed\u7ea7\u4f1a\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u540c\u6837\u653e\u5230 PTA \u4e0a\u3002\u4e00\u822c\u6765\u8bf4 Discussion \u662f\u63d0\u4ea4\u5373\u6ee1\u5206\uff0c\u662f\u7b7e\u5230\u6027\u8d28\u7684\u4efb\u52a1\u3002\u6709\u5f88\u591a\u540c\u5b66\u5728 Discussion \u4e0a\u6263\u8bb8\u591a\u5206\u6570\uff0c\u5176\u5b9e\u8fd9\u90e8\u5206\u662f\u6700\u5bb9\u6613\u83b7\u5f97\u7684\u5206\u6570\u3002</li> <li>MidTerm: \u671f\u4e2d\u8003\u8bd5\uff0c\u671f\u4e2d\u8003\u8bd5\u5360\u6bd4\u76f8\u5bf9\u6765\u8bf4\u5f88\u4f4e\uff0c\u800c\u4e14\u53ef\u4ee5\u88ab\u671f\u672b\u8003\u8bd5\u8986\u76d6\u3002\u4f8b\u5982\u671f\u4e2d\u8003\u8bd5\u5f97\u5206 60\uff0c\u671f\u672b\u8003\u8bd5\u5f97\u5206 92\uff0c\u90a3\u4e48\u671f\u4e2d\u8003\u8bd5\u4f1a\u6309\u7167 92 \u8ba1\u7b97\u8ba1\u5165\u6210\u7ee9\u3002</li> <li>Project: \u5c0f\u7ec4\u62a5\u544a\uff0c\u8fd9\u90e8\u5206\u662f\u6700\u4e3a\u590d\u6742\u7684\u8bc4\u5206\u90e8\u5206\uff0c\u5bb9\u6211\u7ec6\u7ec6\u9053\u6765...</li> </ul>"},{"location":"others/ads/#project","title":"Project \u5206\u6570\u6784\u6210","text":"<p>Project \u662f ADS \u8bfe\u7a0b\u4e2d\u7684\u5c0f\u7ec4 Project\uff0c\u5171 8 \u4e2a Project\uff0c\u6bcf\u4e2a Project \u4e24\u5468\u65f6\u95f4\u3002\u540c\u5b66\u9700\u8981\u6700\u591a\u4e09\u4eba\u4e00\u7ec4\u7ec4\u961f\u5b8c\u6210 Project\uff0c\u7ec4\u961f\u540d\u5355\u4f1a\u5728\u7b2c\u4e00\u6b21 Project \u5f00\u59cb\u524d\u786e\u5b9a\uff0c\u786e\u5b9a\u540e\u65e0\u6cd5\u53d8\u66f4\u3002\u5728\u6bcf\u4e2a\u62a5\u544a\u671f\u95f4\uff0c\u540c\u5b66\u4eec\u9700\u8981\u5b8c\u6210\u62a5\u544a\u3001\u4ee3\u7801\u3001\u8bc4\u9605\u4ed6\u4eba\u62a5\u544a\u4ee3\u7801\u3001\u4e0a\u53f0\u5c55\u793a\u3001\u4fee\u6539\u5e76\u63d0\u4ea4\u6700\u7ec8\u7248\u7b49\u6d41\u7a0b\u3002\u6bcf\u4e2a\u5c0f\u7ec4\u9700\u8981\u5b8c\u6574\u53c2\u4e0e\u67d0\u4e00\u4e2a Project \u7684\u5168\u90e8\u6d41\u7a0b\uff08\u5305\u62ec\u4e0a\u53f0\u5c55\u793a\uff09\uff0c\u90e8\u5206\u53c2\u4e0e\u53e6\u4e00\u4e2a Project \u7684\u90e8\u5206\u6d41\u7a0b\uff08\u9664\u4e0a\u53f0\u5c55\u793a\u4e4b\u5916\u7684\u5168\u8fc7\u7a0b\uff09\uff0c\u5e76\u53c2\u4e0e\u6240\u6709 Project \u7684\u8bc4\u9605\u4ed6\u4eba\u62a5\u544a\u4ee3\u7801\u6d41\u7a0b\u624d\u53ef\u4ee5\u83b7\u5f97\u5168\u90e8\u7684\u5206\u6570\u3002</p> <p>Project \u90e8\u5206\u5171\u5360\u5e73\u65f6\u5206 30 \u5206\uff0c\u5e76\u7531\u4e09\u90e8\u5206\u6784\u6210</p> <ul> <li>Report: \u62a5\u544a\u5206\u6570 20 \u5206\u3002\u7531\u5c0f\u7ec4\u53c2\u4e0e\u7684\u4e24\u6b21 Project \u7684\u62a5\u544a\u5f97\u5206\u5e73\u5747\u5206\u7684\u6765\u3002</li> <li>Presentation: \u5c55\u793a 6 \u5206\u3002\u5c0f\u7ec4\u4e0a\u53f0\u5c55\u793a\u65f6\uff0c\u5176\u4ed6\u540c\u5b66\u9700\u8981\u5bf9\u8be5\u5c0f\u7ec4\u7684\u5c55\u793a\u5185\u5bb9\u8fdb\u884c\u6253\u5206\u3002\u6240\u6709\u540c\u5b66\u5bf9\u5c55\u793a\u6253\u5206\u7684\u7ed3\u679c\u548c\u52a9\u6559\u6253\u5206\u7ed3\u679c\u7684\u5e73\u5747\u5206\u4f5c\u4e3a\u8be5\u5c0f\u7ec4\u6700\u7ec8\u7684\u5c55\u793a\u5f97\u5206\u3002</li> <li>Peer Review: \u4e92\u8bc4 4 \u5206\u3002\u65e0\u8bba\u5c0f\u7ec4\u662f\u5426\u63d0\u4ea4\u67d0\u4e2a Project \u7684\u62a5\u544a\uff0c\u8be5\u5c0f\u7ec4\u90fd\u5e94\u8be5\u5bf9\u6b64\u6b21 Project \u5176\u4ed6\u7ec4\u63d0\u4ea4\u7684\u62a5\u544a\u8fdb\u884c\u6253\u5206\u3002\u5982\u679c\u4e92\u8bc4\u4e2d\u6240\u7ed9\u51fa\u7684\u5206\u6570\u89e6\u53d1\u4ef2\u88c1\u673a\u5236\u540e\u4e0e\u4ef2\u88c1\u7ed3\u679c\u5dee\u8ddd\u8fc7\u5927\u4f1a\u6263\u9664\u90e8\u5206\u4e92\u8bc4\u5206\uff0c\u6263\u5b8c\u6b64\u6b21\u7684\u4e92\u8bc4\u5206\u4e3a\u6b62\u3002\u5e73\u5747\u5230 8 \u6b21 Project \u4e2d\uff0c\u6bcf\u6b21\u4e92\u8bc4\u5360\u603b\u8bc4 0.5 \u5206\u3002</li> </ul>"},{"location":"others/ads/#bonus","title":"Bonus","text":"<p>Bonus \u6307\u7684\u662f\u540c\u5b66\u5b8c\u6210\u4e86\u8bfe\u7a0b\u8bc4\u5206\u89c4\u5219\u4e2d\u6240\u672a\u8981\u6c42\u7684\u989d\u5916\u90e8\u5206\u5f97\u5230\u7684\u52a0\u5206\u3002ADS \u7684 Bonus \u6765\u6e90\u6709\u4e24\u4e2a\uff1a</p> <ul> <li>\u8001\u5e08\u989d\u5916\u7ed9\u7684 Bonus\u3002\u8001\u5e08\u7ed9 Bonus \u7684\u7406\u7531\u6bd4\u8f83\u968f\u673a\uff0c\u4e00\u822c\u6765\u8bf4\u662f\u540c\u5b66\u5728\u8bfe\u4e0a\u56de\u7b54\u51fa\u6765\u4e86\u8f83\u96be\u7684\u95ee\u9898\u3002\u6216\u8005\u540c\u5b66\u4e3a\u8bfe\u7a0b\u7684\u5b66\u4e60\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u8d44\u6599~~\u8ba9\u8001\u5e08\u6bd4\u8f83\u9ad8\u5174~~\u3002\u4f46\u662f\u8fd9\u4e2a\u6bd4\u8f83\u968f\u673a\u6389\u843d\u3002</li> <li>\u989d\u5916\u5b8c\u6210\u66f4\u591a\u7684 Project</li> </ul> <p>\u524d\u9762\u5176\u5b9e\u6709\u63d0\u5230\uff0c\u6bcf\u4e2a\u5c0f\u7ec4\u89c4\u5b9a\u4e2d\u9700\u8981\u5b8c\u6210\u81f3\u5c11\u4e24\u6b21 Project\u62a5\u544a\u63d0\u4ea4\u3002\u5982\u679c\u6709\u5c0f\u7ec4\u5b8c\u6210\u4e09\u6b21\u53ca\u4ee5\u4e0a\u7684\u8bdd\uff0c\u90a3\u4e48\u591a\u51fa\u6765\u7684\u90e8\u5206\u5c31\u662f Bonus \u4e86\u3002</p> <p>\u5c0f\u7ec4\u989d\u5916\u5b8c\u6210\u7684 Project \u7684\u62a5\u544a\u5f97\u5206 / 20 \u4f1a\u5f53\u4f5c Bonus \u989d\u5916\u52a0\u5165\u5230\u5e73\u65f6\u5206\u4e2d\u3002\u5373\u5982\u679c\u989d\u5916\u505a\u7684 Project \u5728\u4e92\u8bc4\u548c\u6700\u7ec8\u63d0\u4ea4\u9636\u6bb5\u5747\u83b7\u5f97\u4e86\u6ee1\u5206\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230 1 \u5206\u7684 Bonus\u3002</p> <p>\u81f3\u6b64\uff0cADS \u8bfe\u7a0b\u7684\u5168\u90e8\u8bc4\u5206\u89c4\u5219\u4ecb\u7ecd\u7ed3\u675f\u3002</p>"},{"location":"others/ads/#faq","title":"FAQ","text":"\u5982\u679c\u6211\u505a\u4e86 4 \u4e2a Project\uff0c\u90a3\u4e48\u662f\u53d6\u54ea\u4e24\u6b21 Project Report \u5206\u6570\u505a\u5e73\u5747\u5462\uff1f <p>\u53d6\u4e0a\u53f0\u5c55\u793a\u8fd9\u6b21\u7684 Project \u548c\u5176\u4f59 Project \u4e2d\u6700\u9ad8\u7684 Report \u5206\u6570\u505a\u5e73\u5747\u3002\u5269\u4e0b\u7684 Project \u4f5c\u4e3a Bonus\u3002\u5373\u6c38\u8fdc\u662f\u4ee5\u5206\u6570\u6700\u9ad8\u7684\u65b9\u5f0f\u8ba1\u7b97\u6210\u7ee9\u3002</p> \u4e92\u8bc4\u5177\u4f53\u662f\u600e\u4e48\u8fdb\u884c\u7684\uff1f <p>\u4e92\u8bc4\u4e3b\u8981\u662f\u201c\u76f2\u5ba1\u201d\uff0c\u5373\u63d0\u4ea4 PR \u7248\u672c\u7684\u62a5\u544a\u65f6\u9700\u8981\u9690\u53bb\u62a5\u544a\u4e2d\u7684\u5168\u90e8\u59d3\u540d\u3001\u7ec4\u53f7\u3002\u6ce8\u610f\u6587\u4ef6\u5c5e\u6027\u548c PDF \u6587\u6863\u5c5e\u6027\u4e2d\u7684\u59d3\u540d\u4e0e\u7ec4\u53f7\u90fd\u9700\u8981\u9690\u53bb\u3002\u4e00\u65e6\u80fd\u591f\u901a\u8fc7\u5e38\u89c4\u624b\u6bb5\u53d1\u73b0\u62a5\u544a\u4e2d\u76f4\u63a5\u66b4\u9732\u4e86\u59d3\u540d\u6216\u7ec4\u522b\uff0c\u5219\u4f1a\u76f4\u63a5\u5931\u53bb\u8fd9\u90e8\u5206\u5206\u6570\u3002</p> \u8bda\u4fe1\u5b88\u5219\u662f\u4ec0\u4e48\uff1f <p>\u8bda\u4fe1\u5b88\u5219\u4e0d\u5305\u542b\u5728\u8bc4\u5206\u4e2d\uff0c\u6240\u6709\u540c\u5b66\u90fd\u9700\u8981\u6ee1\u5206\u901a\u8fc7\u8bda\u4fe1\u5b88\u5219\u624d\u53ef\u4ee5\u53c2\u52a0\u8003\u8bd5\u3002\u5982\u679c\u4e00\u6b21\u4e0d\u8fc7\u53ef\u4ee5\u6709\u4e0b\u4e00\u6b21\uff0c\u4e3b\u8981\u4f5c\u7528\u5e94\u8be5\u662f\u544a\u77e5\u540c\u5b66\u4eec\u54ea\u4e9b\u884c\u4e3a\u662f\u8fdd\u53cd\u89c4\u5b9a\u7684\u3002</p> \u80fd\u5426\u53c2\u52a0\u591a\u6b21\u5c55\u793a\uff1f\u6709\u6ca1\u6709\u989d\u5916\u52a0\u5206\uff1f <p>\u4e0d\u80fd\uff0c\u6bcf\u4e2a\u5c0f\u7ec4\u53ea\u80fd\u4e5f\u53ea\u9700\u8981\u5c55\u793a\u4e00\u6b21</p> \u4e24\u4eba\u961f\u6216\u8005 Solo \u5b8c\u6210 Project \u6709\u6ca1\u6709\u989d\u5916\u52a0\u5206\uff1f <p>\u4e0d\u80fd\uff0c\u8bfe\u7a0b\u7ec4\u4e0d\u9f13\u52b1\u5355\u4eba\u6216\u8005\u53cc\u4eba\u961f\u3002\u6240\u4ee5\u4e0d\u4f1a\u6709\u52a0\u5206\uff1f</p> \u80fd\u5426\u8865\u4ea4\u4f5c\u4e1a\uff1f <p>\u5efa\u8bae\u95ee\u8bfe\u7a0b\u52a9\u6559\u3002\u6bcf\u4e2a\u73ed\u5bf9\u8865\u4ea4\u7684\u89c4\u5b9a\u4e0d\u4e00\u6837\u3002</p>"},{"location":"others/ads/#_2","title":"\u52a9\u6559\u533a","text":"<p>\u4e3a\u4e86\u65b9\u4fbf\u7edf\u8ba1\u6210\u7ee9\uff0c\u6211\u5199\u4e86\u4e00\u4e2a Python \u7a0b\u5e8f\uff08\u8fd8\u662f\u4e0d\u4f1a\u7528 Excel \u5bfc\u81f4\u7684\uff09\u6765\u5b8c\u6210\u5bf9 Project \u5206\u6570\u7684\u7edf\u8ba1\u4e0e\u5c0f\u7ec4\u6210\u7ee9\u7684\u5206\u53d1\u3002</p> <p>\u8be5\u7a0b\u5e8f\u57fa\u4e8e\u8be5\u8868\u7ed3\u6784\u70b9\u51fb\u4e0b\u8f7d\u5b9e\u73b0\uff0c\u53ef\u4f9b\u53c2\u8003\u3002</p> Project\u6210\u7ee9\u7edf\u8ba1.pyProject\u6210\u7ee9\u5206\u53d1.py <pre><code>import openpyxl\nfrom openpyxl.utils import get_column_letter\n\n# \u8ba1\u7b97 Project \u6210\u7ee9\ndef calc_group_scores(input_file, sheet_name, start_row, end_row, first_total, col_duration, project_num, target_report, target_bonus):\n    wb = openpyxl.load_workbook(input_file)\n    sheet = wb[sheet_name]\n    for row in range(start_row, end_row + 1):\n        # \u62a5\u544a\u603b\u5206\u7684 pre \u9879\u76ee\uff0c\u548c\u5176\u4f59\u9879\u76ee\u7684\u62a5\u544a\u5206\u6570\u7edf\u8ba1\n        pre_total, max_total, sum_total = 0, 0, 0\n        # pre \u5c55\u793a\u5206\u6570\uff0cPR \u5206\u6570\u7edf\u8ba1\n        pre_score_sum, PR_score_sum = 0, 0\n        col_number = [first_total + i*col_duration for i in range(project_num)] \n        for col in col_number:\n            total_val = (float(sheet.cell(row=row, column=col-1).value) + float(sheet.cell(row=row, column=col-2).value)) / 2\n            pre_score = float(sheet.cell(row=row, column=col+1).value)\n            PR_score  = float(sheet.cell(row=row, column=col+2).value)\n\n            if pre_score != 0:\n                pre_total += total_val\n            else:\n                max_total = max(max_total, total_val)\n                sum_total += total_val\n            pre_score_sum += pre_score\n            PR_score_sum += PR_score\n        sheet.cell(row=row, column=target_report).value = (pre_total + max_total) / 2\n        sheet.cell(row=row, column=target_report+1).value = pre_score_sum\n        sheet.cell(row=row, column=target_report+2).value = PR_score_sum / project_num / 10\n        sheet.cell(row=row, column=target_bonus).value = (sum_total - max_total) / 20\n    wb.save(input_file)\n\ninput_file = 'result.xlsx'\nsheet_name = 'Sheet3'\n\nstart_row = 3\nend_row = 19\n\nfirst_total = 11\ncol_duration = 5\nproject_num = 8\n\ntarget_report = 49\ntarget_bouns = 52\n\ncalc_group_scores(input_file, sheet_name, start_row, end_row, first_total, col_duration, project_num, target_report, target_bouns)\n</code></pre> <pre><code>import openpyxl\nfrom openpyxl.utils import get_column_letter\n\n# \u7edf\u8ba1\u5c0f\u7ec4\u6210\u7ee9\u5230\u603b\u8868(Sheet3 -&gt; Sheet1)\ndef calc_group_scores(input_file, \n                    sheet_total, total_id_col, total_score_col, total_bonus_col, total_start_row, total_end_row,\n                    sheet_project, project_id_col, project_score_col, project_start_row, project_end_row):\n    wb = openpyxl.load_workbook(input_file)\n    sheet_project = wb[sheet_project]\n    sheet_total = wb[sheet_total]\n    id2score = dict()\n    for row in range(project_start_row, project_end_row+1):\n        for col in project_id_col:\n            id2score[str(sheet_project.cell(row=row, column=col).value)] = (\\\n                float(sheet_project.cell(row=row, column=project_score_col).value),   # report\n                float(sheet_project.cell(row=row, column=project_score_col+1).value), # pre\n                float(sheet_project.cell(row=row, column=project_score_col+2).value), # PR\n                float(sheet_project.cell(row=row, column=project_score_col+3).value)) # bonus\n    for row in range(total_start_row, total_end_row+1):\n        score = id2score[str(sheet_total.cell(row=row, column=total_id_col).value)]\n        sheet_total.cell(row=row, column=total_score_col).value = score[0]\n        sheet_total.cell(row=row, column=total_score_col+1).value = score[1]\n        sheet_total.cell(row=row, column=total_score_col+2).value = score[2]\n        sheet_total.cell(row=row, column=total_bonus_col).value = score[3]\n    wb.save(input_file)\n\ninput_file = 'result.xlsx'\nsheet_total = 'Sheet1'\ntotal_id_col = 1\ntotal_score_col = 43\ntotal_bonus_col = 11\ntotal_start_row = 2\ntotal_end_row = 50\n\nsheet_project = 'Sheet3'\nproject_id_col = [3, 5, 7]\nproject_score_col = 49\nproject_start_row = 3\nproject_end_row = 19\n\ncalc_group_scores(input_file, \n                    sheet_total, total_id_col, total_score_col, total_bonus_col, total_start_row, total_end_row,\n                    sheet_project, project_id_col, project_score_col, project_start_row, project_end_row)\n</code></pre>"}]}